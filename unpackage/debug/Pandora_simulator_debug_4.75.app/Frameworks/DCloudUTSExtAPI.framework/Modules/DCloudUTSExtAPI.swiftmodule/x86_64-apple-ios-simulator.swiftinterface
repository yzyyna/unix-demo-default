// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DCloudUTSExtAPI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import AVFoundation
import CommonCrypto
import Compression
import CoreFoundation
import CoreImage
import CoreLocation
import CoreMedia
import CoreTelephony
@_exported import DCloudUTSExtAPI
import DCloudUTSFoundation
import DCloudUniappRuntime
import Darwin
import Dispatch
import Foundation
import JavaScriptCore
import MediaPlayer
import MobileCoreServices
import Network
import ObjectiveC
import Photos
import PhotosUI
import QuickLook
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniActionSheetPopover) @objcMembers public class Popover : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var top: Foundation.NSNumber!
  @objc public var left: Foundation.NSNumber!
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowActionSheetErrorCode = Foundation.NSNumber
public protocol ShowActionSheetSuccess {
  var errMsg: Swift.String { get set }
  var tapIndex: Foundation.NSNumber { get set }
}
public typealias ShowActionSheetSuccessCallback = (_ result: any DCloudUTSExtAPI.ShowActionSheetSuccess) -> Swift.Void
public protocol ShowActionSheetFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ShowActionSheetErrorCode { get set }
}
public typealias ShowActionSheetFailCallback = (_ result: any DCloudUTSExtAPI.ShowActionSheetFail) -> Swift.Void
public typealias ShowActionSheetComplete = Any
public typealias ShowActionSheetCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniActionSheetShowActionSheetOptions) @objcMembers public class ShowActionSheetOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var title: Swift.String?
  @objc public var alertText: Swift.String?
  @objc public var itemList: [Swift.String]!
  @objc public var itemColor: Swift.String?
  @objc public var popover: DCloudUTSExtAPI.Popover?
  @objc public var titleColor: Swift.String?
  @objc public var cancelText: Swift.String?
  @objc public var cancelColor: Swift.String?
  @objc public var backgroundColor: Swift.String?
  public var success: DCloudUTSExtAPI.ShowActionSheetSuccessCallback?
  public var fail: DCloudUTSExtAPI.ShowActionSheetFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ShowActionSheetCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowActionSheet = (_ options: DCloudUTSExtAPI.ShowActionSheetOptions) -> Swift.Void
@objc(UTSSDKModulesDCloudUniActionSheetShowActionSheetSuccessImpl) @objcMembers public class ShowActionSheetSuccessImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.ShowActionSheetSuccess {
  @objc public var tapIndex: Foundation.NSNumber
  @objc public var errMsg: Swift.String
  @objc public init(_ tapIndex: Foundation.NSNumber, _ errMsg: Swift.String = "showActionSheet:ok")
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniActionSheetShowActionSheetFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniActionSheetShowActionSheetFailImpl) public class ShowActionSheetFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.ShowActionSheetFail {
  @objc override public var errCode: DCloudUTSExtAPI.ShowActionSheetErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errMsg: Swift.String = "showActionSheet:fail cancel", _ errCode: DCloudUTSExtAPI.ShowActionSheetErrorCode = 4)
  @objc deinit
}
public var showActionSheet: (_ options: DCloudUTSExtAPI.ShowActionSheetOptions) -> Swift.Void
public var hideActionSheet: () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniActionSheetShowActionSheetOptionsJSONObject) @objcMembers public class ShowActionSheetOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var alertText: Swift.String?
  @objc public var itemList: [Swift.String]!
  @objc public var itemColor: Swift.String?
  @objc public var popover: DCloudUTSExtAPI.Popover?
  @objc public var titleColor: Swift.String?
  @objc public var cancelText: Swift.String?
  @objc public var cancelColor: Swift.String?
  @objc public var backgroundColor: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func showActionSheetByJs(_ options: DCloudUTSExtAPI.ShowActionSheetOptionsJSONObject)
public func hideActionSheetByJs()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniActionSheetIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniActionSheetIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_showActionSheetByJs(_ options: DCloudUTSExtAPI.ShowActionSheetOptionsJSONObject)
  @objc public static func s_hideActionSheetByJs()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeOsThemeChangeResult) @objcMembers public class OsThemeChangeResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var osTheme: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeAppThemeChangeResult) @objcMembers public class AppThemeChangeResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var appTheme: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnOsThemeChangeCallback = (_ res: DCloudUTSExtAPI.OsThemeChangeResult) -> Swift.Void
public typealias OnOsThemeChange = (_ callback: @escaping DCloudUTSExtAPI.OnOsThemeChangeCallback) -> Foundation.NSNumber
public typealias OffOsThemeChange = (_ id: Foundation.NSNumber) -> Swift.Void
public typealias OnHostThemeChange = (_ callback: @escaping DCloudUTSExtAPI.OnHostThemeChangeCallback) -> Foundation.NSNumber
public typealias OffHostThemeChange = (_ id: Foundation.NSNumber) -> Swift.Void
public typealias SetAppTheme = (_ options: DCloudUTSExtAPI.SetAppThemeOptions) -> Swift.Void
public typealias OnAppThemeChangeCallback = (_ res: DCloudUTSExtAPI.AppThemeChangeResult) -> Swift.Void
public typealias OnAppThemeChange = (_ callback: @escaping DCloudUTSExtAPI.OnAppThemeChangeCallback) -> Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeSetAppThemeSuccessResult) @objcMembers public class SetAppThemeSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var theme: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SetAppThemeSuccessCallback = (_ result: DCloudUTSExtAPI.SetAppThemeSuccessResult) -> Swift.Void
public typealias SetAppThemeFailCallback = (_ result: any DCloudUTSExtAPI.IAppThemeFail) -> Swift.Void
public typealias SetAppThemeCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeSetAppThemeOptions) @objcMembers public class SetAppThemeOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var theme: Swift.String!
  @objc public var success: DCloudUTSExtAPI.SetAppThemeSuccessCallback?
  public var fail: DCloudUTSExtAPI.SetAppThemeFailCallback?
  @objc public var complete: DCloudUTSExtAPI.SetAppThemeCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias AppThemeErrorCode = Foundation.NSNumber
public typealias AppThemeFail = DCloudUTSExtAPI.IAppThemeFail
public protocol IAppThemeFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.AppThemeErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeOnHostThemeChangeCallbackResult) @objcMembers public class OnHostThemeChangeCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var hostTheme: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnHostThemeChangeCallback = (_ result: DCloudUTSExtAPI.OnHostThemeChangeCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeOnThemeChangeCallbackResult) @objcMembers public class OnThemeChangeCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var theme: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var AppThemeUniErrorSubject: Swift.String
public var AppThemeUniErrors: [DCloudUTSExtAPI.AppThemeErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniThemeAppThemeFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniThemeAppThemeFailImpl) public class AppThemeFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IAppThemeFail {
  @objc override public var errCode: DCloudUTSExtAPI.AppThemeErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errCode: DCloudUTSExtAPI.AppThemeErrorCode)
  @objc deinit
}
public var onOsThemeChange: (_ callback: @escaping DCloudUTSExtAPI.OnOsThemeChangeCallback) -> Foundation.NSNumber
public var offOsThemeChange: (_ id: Foundation.NSNumber) -> Swift.Void
public var setAppTheme: (_ options: DCloudUTSExtAPI.SetAppThemeOptions) -> Swift.Void
public var onAppThemeChange: (_ callback: @escaping DCloudUTSExtAPI.OnAppThemeChangeCallback) -> Foundation.NSNumber
public var offAppThemeChange: (_ id: Foundation.NSNumber) -> Swift.Void
public var onHostThemeChange: (_ callback: @escaping DCloudUTSExtAPI.OnHostThemeChangeCallback) -> Foundation.NSNumber
public var offHostThemeChange: (_ id: Foundation.NSNumber) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeSetAppThemeOptionsJSONObject) @objcMembers public class SetAppThemeOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var theme: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func onOsThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
public func offOsThemeChangeByJs(_ id: Foundation.NSNumber)
public func setAppThemeByJs(_ options: DCloudUTSExtAPI.SetAppThemeOptionsJSONObject)
public func onAppThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
public func offAppThemeChangeByJs(_ id: Foundation.NSNumber)
public func onHostThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
public func offHostThemeChangeByJs(_ id: Foundation.NSNumber)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniThemeIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniThemeIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_onOsThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public static func s_offOsThemeChangeByJs(_ id: Foundation.NSNumber)
  @objc public static func s_setAppThemeByJs(_ options: DCloudUTSExtAPI.SetAppThemeOptionsJSONObject)
  @objc public static func s_onAppThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public static func s_offAppThemeChangeByJs(_ id: Foundation.NSNumber)
  @objc public static func s_onHostThemeChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public static func s_offHostThemeChangeByJs(_ id: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetSystemInfo = (_ options: DCloudUTSExtAPI.GetSystemInfoOptions) -> Swift.Void
public typealias GetSystemInfoSync = () -> DCloudUTSExtAPI.GetSystemInfoResult
public typealias GetWindowInfo = () -> DCloudUTSExtAPI.GetWindowInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoSafeArea) @objcMembers public class SafeArea : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var left: Foundation.NSNumber!
  @objc public var right: Foundation.NSNumber!
  @objc public var top: Foundation.NSNumber!
  @objc public var bottom: Foundation.NSNumber!
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoSafeAreaInsets) @objcMembers public class SafeAreaInsets : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var left: Foundation.NSNumber!
  @objc public var right: Foundation.NSNumber!
  @objc public var top: Foundation.NSNumber!
  @objc public var bottom: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoCutoutRect) @objcMembers public class CutoutRect : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var left: Foundation.NSNumber!
  @objc public var right: Foundation.NSNumber!
  @objc public var top: Foundation.NSNumber!
  @objc public var bottom: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoGetSystemInfoResult) @objcMembers public class GetSystemInfoResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var SDKVersion: Swift.String!
  @objc public var appId: Swift.String!
  @objc public var appLanguage: Swift.String!
  @objc public var appName: Swift.String!
  @objc public var appVersion: Swift.String!
  @objc public var appVersionCode: Swift.String!
  @objc public var appWgtVersion: Swift.String?
  @objc public var brand: Swift.String!
  @objc public var browserName: Swift.String!
  @objc public var browserVersion: Swift.String!
  @objc public var deviceId: Swift.String!
  @objc public var deviceBrand: Swift.String!
  @objc public var deviceModel: Swift.String!
  @objc public var deviceType: Swift.String!
  @objc public var devicePixelRatio: Foundation.NSNumber!
  @objc public var deviceOrientation: Swift.String!
  @objc public var language: Swift.String!
  @objc public var model: Swift.String?
  @objc public var osName: Swift.String!
  @objc public var osVersion: Swift.String!
  @objc public var osLanguage: Swift.String!
  @objc public var osTheme: Swift.String?
  @objc public var pixelRatio: Foundation.NSNumber!
  @objc public var platform: Swift.String!
  @objc public var screenWidth: Foundation.NSNumber!
  @objc public var screenHeight: Foundation.NSNumber!
  @objc public var statusBarHeight: Foundation.NSNumber!
  @objc public var system: Swift.String!
  @objc public var safeArea: DCloudUTSExtAPI.SafeArea!
  @objc public var safeAreaInsets: DCloudUTSExtAPI.SafeAreaInsets!
  @objc public var ua: Swift.String!
  @objc public var uniCompileVersion: Swift.String!
  @objc public var uniCompilerVersion: Swift.String!
  @objc public var uniPlatform: Swift.String!
  @objc public var uniRuntimeVersion: Swift.String!
  @objc public var uniCompileVersionCode: Foundation.NSNumber!
  @objc public var uniCompilerVersionCode: Foundation.NSNumber!
  @objc public var uniRuntimeVersionCode: Foundation.NSNumber!
  @objc public var version: Swift.String!
  @objc public var romName: Swift.String!
  @objc public var romVersion: Swift.String!
  @objc public var windowWidth: Foundation.NSNumber!
  @objc public var windowHeight: Foundation.NSNumber!
  @objc public var windowTop: Foundation.NSNumber!
  @objc public var windowBottom: Foundation.NSNumber!
  @objc public var osAndroidAPILevel: Foundation.NSNumber?
  @objc public var osHarmonySDKAPIVersion: Foundation.NSNumber?
  @objc public var osHarmonyDisplayVersion: Swift.String?
  @objc public var appTheme: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetSystemInfoSuccessCallback = (_ result: DCloudUTSExtAPI.GetSystemInfoResult) -> Swift.Void
public typealias GetSystemInfoFail = DCloudUTSFoundation.UniError
public typealias GetSystemInfoFailCallback = (_ result: DCloudUTSExtAPI.GetSystemInfoFail) -> Swift.Void
public typealias GetSystemInfoComplete = Any
public typealias GetSystemInfoCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoGetSystemInfoOptions) @objcMembers public class GetSystemInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetSystemInfoSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetSystemInfoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetSystemInfoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoGetWindowInfoResult) @objcMembers public class GetWindowInfoResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var pixelRatio: Foundation.NSNumber!
  @objc public var screenWidth: Foundation.NSNumber!
  @objc public var screenHeight: Foundation.NSNumber!
  @objc public var windowWidth: Foundation.NSNumber!
  @objc public var windowHeight: Foundation.NSNumber!
  @objc public var statusBarHeight: Foundation.NSNumber!
  @objc public var windowTop: Foundation.NSNumber!
  @objc public var windowBottom: Foundation.NSNumber!
  @objc public var safeArea: DCloudUTSExtAPI.SafeArea!
  @objc public var safeAreaInsets: DCloudUTSExtAPI.SafeAreaInsets!
  @objc public var screenTop: Foundation.NSNumber!
  @objc public var cutoutArea: Swift.Array<DCloudUTSExtAPI.CutoutRect>?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var getSystemInfo: (_ options: DCloudUTSExtAPI.GetSystemInfoOptions) -> Swift.Void
public var getSystemInfoSync: () -> DCloudUTSExtAPI.GetSystemInfoResult
public var systemInfoConvertVersionCode: (_ version: Swift.String) -> Foundation.NSNumber
public func getWindowInfoResult() -> DCloudUTSExtAPI.GetWindowInfoResult
public var getWindowInfo: () -> DCloudUTSExtAPI.GetWindowInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoGetSystemInfoOptionsJSONObject) @objcMembers public class GetSystemInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getSystemInfoByJs(_ options: DCloudUTSExtAPI.GetSystemInfoOptionsJSONObject)
public func getSystemInfoSyncByJs() -> DCloudUTSExtAPI.GetSystemInfoResult
public func getWindowInfoByJs() -> DCloudUTSExtAPI.GetWindowInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemInfoIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetSystemInfoIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getSystemInfoByJs(_ options: DCloudUTSExtAPI.GetSystemInfoOptionsJSONObject)
  @objc public static func s_getSystemInfoSyncByJs() -> DCloudUTSExtAPI.GetSystemInfoResult
  @objc public static func s_getWindowInfoByJs() -> DCloudUTSExtAPI.GetWindowInfoResult
  @objc override dynamic public init()
  @objc deinit
}
public typealias OpenDialogPageSuccess = DCloudUTSFoundation.AsyncApiSuccessResult
public typealias OpenDialogPageSuccessCallback = (any DCloudUTSFoundation.AsyncApiSuccessResult) -> Swift.Void
public protocol OpenDialogPageFail : DCloudUTSFoundation.IUniError {
}
public typealias OpenDialogPageFailCallback = (any DCloudUTSExtAPI.OpenDialogPageFail) -> Swift.Void
public typealias OpenDialogPageComplete = DCloudUTSFoundation.AsyncApiResult
public typealias OpenDialogPageCompleteCallback = (any DCloudUTSFoundation.AsyncApiResult) -> Swift.Void
public typealias CloseDialogPageSuccess = DCloudUTSFoundation.AsyncApiSuccessResult
public typealias CloseDialogPageSuccessCallback = (any DCloudUTSFoundation.AsyncApiSuccessResult) -> Swift.Void
public protocol CloseDialogPageFail : DCloudUTSFoundation.IUniError {
}
public typealias CloseDialogPageFailCallback = (any DCloudUTSExtAPI.CloseDialogPageFail) -> Swift.Void
public typealias CloseDialogPageComplete = DCloudUTSFoundation.AsyncApiResult
public typealias CloseDialogPageCompleteCallback = (any DCloudUTSFoundation.AsyncApiResult) -> Swift.Void
@_hasMissingDesignatedInitializers public class OpenDialogPageSuccessImpl : DCloudUTSExtAPI.OpenDialogPageSuccess {
  public var errMsg: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EventChannel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OpenDialogPageFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.OpenDialogPageFail {
  @objc deinit
}
open class OpenDialogPageOptions {
  public init()
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public var url: Swift.String
  public var animationType: Swift.String?
  public var animationDuration: Foundation.NSNumber?
  public var disableEscBack: Foundation.NSNumber?
  public var triggerParentHide: Foundation.NSNumber?
  public var parentPage: Any?
  public var success: DCloudUTSExtAPI.OpenDialogPageSuccessCallback?
  public var fail: DCloudUTSExtAPI.OpenDialogPageFailCallback?
  public var complete: DCloudUTSExtAPI.OpenDialogPageCompleteCallback?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CloseDialogPageSuccessImpl : DCloudUTSExtAPI.CloseDialogPageSuccess {
  public var errMsg: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CloseDialogPageFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.CloseDialogPageFail {
  @objc deinit
}
open class CloseDialogPageOptions {
  public init()
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public var dialogPage: (any DCloudUniappRuntime.UniDialogPage)?
  public var animationType: Swift.String?
  public var animationDuration: Foundation.NSNumber?
  public var success: DCloudUTSExtAPI.CloseDialogPageSuccessCallback?
  public var fail: DCloudUTSExtAPI.CloseDialogPageFailCallback?
  public var complete: DCloudUTSExtAPI.CloseDialogPageCompleteCallback?
  @objc deinit
}
public func openDialogPage(_ option: DCloudUTSExtAPI.OpenDialogPageOptions) -> (any DCloudUniappRuntime.UniDialogPage)?
public func closeDialogPage(_ option: DCloudUTSExtAPI.CloseDialogPageOptions)
public var __$$on: (_ eventName: Swift.String, _ callback: @escaping (_ arg: Any?...) -> Swift.Void) -> Foundation.NSNumber
public func __$$off(_ eventName: Swift.String, _ callbackId: Foundation.NSNumber? = nil)
public var __$$once: (_ eventName: Swift.String, _ callback: @escaping (_ arg: Any?...) -> Swift.Void) -> Foundation.NSNumber
public var __$$emit: (_ eventName: Swift.String, _ spreadArg: Any?...) -> Swift.Void
public typealias Base64ToArrayBuffer = (_ base64: Swift.String) -> DCloudUTSFoundation.ArrayBuffer
public var base64ToArrayBuffer: (_ base64: Swift.String) -> DCloudUTSFoundation.ArrayBuffer
public func base64ToArrayBufferByJs(_ base64: Swift.String) -> DCloudUTSFoundation.ArrayBuffer
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniBase64ToArrayBufferIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniBase64ToArrayBufferIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_base64ToArrayBufferByJs(_ base64: Swift.String) -> DCloudUTSFoundation.ArrayBuffer
  @objc override dynamic public init()
  @objc deinit
}
public typealias ArrayBufferToBase64 = (_ arrayBuffer: DCloudUTSFoundation.ArrayBuffer) -> Swift.String
public var arrayBufferToBase64: (_ arrayBuffer: DCloudUTSFoundation.ArrayBuffer) -> Swift.String
public func arrayBufferToBase64ByJs(_ arrayBuffer: DCloudUTSFoundation.ArrayBuffer) -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniArrayBufferToBase64IndexSwift) @objcMembers public class UTSSDKModulesDCloudUniArrayBufferToBase64IndexSwift : ObjectiveC.NSObject {
  @objc public static func s_arrayBufferToBase64ByJs(_ arrayBuffer: DCloudUTSFoundation.ArrayBuffer) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public typealias OnAppCrashCallback = () -> Swift.Void
public typealias OnAppCrash = (_ callback: @escaping DCloudUTSExtAPI.OnAppCrashCallback) -> Swift.Void
public typealias OffAppCrash = () -> Swift.Void
public typealias GetAppCrashInfoIOS = () -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
public typealias DeleteAppCrashInfo = (_ id: Swift.String?) -> Swift.Void
public typealias CreatAppCrash = () -> Swift.Void
public var __onAppCrash: (_ callback: @escaping DCloudUTSExtAPI.OnAppCrashCallback) -> Swift.Void
public var __offAppCrash: () -> Swift.Void
public var __getAppCrashInfo: () -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
public var __deleteAppCrashInfo: (_ id: Swift.String?) -> Swift.Void
public var __createAppCrash: () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCrashCrashManagerHookProxy) @objcMembers public class CrashManagerHookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCrashCrashManager) @objcMembers public class CrashManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public func __onAppCrashByJs(_ callback: DCloudUTSFoundation.UTSCallback)
public func __offAppCrashByJs()
public func __getAppCrashInfoByJs() -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
public func __deleteAppCrashInfoByJs(_ id: Swift.String?)
public func __createAppCrashByJs()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCrashCrashManagerHookProxyByJs) @objcMembers public class CrashManagerHookProxyByJs : DCloudUTSExtAPI.CrashManagerHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptionsByJs(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCrashIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniCrashIndexSwift : ObjectiveC.NSObject {
  @objc public static func s___onAppCrashByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public static func s___offAppCrashByJs()
  @objc public static func s___getAppCrashInfoByJs() -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
  @objc public static func s___deleteAppCrashInfoByJs(_ id: Swift.String?)
  @objc public static func s___createAppCrashByJs()
  @objc override dynamic public init()
  @objc deinit
}
public struct UniAppCrashInfo {
}
@_hasMissingDesignatedInitializers public class UniCrashManager {
  public static var uploadUrl: Swift.String
  public static var onCrash: (() -> Swift.Void)?
  public static var offAppCrash: Swift.Bool
  public static var isUniStatistics: Swift.Bool
  public class func initCrash()
  public class func getCrashReports() -> [DCloudUTSExtAPI.UniAppCrashInfo]?
  @discardableResult
  public class func deleteCrashReport(reportID: Swift.String) -> Swift.Bool
  public class func createAppCrash()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageSetStorageSuccess) @objcMembers public class SetStorageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SetStorageSuccessCallback = (_ res: DCloudUTSExtAPI.SetStorageSuccess) -> Swift.Void
public typealias SetStorageFailCallback = (_ res: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias SetStorageCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageSetStorageOptions) @objcMembers public class SetStorageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var key: Swift.String!
  @objc public var data: Any!
  @objc public var success: DCloudUTSExtAPI.SetStorageSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.SetStorageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.SetStorageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SetStorage = (_ options: DCloudUTSExtAPI.SetStorageOptions) -> Swift.Void
public typealias SetStorageSync = (_ key: Swift.String, _ data: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageSuccess) @objcMembers public class GetStorageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetStorageSuccessCallback = (_ res: DCloudUTSExtAPI.GetStorageSuccess) -> Swift.Void
public typealias GetStorageFailCallback = (_ res: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias GetStorageCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageOptions) @objcMembers public class GetStorageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var key: Swift.String!
  @objc public var success: DCloudUTSExtAPI.GetStorageSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetStorageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetStorageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetStorage = (_ options: DCloudUTSExtAPI.GetStorageOptions) -> Swift.Void
public typealias GetStorageSync = (_ key: Swift.String) -> Any?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageInfoSuccess) @objcMembers public class GetStorageInfoSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var keys: Swift.Array<Swift.String>!
  @objc public var currentSize: Foundation.NSNumber!
  @objc public var limitSize: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetStorageInfoSuccessCallback = (_ res: DCloudUTSExtAPI.GetStorageInfoSuccess) -> Swift.Void
public typealias GetStorageInfoFailCallback = (_ res: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias GetStorageInfoCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageInfoOptions) @objcMembers public class GetStorageInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetStorageInfoSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetStorageInfoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetStorageInfoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetStorageInfo = (_ options: DCloudUTSExtAPI.GetStorageInfoOptions) -> Swift.Void
public typealias GetStorageInfoSync = () -> DCloudUTSExtAPI.GetStorageInfoSuccess
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageRemoveStorageSuccess) @objcMembers public class RemoveStorageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RemoveStorageSuccessCallback = (_ res: DCloudUTSExtAPI.RemoveStorageSuccess) -> Swift.Void
public typealias RemoveStorageFailCallback = (_ res: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias RemoveStorageCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageRemoveStorageOptions) @objcMembers public class RemoveStorageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var key: Swift.String!
  @objc public var success: DCloudUTSExtAPI.RemoveStorageSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.RemoveStorageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.RemoveStorageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RemoveStorage = (_ options: DCloudUTSExtAPI.RemoveStorageOptions) -> Swift.Void
public typealias RemoveStorageSync = (_ key: Swift.String) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageClearStorageSuccess) @objcMembers public class ClearStorageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ClearStorageSuccessCallback = (_ res: DCloudUTSExtAPI.ClearStorageSuccess) -> Swift.Void
public typealias ClearStorageFailCallback = (_ res: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias ClearStorageCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageClearStorageOptions) @objcMembers public class ClearStorageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.ClearStorageSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.ClearStorageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ClearStorageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ClearStorage = (_ option: DCloudUTSExtAPI.ClearStorageOptions?) -> Swift.Void
public typealias ClearStorageSync = () -> Swift.Void
public var STORAGE_DATA_TYPE: Swift.String
public func filterNativeType(_ src: Swift.String) -> Swift.String
public func parseValue(_ value: Any) -> Any?
public func praseGetStorage(_ type: Swift.String, _ value: Swift.String) -> Any?
public func uni_setStorageSync(_ key: Swift.String, _ data: Any, _ saveItemHandler: @escaping (_ key: Swift.String, _ data: Swift.String) -> Swift.Void, _ removeItemHandler: @escaping (_ key: Swift.String) -> Swift.Void)
public func uni_setStorageAsync(_ options: DCloudUTSExtAPI.SetStorageOptions, _ saveItemAsyncHandler: @escaping (_ key: Swift.String, _ data: Swift.String) -> Swift.Void, _ removeItemAsyncHandler: @escaping (_ key: Swift.String) -> Swift.Void)
public func uni_getStorageSync(_ key: Swift.String, _ getItemHandler: @escaping ((_ key: Swift.String) -> Swift.String?)) -> Any?
public func uni_getStorageAsync(_ options: DCloudUTSExtAPI.GetStorageOptions, _ getItemAsyncHandler: @escaping ((_ key: Swift.String) -> Swift.String?), _ includesKey: @escaping (_ key: Swift.String) -> Swift.Bool)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageStorageTool) @objcMembers public class StorageTool : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public var setStorage: (_ options: DCloudUTSExtAPI.SetStorageOptions) -> Swift.Void
public var setStorageSync: (_ key: Swift.String, _ data: Any) -> Swift.Void
public func getItemAsync(_ itemKey: Swift.String) -> Swift.String?
public func includeKey(_ key: Swift.String) -> Swift.Bool
public var getStorage: (_ options: DCloudUTSExtAPI.GetStorageOptions) -> Swift.Void
public var getStorageSync: DCloudUTSExtAPI.GetStorageSync
public var getStorageInfo: (_ options: DCloudUTSExtAPI.GetStorageInfoOptions) -> Swift.Void
public var getStorageInfoSync: () -> DCloudUTSExtAPI.GetStorageInfoSuccess
public var removeStorage: (_ options: DCloudUTSExtAPI.RemoveStorageOptions) -> Swift.Void
public var removeStorageSync: (_ key: Swift.String) -> Swift.Void
public var clearStorage: (_ option: DCloudUTSExtAPI.ClearStorageOptions?) -> Swift.Void
public var clearStorageSync: () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageSetStorageOptionsJSONObject) @objcMembers public class SetStorageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var key: Swift.String!
  @objc public var data: Any!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageOptionsJSONObject) @objcMembers public class GetStorageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var key: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageGetStorageInfoOptionsJSONObject) @objcMembers public class GetStorageInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageRemoveStorageOptionsJSONObject) @objcMembers public class RemoveStorageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var key: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageClearStorageOptionsJSONObject) @objcMembers public class ClearStorageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func setStorageByJs(_ options: DCloudUTSExtAPI.SetStorageOptionsJSONObject)
public func setStorageSyncByJs(_ key: Swift.String, _ data: Any)
public func getStorageByJs(_ options: DCloudUTSExtAPI.GetStorageOptionsJSONObject)
public func getStorageSyncByJs(_ key: Swift.String) -> Any?
public func getStorageInfoByJs(_ options: DCloudUTSExtAPI.GetStorageInfoOptionsJSONObject)
public func getStorageInfoSyncByJs() -> DCloudUTSExtAPI.GetStorageInfoSuccess
public func removeStorageByJs(_ options: DCloudUTSExtAPI.RemoveStorageOptionsJSONObject)
public func removeStorageSyncByJs(_ key: Swift.String)
public func clearStorageByJs(_ option: DCloudUTSExtAPI.ClearStorageOptionsJSONObject?)
public func clearStorageSyncByJs()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniStorageIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniStorageIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_setStorageByJs(_ options: DCloudUTSExtAPI.SetStorageOptionsJSONObject)
  @objc public static func s_setStorageSyncByJs(_ key: Swift.String, _ data: Any)
  @objc public static func s_getStorageByJs(_ options: DCloudUTSExtAPI.GetStorageOptionsJSONObject)
  @objc public static func s_getStorageSyncByJs(_ key: Swift.String) -> Any?
  @objc public static func s_getStorageInfoByJs(_ options: DCloudUTSExtAPI.GetStorageInfoOptionsJSONObject)
  @objc public static func s_getStorageInfoSyncByJs() -> DCloudUTSExtAPI.GetStorageInfoSuccess
  @objc public static func s_removeStorageByJs(_ options: DCloudUTSExtAPI.RemoveStorageOptionsJSONObject)
  @objc public static func s_removeStorageSyncByJs(_ key: Swift.String)
  @objc public static func s_clearStorageByJs(_ option: DCloudUTSExtAPI.ClearStorageOptionsJSONObject?)
  @objc public static func s_clearStorageSyncByJs()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniExitExitSuccess) @objcMembers public class ExitSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ExitErrorCode = Foundation.NSNumber
public protocol IExitError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ExitErrorCode { get set }
}
public typealias ExitFail = DCloudUTSExtAPI.IExitError
public typealias ExitSuccessCallback = (_ res: DCloudUTSExtAPI.ExitSuccess) -> Swift.Void
public typealias ExitFailCallback = (_ res: any DCloudUTSExtAPI.IExitError) -> Swift.Void
public typealias ExitCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniExitExitOptions) @objcMembers public class ExitOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.ExitSuccessCallback?
  public var fail: DCloudUTSExtAPI.ExitFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ExitCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias Exit = (_ options: DCloudUTSExtAPI.ExitOptions?) -> Swift.Void
public var ExitUniErrorSubject: Swift.String
public var ExitUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniExitExitFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniExitExitFailImpl) public class ExitFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IExitError {
  @objc public init(_ errCode: DCloudUTSExtAPI.ExitErrorCode)
  @objc deinit
}
public var exit: (_ options: DCloudUTSExtAPI.ExitOptions?) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniExitExitOptionsJSONObject) @objcMembers public class ExitOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func exitByJs(_ options: DCloudUTSExtAPI.ExitOptionsJSONObject?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniExitIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniExitIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_exitByJs(_ options: DCloudUTSExtAPI.ExitOptionsJSONObject?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetAppAuthorizeSetting = () -> DCloudUTSExtAPI.GetAppAuthorizeSettingResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppAuthorizeSettingGetAppAuthorizeSettingResult) @objcMembers public class GetAppAuthorizeSettingResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var albumAuthorized: Swift.String!
  @objc public var bluetoothAuthorized: Swift.String!
  @objc public var cameraAuthorized: Swift.String!
  @objc public var locationAuthorized: Swift.String!
  @objc public var locationAccuracy: Swift.String?
  @objc public var locationReducedAccuracy: Swift.Bool
  @objc public var microphoneAuthorized: Swift.String!
  @objc public var notificationAuthorized: Swift.String!
  @objc public var notificationAlertAuthorized: Swift.String?
  @objc public var notificationBadgeAuthorized: Swift.String?
  @objc public var notificationSoundAuthorized: Swift.String?
  @objc public var phoneCalendarAuthorized: Swift.String?
  @objc public var readPhoneCalendarAuthorized: Swift.String?
  @objc public var writePhoneCalendarAuthorized: Swift.String?
  @objc public var pasteboardAuthorized: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var getAppAuthorizeSetting: () -> DCloudUTSExtAPI.GetAppAuthorizeSettingResult
public func getAppAuthorizeSettingByJs() -> DCloudUTSExtAPI.GetAppAuthorizeSettingResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppAuthorizeSettingIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetAppAuthorizeSettingIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getAppAuthorizeSettingByJs() -> DCloudUTSExtAPI.GetAppAuthorizeSettingResult
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppBaseInfoAppBaseInfoDeviceUtil) @objcMembers public class AppBaseInfoDeviceUtil : ObjectiveC.NSObject {
  @objc public static func getAppID() -> Swift.String
  @objc public static func getAppName() -> Swift.String
  @objc public static func getHostName() -> Swift.String
  @objc public static func getHostTheme() -> Swift.String
  @objc public static func getHostLanguage() -> Swift.String
  @objc public static func getHostVersion() -> Swift.String
  @objc public static func getHostPackageName() -> Swift.String
  @objc public static func getAppVersion() -> Swift.String
  @objc public static func getAppVersionCode() -> Swift.String
  @objc public static func getAppWgtVersion() -> Swift.String
  @objc public static func getOsLanguage() -> Swift.String
  @objc public static func getOsLanguageNormal() -> Swift.String
  @objc public static func getAppInnerVersion() -> Swift.String
  @objc public static func getBundleId() -> Swift.String
  @objc public static func getSignature() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppBaseInfoGetAppBaseInfoOptions) @objcMembers public class GetAppBaseInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filter: Swift.Array<Swift.String>!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppBaseInfoGetAppBaseInfoResult) @objcMembers public class GetAppBaseInfoResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var appId: Swift.String?
  @objc public var appName: Swift.String?
  @objc public var appVersion: Swift.String?
  @objc public var appVersionCode: Swift.String?
  @objc public var appLanguage: Swift.String?
  @objc public var language: Swift.String?
  @objc public var version: Swift.String?
  @objc public var appWgtVersion: Swift.String?
  @objc public var hostLanguage: Swift.String?
  @objc public var hostVersion: Swift.String?
  @objc public var hostName: Swift.String?
  @objc public var hostPackageName: Swift.String?
  @objc public var hostSDKVersion: Swift.String?
  @objc public var hostTheme: Swift.String?
  @objc public var isUniAppX: Swift.Bool
  @objc public var uniCompileVersion: Swift.String?
  @objc public var uniCompilerVersion: Swift.String?
  @objc public var uniPlatform: Swift.String?
  @objc public var uniRuntimeVersion: Swift.String?
  @objc public var uniCompileVersionCode: Foundation.NSNumber?
  @objc public var uniCompilerVersionCode: Foundation.NSNumber?
  @objc public var uniRuntimeVersionCode: Foundation.NSNumber?
  @objc public var packageName: Swift.String?
  @objc public var bundleName: Swift.String?
  @objc public var bundleId: Swift.String?
  @objc public var signature: Swift.String?
  @objc public var appTheme: Swift.String?
  @objc public var channel: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetAppBaseInfo = (_ options: DCloudUTSExtAPI.GetAppBaseInfoOptions?) -> DCloudUTSExtAPI.GetAppBaseInfoResult
public var getAppBaseInfo: (_ config: DCloudUTSExtAPI.GetAppBaseInfoOptions?) -> DCloudUTSExtAPI.GetAppBaseInfoResult
public func getBaseInfo(_ filterArray: Swift.Array<Swift.String>) -> DCloudUTSExtAPI.GetAppBaseInfoResult
public var AppBaseInfoConvertVersionCode: (_ version: Swift.String) -> Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppBaseInfoGetAppBaseInfoOptionsJSONObject) @objcMembers public class GetAppBaseInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filter: Swift.Array<Swift.String>!
  @objc override dynamic public init()
  @objc deinit
}
public func getAppBaseInfoByJs(_ options: DCloudUTSExtAPI.GetAppBaseInfoOptionsJSONObject?) -> DCloudUTSExtAPI.GetAppBaseInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetAppBaseInfoIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetAppBaseInfoIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getAppBaseInfoByJs(_ options: DCloudUTSExtAPI.GetAppBaseInfoOptionsJSONObject?) -> DCloudUTSExtAPI.GetAppBaseInfoResult
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetDeviceInfoDeviceUtil) @objcMembers public class DeviceUtil : ObjectiveC.NSObject {
  @objc public static func isPad() -> Swift.Bool
  @objc public static func getOSVersion() -> Swift.String
  @objc public static func getLan() -> Swift.String
  @objc public static func getOrientation() -> Swift.String
  @objc public static func hasRootPrivilege() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetDeviceInfoGetDeviceInfoOptions) @objcMembers public class GetDeviceInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filter: Swift.Array<Swift.String>!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetDeviceInfoGetDeviceInfoResult) @objcMembers public class GetDeviceInfoResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var brand: Swift.String?
  @objc public var deviceBrand: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var model: Swift.String?
  @objc public var deviceModel: Swift.String?
  @objc public var deviceType: Swift.String?
  @objc public var deviceOrientation: Swift.String?
  @objc public var devicePixelRatio: Foundation.NSNumber?
  @objc public var system: Swift.String?
  @objc public var platform: Swift.String?
  @objc public var isRoot: Swift.Bool
  @objc public var isSimulator: Swift.Bool
  @objc public var isUSBDebugging: Swift.Bool
  @objc public var osName: Swift.String?
  @objc public var osVersion: Swift.String?
  @objc public var osLanguage: Swift.String?
  @objc public var osTheme: Swift.String?
  @objc public var osAndroidAPILevel: Foundation.NSNumber?
  @objc public var osHarmonySDKAPIVersion: Foundation.NSNumber?
  @objc public var osHarmonyDisplayVersion: Swift.String?
  @objc public var romName: Swift.String?
  @objc public var romVersion: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetDeviceInfo = (_ options: DCloudUTSExtAPI.GetDeviceInfoOptions?) -> DCloudUTSExtAPI.GetDeviceInfoResult
public func isSimulator() -> Swift.Bool
public var getDeviceInfo: (_ config: DCloudUTSExtAPI.GetDeviceInfoOptions?) -> DCloudUTSExtAPI.GetDeviceInfoResult
public func getBaseInfo(_ filterArray: Swift.Array<Swift.String>) -> DCloudUTSExtAPI.GetDeviceInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetDeviceInfoGetDeviceInfoOptionsJSONObject) @objcMembers public class GetDeviceInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filter: Swift.Array<Swift.String>!
  @objc override dynamic public init()
  @objc deinit
}
public func isSimulatorByJs() -> Swift.Bool
public func getDeviceInfoByJs(_ options: DCloudUTSExtAPI.GetDeviceInfoOptionsJSONObject?) -> DCloudUTSExtAPI.GetDeviceInfoResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetDeviceInfoIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetDeviceInfoIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_isSimulatorByJs() -> Swift.Bool
  @objc public static func s_getDeviceInfoByJs(_ options: DCloudUTSExtAPI.GetDeviceInfoOptionsJSONObject?) -> DCloudUTSExtAPI.GetDeviceInfoResult
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DCUniGetElementById {
  public static func getElementById(_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  @objc deinit
}
public typealias GetElementById = (_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
public var getElementById: (_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
public func getElementByIdByJs(_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetElementByIdIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetElementByIdIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getElementByIdByJs(_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemSettingGetSystemSettingResult) @objcMembers public class GetSystemSettingResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var bluetoothEnabled: Swift.Bool
  @objc public var bluetoothError: Swift.String?
  @objc public var locationEnabled: Swift.Bool
  @objc public var wifiEnabled: Swift.Bool
  @objc public var wifiError: Swift.String?
  @objc public var deviceOrientation: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetSystemSetting = () -> DCloudUTSExtAPI.GetSystemSettingResult
public var getSystemSetting: () -> DCloudUTSExtAPI.GetSystemSettingResult
public func getSystemSettingByJs() -> DCloudUTSExtAPI.GetSystemSettingResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetSystemSettingIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetSystemSettingIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getSystemSettingByJs() -> DCloudUTSExtAPI.GetSystemSettingResult
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalUniShowModalResult) @objcMembers public class UniShowModalResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var content: Swift.String?
  @objc public var cancel: Swift.Bool
  @objc public var confirm: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UniShowModalErrorCode = Foundation.NSNumber
public protocol UniShowModalFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.UniShowModalErrorCode { get set }
}
@objc(UTSSDKModulesDCloudUniModalUniShowModalFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniModalUniShowModalFailImpl) public class UniShowModalFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.UniShowModalFail {
  @objc override public var errCode: DCloudUTSExtAPI.UniShowModalErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errMsg: Swift.String = "showModal:fail cancel", _ errCode: DCloudUTSExtAPI.UniShowModalErrorCode = 4)
  @objc deinit
}
public typealias UniShowModalFailCallback = (_ result: any DCloudUTSExtAPI.UniShowModalFail) -> Swift.Void
public typealias UniShowModalSuccessCallback = (_ result: DCloudUTSExtAPI.UniShowModalResult) -> Swift.Void
public typealias UniShowModalCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalShowModalOptions) @objcMembers public class ShowModalOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var title: Swift.String?
  @objc public var content: Swift.String?
  @objc public var showCancel: Swift.Bool
  @objc public var cancelText: Swift.String?
  @objc public var cancelColor: Swift.String?
  @objc public var confirmText: Swift.String?
  @objc public var confirmColor: Swift.String?
  @objc public var editable: Swift.Bool
  @objc public var placeholderText: Swift.String?
  @objc public var success: DCloudUTSExtAPI.UniShowModalSuccessCallback?
  public var fail: DCloudUTSExtAPI.UniShowModalFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UniShowModalCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowModal = (_ options: DCloudUTSExtAPI.ShowModalOptions) -> (any DCloudUniappRuntime.UniPage)?
public typealias ModalPage = DCloudUniappRuntime.UniPage
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalUniHideModalResult) @objcMembers public class UniHideModalResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UniHideModalErrorCode = Foundation.NSNumber
public protocol UniHideModalFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.UniHideModalErrorCode { get set }
}
@objc(UTSSDKModulesDCloudUniModalUniHideModalFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniModalUniHideModalFailImpl) public class UniHideModalFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.UniHideModalFail {
  @objc override public var errCode: DCloudUTSExtAPI.UniHideModalErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errMsg: Swift.String = "hideModal:fail cancel", _ errCode: DCloudUTSExtAPI.UniHideModalErrorCode = 4)
  @objc deinit
}
public typealias UniHideModalFailCallback = (_ result: any DCloudUTSExtAPI.UniHideModalFail) -> Swift.Void
public typealias UniHideModalSuccessCallback = (_ result: DCloudUTSExtAPI.UniHideModalResult) -> Swift.Void
public typealias UniHideModalCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalHideModalOptions) @objcMembers public class HideModalOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var modalPage: (any DCloudUniappRuntime.UniPage)?
  @objc public var success: DCloudUTSExtAPI.UniHideModalSuccessCallback?
  public var fail: DCloudUTSExtAPI.UniHideModalFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UniHideModalCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias HideModal = (_ options: DCloudUTSExtAPI.HideModalOptions?) -> Swift.Void
public var showModal: (_ options: DCloudUTSExtAPI.ShowModalOptions) -> (any DCloudUniappRuntime.UniPage)?
public var hideModal: (_ options: DCloudUTSExtAPI.HideModalOptions?) -> Swift.Void
public func isSystemModalDialogPage(_ page: any DCloudUniappRuntime.UniPage) -> Swift.Bool
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalShowModalOptionsJSONObject) @objcMembers public class ShowModalOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var content: Swift.String?
  @objc public var showCancel: Swift.Bool
  @objc public var cancelText: Swift.String?
  @objc public var cancelColor: Swift.String?
  @objc public var confirmText: Swift.String?
  @objc public var confirmColor: Swift.String?
  @objc public var editable: Swift.Bool
  @objc public var placeholderText: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalHideModalOptionsJSONObject) @objcMembers public class HideModalOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var modalPage: (any DCloudUniappRuntime.UniPage)?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func showModalByJs(_ options: DCloudUTSExtAPI.ShowModalOptionsJSONObject) -> (any DCloudUniappRuntime.UniPage)?
public func hideModalByJs(_ options: DCloudUTSExtAPI.HideModalOptionsJSONObject?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniModalIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniModalIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_showModalByJs(_ options: DCloudUTSExtAPI.ShowModalOptionsJSONObject) -> (any DCloudUniappRuntime.UniPage)?
  @objc public static func s_hideModalByJs(_ options: DCloudUTSExtAPI.HideModalOptionsJSONObject?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias OpenAppAuthorizeSetting = (_ options: DCloudUTSExtAPI.OpenAppAuthorizeSettingOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingOpenAppAuthorizeSettingSuccess) @objcMembers public class OpenAppAuthorizeSettingSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenAppAuthorizeSettingSuccessCallback = (_ result: DCloudUTSExtAPI.OpenAppAuthorizeSettingSuccess) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingOpenAppAuthorizeSettingFail) @objcMembers public class OpenAppAuthorizeSettingFail : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenAppAuthorizeSettingFailCallback = (_ result: DCloudUTSExtAPI.OpenAppAuthorizeSettingFail) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingOpenAppAuthorizeSettingComplete) @objcMembers public class OpenAppAuthorizeSettingComplete : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenAppAuthorizeSettingCompleteCallback = (_ result: DCloudUTSExtAPI.OpenAppAuthorizeSettingComplete) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingOpenAppAuthorizeSettingOptions) @objcMembers public class OpenAppAuthorizeSettingOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.OpenAppAuthorizeSettingSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.OpenAppAuthorizeSettingFailCallback?
  @objc public var complete: DCloudUTSExtAPI.OpenAppAuthorizeSettingCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var openAppAuthorizeSetting: (_ settingOptions: DCloudUTSExtAPI.OpenAppAuthorizeSettingOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingOpenAppAuthorizeSettingOptionsJSONObject) @objcMembers public class OpenAppAuthorizeSettingOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func openAppAuthorizeSettingByJs(_ options: DCloudUTSExtAPI.OpenAppAuthorizeSettingOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenAppAuthorizeSettingIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniOpenAppAuthorizeSettingIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_openAppAuthorizeSettingByJs(_ options: DCloudUTSExtAPI.OpenAppAuthorizeSettingOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias OnPrivacyAuthorizationChange = (_ callback: @escaping DCloudUTSExtAPI.OnPrivacyAuthorizationChangeCallback) -> Foundation.NSNumber
public typealias OffPrivacyAuthorizationChange = (_ id: Foundation.NSNumber) -> Swift.Void
public typealias OnPrivacyAuthorizationChangeCallback = (_ res: DCloudUTSExtAPI.PrivacyChangeResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPrivacyPrivacyChangeResult) @objcMembers public class PrivacyChangeResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var needAuthorization: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetPrivacySetting = (_ options: DCloudUTSExtAPI.GetPrivacySettingOptions) -> Swift.Void
public typealias GetPrivacySettingSuccessCallback = (_ result: DCloudUTSExtAPI.GetPrivacySettingSuccessResult) -> Swift.Void
public typealias GetPrivacySettingFailCallback = (_ result: Any) -> Swift.Void
public typealias GetPrivacySettingCompleteCallback = (_ result: Any) -> Swift.Void
public typealias ResetPrivacyAuthorization = () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPrivacyGetPrivacySettingSuccessResult) @objcMembers public class GetPrivacySettingSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var needAuthorization: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPrivacyGetPrivacySettingOptions) @objcMembers public class GetPrivacySettingOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetPrivacySettingSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetPrivacySettingFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetPrivacySettingCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var getPrivacySetting: (_ options: DCloudUTSExtAPI.GetPrivacySettingOptions) -> Swift.Void
public var resetPrivacyAuthorization: () -> Swift.Void
public var onPrivacyAuthorizationChange: (_ callback: @escaping DCloudUTSExtAPI.OnPrivacyAuthorizationChangeCallback) -> Foundation.NSNumber
public var offPrivacyAuthorizationChange: (_ id: Foundation.NSNumber) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPrivacyGetPrivacySettingOptionsJSONObject) @objcMembers public class GetPrivacySettingOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getPrivacySettingByJs(_ options: DCloudUTSExtAPI.GetPrivacySettingOptionsJSONObject)
public func resetPrivacyAuthorizationByJs()
public func onPrivacyAuthorizationChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
public func offPrivacyAuthorizationChangeByJs(_ id: Foundation.NSNumber)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPrivacyIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniPrivacyIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getPrivacySettingByJs(_ options: DCloudUTSExtAPI.GetPrivacySettingOptionsJSONObject)
  @objc public static func s_resetPrivacyAuthorizationByJs()
  @objc public static func s_onPrivacyAuthorizationChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public static func s_offPrivacyAuthorizationChangeByJs(_ id: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
}
public typealias PromptErrorCode = Foundation.NSNumber
public protocol IPromptError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.PromptErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowToastSuccess) @objcMembers public class ShowToastSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowToastFail = DCloudUTSExtAPI.IPromptError
public typealias ShowToastSuccessCallback = (_ res: DCloudUTSExtAPI.ShowToastSuccess) -> Swift.Void
public typealias ShowToastFailCallback = (_ res: any DCloudUTSExtAPI.IPromptError) -> Swift.Void
public typealias ShowToastCompleteCallback = (_ res: Any) -> Swift.Void
public typealias Icon = Swift.String
public typealias ShowToastPosition = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowToastOptions) @objcMembers public class ShowToastOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var title: Swift.String!
  @objc public var icon: DCloudUTSExtAPI.Icon?
  @objc public var image: Swift.String?
  @objc public var mask: Swift.Bool
  @objc public var duration: Foundation.NSNumber?
  @objc public var position: DCloudUTSExtAPI.ShowToastPosition?
  @objc public var success: DCloudUTSExtAPI.ShowToastSuccessCallback?
  public var fail: DCloudUTSExtAPI.ShowToastFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ShowToastCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowToast = (_ options: DCloudUTSExtAPI.ShowToastOptions) -> Swift.Void
public typealias HideToast = () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowLoadingSuccess) @objcMembers public class ShowLoadingSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowLoadingFail = DCloudUTSExtAPI.IPromptError
public typealias ShowLoadingSuccessCallback = (_ res: DCloudUTSExtAPI.ShowLoadingSuccess) -> Swift.Void
public typealias ShowLoadingFailCallback = (_ res: any DCloudUTSExtAPI.IPromptError) -> Swift.Void
public typealias ShowLoadingCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowLoadingOptions) @objcMembers public class ShowLoadingOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var title: Swift.String!
  @objc public var mask: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.ShowLoadingSuccessCallback?
  public var fail: DCloudUTSExtAPI.ShowLoadingFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ShowLoadingCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShowLoading = (_ options: DCloudUTSExtAPI.ShowLoadingOptions) -> Swift.Void
public typealias HideLoading = () -> Swift.Void
@objc(UTSSDKModulesDCloudUniPromptPromptErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniPromptPromptErrorImpl) public class PromptErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IPromptError {
  @objc public init(_ errCode: DCloudUTSExtAPI.PromptErrorCode, _ errMsg: Swift.String)
  @objc deinit
}
public func toShowToast(_ options: DCloudUTSExtAPI.ShowToastOptions)
public func toHideToast()
public func toShowLoading(_ options: DCloudUTSExtAPI.ShowLoadingOptions)
public func toHideLoading()
public var showToast: (_ options: DCloudUTSExtAPI.ShowToastOptions) -> Swift.Void
public var hideToast: () -> Swift.Void
public var showLoading: (_ options: DCloudUTSExtAPI.ShowLoadingOptions) -> Swift.Void
public var hideLoading: () -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowToastOptionsJSONObject) @objcMembers public class ShowToastOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var title: Swift.String!
  @objc public var icon: DCloudUTSExtAPI.Icon?
  @objc public var image: Swift.String?
  @objc public var mask: Swift.Bool
  @objc public var duration: Foundation.NSNumber?
  @objc public var position: DCloudUTSExtAPI.ShowToastPosition?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptShowLoadingOptionsJSONObject) @objcMembers public class ShowLoadingOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var title: Swift.String!
  @objc public var mask: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func showToastByJs(_ options: DCloudUTSExtAPI.ShowToastOptionsJSONObject)
public func hideToastByJs()
public func showLoadingByJs(_ options: DCloudUTSExtAPI.ShowLoadingOptionsJSONObject)
public func hideLoadingByJs()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPromptIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniPromptIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_showToastByJs(_ options: DCloudUTSExtAPI.ShowToastOptionsJSONObject)
  @objc public static func s_hideToastByJs()
  @objc public static func s_showLoadingByJs(_ options: DCloudUTSExtAPI.ShowLoadingOptionsJSONObject)
  @objc public static func s_hideLoadingByJs()
  @objc override dynamic public init()
  @objc deinit
}
public let ActionSheetNotificationNameViewWillRotate: Swift.String
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class DCActionSheetController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(noticeTitle: Swift.String, supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func addAction(_ action: DCloudUTSExtAPI.DCAlertAction)
  @_Concurrency.MainActor @preconcurrency public func addAction(_ title: Swift.String, _ style: DCloudUTSExtAPI.DCAlertActionStyle, _ handler: @escaping (_ action: DCloudUTSExtAPI.DCAlertAction) -> Swift.Void) -> DCloudUTSExtAPI.DCAlertAction
  @_Concurrency.MainActor @preconcurrency public func show()
}
extension DCloudUTSExtAPI.DCActionSheetController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
}
extension Foundation.NSString {
  public func dc_boundingSize(_ font: UIKit.UIFont?, _ lineHeight: CoreFoundation.CGFloat, _ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
public typealias DCAlertView = DCloudUTSExtAPI.DCAlertViewController
extension DCloudUTSExtAPI.DCAlertViewController {
  @_Concurrency.MainActor @preconcurrency public func show()
  @_Concurrency.MainActor @preconcurrency public func dismiss()
  @_Concurrency.MainActor @preconcurrency public static func alertView(_ title: Swift.String, _ doneItem: DCloudUTSExtAPI.DCRIButtonItem, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle = .alert, _ placeholder: Swift.String = "") -> DCloudUTSExtAPI.DCAlertView
  @_Concurrency.MainActor @preconcurrency public static func alertView(_ title: Swift.String?, _ cancelItem: DCloudUTSExtAPI.DCRIButtonItem, _ doneItem: DCloudUTSExtAPI.DCRIButtonItem, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle = .alert, _ placeholder: Swift.String = "") -> DCloudUTSExtAPI.DCAlertView
  @_Concurrency.MainActor @preconcurrency public static func alertView(_ title: Swift.String?, _ subTitle: Swift.String?, _ doneItem: DCloudUTSExtAPI.DCRIButtonItem, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle = .alert, _ placeholder: Swift.String = "") -> DCloudUTSExtAPI.DCAlertView
  @_Concurrency.MainActor @preconcurrency public static func alertView(_ title: Swift.String?, _ subTitle: Swift.String?, _ cancelItem: DCloudUTSExtAPI.DCRIButtonItem, _ doneItem: DCloudUTSExtAPI.DCRIButtonItem, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle = .alert, _ placeholder: Swift.String = "") -> DCloudUTSExtAPI.DCAlertView
  @_Concurrency.MainActor @preconcurrency public static func alertView(_ title: Swift.String?, _ subTitle: Swift.String?, _ cancelItem: DCloudUTSExtAPI.DCRIButtonItem, _ cancelActionStyle: DCloudUTSExtAPI.DCAlertActionStyle, _ doneItem: DCloudUTSExtAPI.DCRIButtonItem, _ doneActionStyle: DCloudUTSExtAPI.DCAlertActionStyle, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle, _ placeholder: Swift.String = "") -> DCloudUTSExtAPI.DCAlertView
}
public enum DCAlertViewControllerStyle : Swift.Int {
  case alert
  case textViewAlert
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol DCAlertViewControllerDismissDelegate : UIKit.UITextViewDelegate {
  func canDismissWithAction(_ action: DCloudUTSExtAPI.DCAlertAction?, _ param: Any?) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class DCAlertViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var canOpenDarkMode: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var contentViewVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var mesageTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textViewText: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var textView: UIKit.UITextView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency weak public var dismissDelegate: (any DCloudUTSExtAPI.DCAlertViewControllerDismissDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle
  @_Concurrency.MainActor @preconcurrency public var tapGesture: UIKit.UITapGestureRecognizer?
  @_Concurrency.MainActor @preconcurrency public var contentView: (any UIKit.UIView & DCloudUTSExtAPI.DCAlertControllerContentViewProtocol)?
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String?, _ message: Swift.String?, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle, _ placeholder: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public init(_ customView: any UIKit.UIView & DCloudUTSExtAPI.DCAlertControllerContentViewProtocol, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func alertControllerWithTitle(_ title: Swift.String?, _ message: Swift.String?, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle, _ placeholder: Swift.String?) -> DCloudUTSExtAPI.DCAlertViewController
  @_Concurrency.MainActor @preconcurrency public func alertControllerWithCustomView(_ view: any UIKit.UIView & DCloudUTSExtAPI.DCAlertControllerContentViewProtocol, _ preferredStyle: DCloudUTSExtAPI.DCAlertViewControllerStyle) -> DCloudUTSExtAPI.DCAlertViewController
  @_Concurrency.MainActor @preconcurrency public func addActionWithTitle(_ title: Foundation.NSString, _ style: DCloudUTSExtAPI.DCAlertActionStyle, _ handler: @escaping (_ action: DCloudUTSExtAPI.DCAlertAction) -> Swift.Void) -> DCloudUTSExtAPI.DCAlertAction
  @_Concurrency.MainActor @preconcurrency public func addImage(_ image: UIKit.UIImage, _ position: DCloudUTSExtAPI.DCAlertImagePosition)
  @_Concurrency.MainActor @preconcurrency public func addCustomView(_ customView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func addAction(_ action: DCloudUTSExtAPI.DCAlertAction)
  @_Concurrency.MainActor @preconcurrency public func addTapGesture()
  @_Concurrency.MainActor @preconcurrency public func onTapAction(_ action: DCloudUTSExtAPI.DCAlertAction)
  @_Concurrency.MainActor @preconcurrency public func resetDoneBtnTitleColor(_ color: UIKit.UIColor)
}
extension DCloudUTSExtAPI.DCAlertViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
public enum DCAlertActionStyle : Swift.Int {
  case defaultStyle
  case cancelStyle
  case destructiveStyle
  case preferredStyle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DCAlertImagePosition : Swift.Int {
  case null
  case topCenter
  case leftTopCenter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class DCAlertAction : ObjectiveC.NSObject {
  public var title: Swift.String?
  public var titleColor: UIKit.UIColor? {
    get
    set
  }
  public var style: DCloudUTSExtAPI.DCAlertActionStyle
  weak public var button: UIKit.UIButton?
  public var handler: (_ action: DCloudUTSExtAPI.DCAlertAction) -> Swift.Void
  public var enabled: Swift.Bool {
    get
    set
  }
  public init(title: Swift.String, style: DCloudUTSExtAPI.DCAlertActionStyle, handler: @escaping (_ action: DCloudUTSExtAPI.DCAlertAction) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class DCAlertActionButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol DCAlertControllerContentViewProtocol : ObjectiveC.NSObject {
  var titleLabel: UIKit.UILabel { get set }
  var messageLabel: UIKit.UITextView { get set }
  var title: Swift.String? { get set }
  var message: Swift.String? { get set }
  var image: UIKit.UIImage? { get set }
  var customView: UIKit.UIView? { get set }
  var imagePositon: DCloudUTSExtAPI.DCAlertImagePosition? { get set }
  var buttons: [DCloudUTSExtAPI.DCAlertActionButton] { get }
  var actionClickedHandler: ((_ action: DCloudUTSExtAPI.DCAlertAction) -> Swift.Void)? { get set }
  func addAction(_ action: DCloudUTSExtAPI.DCAlertAction)
  func setHairLineColor(_ hairLineColor: UIKit.UIColor?)
}
@objc @_inheritsConvenienceInitializers public class DCRIButtonItem : ObjectiveC.NSObject {
  public static func item() -> DCloudUTSExtAPI.DCRIButtonItem
  public static func itemWithLabel(_ inLabel: Swift.String) -> DCloudUTSExtAPI.DCRIButtonItem
  public static func itemWithLabel(_ inLabel: Swift.String, _ labelColor: UIKit.UIColor? = nil, inAction action: @escaping (() -> Swift.Void)) -> DCloudUTSExtAPI.DCRIButtonItem
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func mc_loading(text: Swift.String = "正在加载中", duration: CoreFoundation.CGFloat = 0, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor @preconcurrency public func mc_loading(imageNames: [UIKit.UIImage?], animationSpeed: CoreFoundation.CGFloat = 0.1, duration: CoreFoundation.CGFloat = 0, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public static func mc_loading(text: Swift.String = "正在加载中", duration: CoreFoundation.CGFloat = 0, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  public static func mc_loading(imageNames: [UIKit.UIImage?], animationSpeed: CoreFoundation.CGFloat = 0.1, duration: CoreFoundation.CGFloat = 0, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension Foundation.NSString {
  public func dc_getBoundingSize(_ font: UIKit.UIFont?, _ lineHeight: CoreFoundation.CGFloat, _ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func mc_remove(callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public static func mc_remove(callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public enum MCToastType {
    case success
    case failure
    case warning
    public static func == (a: DCloudUTSExtAPI.MCToast.MCToastType, b: DCloudUTSExtAPI.MCToast.MCToastType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func mc_success(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor @preconcurrency public func mc_failure(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor @preconcurrency public func mc_warning(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public static func mc_success(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  public static func mc_failure(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
  public static func mc_warning(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  @discardableResult
  public static func showStatus(_ type: DCloudUTSExtAPI.MCToast.MCToastType?, text: Swift.String, iconImage: UIKit.UIImage?, duration: CoreFoundation.CGFloat, respond: DCloudUTSExtAPI.MCToast.MCToastRespond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil) -> (imageView: UIKit.UIImageView, label: UIKit.UILabel)
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func mc_statusBar(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, font: UIKit.UIFont = MCToastConfig.shared.text.font, backgroundColor: UIKit.UIColor? = nil, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public static func mc_statusBar(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, font: UIKit.UIFont = MCToastConfig.shared.text.font, backgroundColor: UIKit.UIColor? = nil, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor @preconcurrency public func mc_text(_ text: Swift.String, offset: CoreFoundation.CGFloat? = nil, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
extension DCloudUTSExtAPI.MCToast {
  public static func mc_text(_ text: Swift.String, offset: CoreFoundation.CGFloat? = nil, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCloudUTSExtAPI.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCloudUTSExtAPI.MCToast.MCToastCallback? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MCToast : ObjectiveC.NSObject {
  @objc deinit
}
extension DCloudUTSExtAPI.MCToast {
  public typealias MCToastCallback = () -> Swift.Void
  public enum MCToastRespond {
    case `default`
    case noRespond
    case respond
    case navBarRespond
    public static func == (a: DCloudUTSExtAPI.MCToast.MCToastRespond, b: DCloudUTSExtAPI.MCToast.MCToastRespond) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension DCloudUTSExtAPI.MCToast {
  public static func colorWithSystemStyle(_ darkColor: UIKit.UIColor, _ defaultColor: UIKit.UIColor) -> UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers public class MCToastConfig : ObjectiveC.NSObject {
  public static let shared: DCloudUTSExtAPI.MCToastConfig
  public var respond: DCloudUTSExtAPI.MCToast.MCToastRespond
  public var background: DCloudUTSExtAPI.MCToastConfig.Background
  public var icon: DCloudUTSExtAPI.MCToastConfig.Icon
  public var text: DCloudUTSExtAPI.MCToastConfig.Text
  public var spacing: DCloudUTSExtAPI.MCToastConfig.MainAreaSpacing
  public var duration: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSExtAPI.MCToastConfig {
  public struct Background {
    public var color: UIKit.UIColor
    public var size: CoreFoundation.CGSize
  }
  public struct Icon {
    public var size: CoreFoundation.CGSize
    public var successImage: UIKit.UIImage?
    public var failureImage: UIKit.UIImage?
    public var warningImage: UIKit.UIImage?
  }
  public struct Text {
    public var textColor: UIKit.UIColor?
    public var font: UIKit.UIFont
    public var offset: (CoreFoundation.CGFloat)
  }
  public struct MainAreaSpacing {
    public var margin: CoreFoundation.CGFloat
    public var padding: CoreFoundation.CGFloat
  }
}
public typealias Rpx2px = (_ number: Foundation.NSNumber) -> Foundation.NSNumber
public var EPS: Foundation.NSNumber
public var BASE_DEVICE_WIDTH: Foundation.NSNumber
public var windowWidth: Foundation.NSNumber
public var pixelRatio: Foundation.NSNumber
public var rpx2px: (_ number: Foundation.NSNumber) -> Foundation.NSNumber
public func rpx2pxByJs(_ number: Foundation.NSNumber) -> Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRpx2pxIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniRpx2pxIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_rpx2pxByJs(_ number: Foundation.NSNumber) -> Foundation.NSNumber
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniRichTextHTMLParserAttr) @objcMembers public class HTMLParserAttr : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var value: Swift.String
  @objc public init(_ name: Swift.String, _ value: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextHTMLParserHandler) @objcMembers public class HTMLParserHandler : ObjectiveC.NSObject {
  @objc public var start: ((_ tag: Swift.String, _ attrs: Swift.Array<DCloudUTSExtAPI.HTMLParserAttr>, _ unary: Swift.Bool) -> Swift.Void)?
  @objc public var end: ((_ tag: Swift.String) -> Swift.Void)?
  @objc public var chars: ((_ text: Swift.String) -> Swift.Void)?
  @objc public var comment: ((_ text: Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
public func makeMap(_ str: Swift.String) -> Swift.Dictionary<Swift.String, Swift.Bool>
public var startTag: DCloudUTSFoundation.UTSRegExp
public var endTag: DCloudUTSFoundation.UTSRegExp
public var empty: [Swift.String : Swift.Bool]
public var block: [Swift.String : Swift.Bool]
public var inline: [Swift.String : Swift.Bool]
public var closeSelf: [Swift.String : Swift.Bool]
public var fillAttrs: [Swift.String : Swift.Bool]
public var special: [Swift.String : Swift.Bool]
public var TAGS: [Swift.String : [Swift.String]]
public func HTMLParser(_ reassignedHtml: Swift.String, _ handler: DCloudUTSExtAPI.HTMLParserHandler)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextNode) @objcMembers public class Node : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var attrs: Swift.Dictionary<Swift.String, Any>?
  @objc public var children: [DCloudUTSExtAPI.Node]?
  @objc public var type: Swift.String?
  @objc public var text: Swift.String?
  @objc public var node: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public func removeDOCTYPE(_ html: Swift.String) -> Swift.String
public func parseAttrs(_ attrs: Swift.Array<DCloudUTSExtAPI.HTMLParserAttr>) -> Swift.Dictionary<Swift.String, Any>
public func parseHtml(_ reassignedHtml: Swift.String) -> [DCloudUTSExtAPI.Node]
public func attrsToString(_ attrs: Swift.Dictionary<Swift.String, Any>?) -> Swift.String
public func nodesToHtml(_ nodes: [DCloudUTSExtAPI.Node]) -> Swift.String
public func htmlParser(_ htmlStr: Swift.String) -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextUniRichTextItemClickEventDetail) @objcMembers public class UniRichTextItemClickEventDetail : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var src: Swift.String?
  @objc public var href: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniRichTextUniRichTextItemClickEvent) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRichTextUniRichTextItemClickEvent) public class UniRichTextItemClickEvent : DCloudUniappRuntime.UniCustomEvent<DCloudUTSExtAPI.UniRichTextItemClickEventDetail> {
  @objc public init(_ type: Swift.String, _ src: Swift.String?, _ href: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextUniRichTextElement) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRichTextUniRichTextElement) public class UniRichTextElement : DCloudUniappRuntime.UniViewElementImpl, DCloudUniappRuntime.UniCustomElement {
  @objc public var _parsedAttributes: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var _observedAttributes: [Swift.String]? {
    @objc get
  }
  @objc public static var observedAttributes: Swift.Array<Swift.String> {
    @objc get
  }
  @objc override public func __initCustomElement()
  @objc public func connectedCallback()
  @objc override public func insertBefore(_ child: any DCloudUniappRuntime.UniElement, _ anchor: (any DCloudUniappRuntime.UniElement)?) -> (any DCloudUniappRuntime.UniElement)?
  @objc public func attributeChangedCallback(_ name: Swift.String, _ _oldValue: Swift.String, _ _newValue: Swift.String)
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniRichTextElementRegister) @objcMembers public class UniRichTextElementRegister : ObjectiveC.NSObject {
  @objc public static func registerComponent()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextUniRichTextItemClickEventByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRichTextUniRichTextItemClickEventByJs) public class UniRichTextItemClickEventByJs : DCloudUTSExtAPI.UniRichTextItemClickEvent {
  @objc override public init(_ type: Swift.String, _ src: Swift.String?, _ href: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRichTextUniRichTextElementByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRichTextUniRichTextElementByJs) public class UniRichTextElementByJs : DCloudUTSExtAPI.UniRichTextElement {
  @objc public func __initCustomElementByJs()
  @objc public func connectedCallbackByJs()
  @objc public func insertBeforeByJs(_ child: any DCloudUniappRuntime.UniElement, _ anchor: (any DCloudUniappRuntime.UniElement)?) -> (any DCloudUniappRuntime.UniElement)?
  @objc public func attributeChangedCallbackByJs(_ name: Swift.String, _ _oldValue: Swift.String, _ _newValue: Swift.String)
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdUrlCallbackOptions) @objcMembers public class UrlCallbackOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var userId: Swift.String?
  @objc public var extra: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdCreateInterstitialAdOptions) @objcMembers public class CreateInterstitialAdOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var adpid: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdCreateRewardedVideoAdOptions) @objcMembers public class CreateRewardedVideoAdOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var adpid: Swift.String!
  @objc public var urlCallback: DCloudUTSExtAPI.UrlCallbackOptions?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol RewardedVideoAd : DCloudUTSExtAPI.IRewardedVideoAd, DCloudUTSExtAPI.IVideoAd {
}
public protocol InterstitialAd {
  func show() -> DCloudUTSFoundation.UTSPromise<Any>
  func load() -> DCloudUTSFoundation.UTSPromise<Any>
  func destroy()
  func onLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func offLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func onError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  func offError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  func onClose(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func offClose(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func onAdClicked(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
}
public protocol IVideoAd {
  func show() -> DCloudUTSFoundation.UTSPromise<Any>
  func load() -> DCloudUTSFoundation.UTSPromise<Any>
  func destroy()
  func onLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func offLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  func onError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  func offError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  func onClose(_ callback: @escaping DCloudUTSExtAPI.AdCloseCallBackEvent)
  func offClose(_ callback: @escaping DCloudUTSExtAPI.AdCloseCallBackEvent)
  func onAdClicked(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
}
public protocol IRewardedVideoAd {
  func onVerify(_ callback: @escaping DCloudUTSExtAPI.AdVerifyCallBackEvent)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdVideoAdClose) @objcMembers public class VideoAdClose : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var isEnded: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RewardedVideoAdClose = DCloudUTSExtAPI.VideoAdClose
public typealias UniAdErrorCode = Foundation.NSNumber
public protocol IUniAdError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.UniAdErrorCode { get set }
}
public typealias AdCallBackEvent = (_ result: Any) -> Swift.Void
public typealias AdCloseCallBackEvent = (_ result: DCloudUTSExtAPI.RewardedVideoAdClose) -> Swift.Void
public typealias AdErrorCallBackEvent = (_ result: any DCloudUTSExtAPI.IUniAdError) -> Swift.Void
public typealias AdVerifyCallBackEvent = (_ result: DCloudUTSFoundation.UTSJSONObject) -> Swift.Void
public typealias CreateRewardedVideoAd = (_ option: DCloudUTSExtAPI.CreateRewardedVideoAdOptions) -> any DCloudUTSExtAPI.RewardedVideoAd
public typealias CreateInterstitialAd = (_ option: DCloudUTSExtAPI.CreateInterstitialAdOptions) -> any DCloudUTSExtAPI.InterstitialAd
public var UniError_CreateRewardedVideoAd: Swift.String
public var UniError_CreateInterstitialAd: Swift.String
public var UniError_AdComponent: Swift.String
@objc(UTSSDKModulesDCloudUniAdUniAdErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniAdUniAdErrorImpl) public class UniAdErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IUniAdError {
  @objc public init(_ errCode: DCloudUTSExtAPI.UniAdErrorCode, _ errorMsg: Swift.String, _ causeError: DCloudUTSFoundation.UniAggregateError?)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniAdUniAdSourceError) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniAdUniAdSourceError) public class UniAdSourceError : DCloudUTSFoundation.SourceError {
  @objc public var platform: Swift.String
  @objc public var slotId: Swift.String
  @objc public init(_ code: Foundation.NSNumber, _ message: Swift.String, _ platform: Swift.String, _ slotId: Swift.String)
  @objc deinit
}
public protocol RewardAdListener {
  func _onShowError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  func _onClick()
  func _onClose(_ result: Swift.Bool)
  func _onShow()
  func _onLoad()
  func _onLoadError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  func _onVerify(_ result: DCloudUTSFoundation.UTSJSONObject)
}
@objc(UTSSDKModulesDCloudUniAdRewardVideoAdImpl) @objcMembers public class RewardVideoAdImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.RewardedVideoAd, DCloudUTSExtAPI.RewardAdListener {
  @objc public var closeCB: DCloudUTSExtAPI.AdCloseCallBackEvent?
  @objc public var clickCB: DCloudUTSExtAPI.AdCallBackEvent?
  @objc public var loadCB: DCloudUTSExtAPI.AdCallBackEvent?
  public var errorCB: DCloudUTSExtAPI.AdErrorCallBackEvent?
  @objc public var verifyCB: DCloudUTSExtAPI.AdVerifyCallBackEvent?
  @objc public init(_ option: DCloudUTSExtAPI.CreateRewardedVideoAdOptions)
  public func load() -> DCloudUTSFoundation.UTSPromise<Any>
  public func show() -> DCloudUTSFoundation.UTSPromise<Any>
  @objc public func destroy()
  @objc public func onClose(_ callback: @escaping DCloudUTSExtAPI.AdCloseCallBackEvent)
  @objc public func offClose(_ callback: @escaping DCloudUTSExtAPI.AdCloseCallBackEvent)
  @objc public func onAdClicked(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func onLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func offLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  public func onError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  public func offError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  @objc public func onVerify(_ callback: @escaping DCloudUTSExtAPI.AdVerifyCallBackEvent)
  @objc public func _onVerify(_ result: DCloudUTSFoundation.UTSJSONObject)
  @objc public func _onShow()
  @objc public func _onClose(_ result: Swift.Bool)
  @objc public func _onClick()
  @objc public func _onShowError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  @objc public func _onLoadError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  @objc public func _onLoad()
  @objc deinit
}
public protocol InterstitialAdListener {
  func _onShowError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  func _onClick()
  func _onClose(_ result: Swift.Bool)
  func _onShow()
  func _onLoad()
  func _onLoadError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
}
@objc(UTSSDKModulesDCloudUniAdInterstitialAdImpl) @objcMembers public class InterstitialAdImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.InterstitialAd, DCloudUTSExtAPI.InterstitialAdListener {
  @objc public var closeCB: DCloudUTSExtAPI.AdCallBackEvent?
  @objc public var clickCB: DCloudUTSExtAPI.AdCallBackEvent?
  @objc public var loadCB: DCloudUTSExtAPI.AdCallBackEvent?
  public var errorCB: DCloudUTSExtAPI.AdErrorCallBackEvent?
  @objc public init(_ option: DCloudUTSExtAPI.CreateInterstitialAdOptions)
  public func load() -> DCloudUTSFoundation.UTSPromise<Any>
  public func show() -> DCloudUTSFoundation.UTSPromise<Any>
  @objc public func destroy()
  @objc public func onClose(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func offClose(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func onAdClicked(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func onLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  @objc public func offLoad(_ callback: @escaping DCloudUTSExtAPI.AdCallBackEvent)
  public func onError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  public func offError(_ callback: @escaping DCloudUTSExtAPI.AdErrorCallBackEvent)
  @objc public func _onShow()
  @objc public func _onClose(_ result: Swift.Bool)
  @objc public func _onClick()
  @objc public func _onShowError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  @objc public func _onLoadError(_ code: Foundation.NSNumber, _ message: Swift.String, _ detail: DCloudUTSFoundation.UniAggregateError?)
  @objc public func _onLoad()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AdComponent) @objcMembers @_Concurrency.MainActor @preconcurrency @_objcRuntimeName(AdComponent) public class AdComponent : DCloudUniappRuntime.UTSComponent<UIKit.UIView> {
  @objc @_Concurrency.MainActor @preconcurrency public var adpid: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency override public func created()
  @objc @_Concurrency.MainActor @preconcurrency override public func NVLoad() -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency override public func NVLoaded()
  @objc @_Concurrency.MainActor @preconcurrency override public func unmounted()
  @objc @_Concurrency.MainActor @preconcurrency public func load()
  @objc @_Concurrency.MainActor @preconcurrency override public func __$$init()
  @objc @_Concurrency.MainActor @preconcurrency required public init(domNode: DCloudUniappRuntime.UniElementImpl)
  @objc deinit
}
@objc public protocol AdElement : JavaScriptCore.JSExport {
}
@_inheritsConvenienceInitializers @objc(AdElementImpl) @objcMembers @_objcRuntimeName(AdElementImpl) public class AdElementImpl : DCloudUniappRuntime.UniElementImpl, DCloudUTSExtAPI.AdElement {
  public var targetComponent: DCloudUTSExtAPI.AdComponent {
    get
  }
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AdComponentRegister) @objcMembers public class AdComponentRegister : ObjectiveC.NSObject {
  @objc public static func registerComponent()
  @objc override dynamic public init()
  @objc deinit
}
public var createRewardedVideoAd: (_ option: DCloudUTSExtAPI.CreateRewardedVideoAdOptions) -> any DCloudUTSExtAPI.RewardedVideoAd
public var createInterstitialAd: (_ option: DCloudUTSExtAPI.CreateInterstitialAdOptions) -> any DCloudUTSExtAPI.InterstitialAd
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdCreateInterstitialAdOptionsJSONObject) @objcMembers public class CreateInterstitialAdOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var adpid: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdCreateRewardedVideoAdOptionsJSONObject) @objcMembers public class CreateRewardedVideoAdOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var adpid: Swift.String!
  @objc public var urlCallback: DCloudUTSExtAPI.UrlCallbackOptions?
  @objc override dynamic public init()
  @objc deinit
}
public func createRewardedVideoAdByJs(_ option: DCloudUTSExtAPI.CreateRewardedVideoAdOptionsJSONObject) -> Swift.Int
public func createInterstitialAdByJs(_ option: DCloudUTSExtAPI.CreateInterstitialAdOptionsJSONObject) -> Swift.Int
@objc(UTSSDKModulesDCloudUniAdInterstitialAdByJsProxy) @objcMembers public class InterstitialAdByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.InterstitialAd
  public init(_ ins: any DCloudUTSExtAPI.InterstitialAd)
  @objc public func showByJs(utsCompletionHandler: @escaping (_ res: Any?, _ err: Any?) -> Swift.Void)
  @objc public func loadByJs(utsCompletionHandler: @escaping (_ res: Any?, _ err: Any?) -> Swift.Void)
  @objc public func destroyByJs()
  @objc public func onLoadByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offLoadByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onAdClickedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniAdRewardedVideoAdByJsProxy) @objcMembers public class RewardedVideoAdByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.RewardedVideoAd
  public init(_ ins: any DCloudUTSExtAPI.RewardedVideoAd)
  @objc public func showByJs(utsCompletionHandler: @escaping (_ res: Any?, _ err: Any?) -> Swift.Void)
  @objc public func loadByJs(utsCompletionHandler: @escaping (_ res: Any?, _ err: Any?) -> Swift.Void)
  @objc public func destroyByJs()
  @objc public func onLoadByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offLoadByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onAdClickedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onVerifyByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniAdIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniAdIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_createRewardedVideoAdByJs(_ option: DCloudUTSExtAPI.CreateRewardedVideoAdOptionsJSONObject) -> Swift.Int
  @objc public static func s_createInterstitialAdByJs(_ option: DCloudUTSExtAPI.CreateInterstitialAdOptionsJSONObject) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public class RequestOptions<T> : DCloudUTSFoundation.UTSObject {
  public var url: Swift.String!
  public var data: Any?
  public var header: DCloudUTSFoundation.UTSJSONObject?
  public var method: DCloudUTSExtAPI.RequestMethod?
  public var timeout: Foundation.NSNumber?
  public var dataType: Swift.String?
  public var responseType: Swift.String?
  public var sslVerify: Swift.Bool
  public var withCredentials: Swift.Bool
  public var firstIpv4: Swift.Bool
  public var enableChunked: Swift.Bool
  public var success: DCloudUTSExtAPI.RequestSuccessCallback<T>?
  public var fail: DCloudUTSExtAPI.RequestFailCallback?
  public var complete: DCloudUTSExtAPI.RequestCompleteCallback?
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
  @objc public func dcUTS_modelToJSONObject() -> Swift.Dictionary<Swift.String, Any>
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public class RequestSuccess<T> : DCloudUTSFoundation.UTSObject {
  public var data: T?
  public var statusCode: Foundation.NSNumber!
  public var header: Any!
  public var cookies: Swift.Array<Swift.String>!
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
  @objc public func dcUTS_modelToJSONObject() -> Swift.Dictionary<Swift.String, Any>
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestMethod = Swift.String
public typealias RequestErrorCode = Foundation.NSNumber
public protocol RequestFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RequestErrorCode { get set }
}
public typealias RequestSuccessCallback<T> = (_ option: DCloudUTSExtAPI.RequestSuccess<T>) -> Swift.Void
public typealias RequestFailCallback = (_ option: any DCloudUTSExtAPI.RequestFail) -> Swift.Void
public typealias RequestCompleteCallback = (_ option: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkRequestTaskOnChunkReceivedListenerResult) @objcMembers public class RequestTaskOnChunkReceivedListenerResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: DCloudUTSFoundation.ArrayBuffer!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestTaskOnChunkReceivedCallback = (_ result: DCloudUTSExtAPI.RequestTaskOnChunkReceivedListenerResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkRequestTaskOnHeadersReceivedListenerResult) @objcMembers public class RequestTaskOnHeadersReceivedListenerResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var cookies: [Swift.String]!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject!
  @objc public var statusCode: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestTaskOnHeadersReceivedCallback = (_ result: DCloudUTSExtAPI.RequestTaskOnHeadersReceivedListenerResult) -> Swift.Void
public protocol RequestTask {
  func abort()
  func onChunkReceived(_ listener: @escaping DCloudUTSExtAPI.RequestTaskOnChunkReceivedCallback) -> Foundation.NSNumber
  func offChunkReceived(_ listener: Any?)
  func onHeadersReceived(_ listener: @escaping DCloudUTSExtAPI.RequestTaskOnHeadersReceivedCallback) -> Foundation.NSNumber
  func offHeadersReceived(_ listener: Any?)
}
public typealias UploadFile = (_ options: DCloudUTSExtAPI.UploadFileOptions) -> any DCloudUTSExtAPI.UploadTask
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkUploadFileOptionFiles) @objcMembers public class UploadFileOptionFiles : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var name: Swift.String?
  @objc public var uri: Swift.String!
  @objc public var file: Any?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkUploadFileSuccess) @objcMembers public class UploadFileSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public var statusCode: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UploadFileSuccessCallback = (_ result: DCloudUTSExtAPI.UploadFileSuccess) -> Swift.Void
public protocol UploadFileFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RequestErrorCode { get set }
}
public typealias UploadFileFailCallback = (_ result: any DCloudUTSExtAPI.UploadFileFail) -> Swift.Void
public typealias UploadFileCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkUploadFileOptions) @objcMembers public class UploadFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var url: Swift.String!
  @objc public var filePath: Swift.String?
  @objc public var name: Swift.String?
  @objc public var files: [DCloudUTSExtAPI.UploadFileOptionFiles]?
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var formData: DCloudUTSFoundation.UTSJSONObject?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var success: DCloudUTSExtAPI.UploadFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.UploadFileFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UploadFileCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkOnProgressUpdateResult) @objcMembers public class OnProgressUpdateResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var progress: Foundation.NSNumber!
  @objc public var totalBytesSent: Foundation.NSNumber!
  @objc public var totalBytesExpectedToSend: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UploadFileProgressUpdateCallback = (_ result: DCloudUTSExtAPI.OnProgressUpdateResult) -> Swift.Void
public protocol UploadTask {
  func abort()
  func onProgressUpdate(_ callback: @escaping DCloudUTSExtAPI.UploadFileProgressUpdateCallback)
}
public typealias DownloadFile = (_ options: DCloudUTSExtAPI.DownloadFileOptions) -> any DCloudUTSExtAPI.DownloadTask
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkDownloadFileSuccess) @objcMembers public class DownloadFileSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var statusCode: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias DownloadFileSuccessCallback = (_ result: DCloudUTSExtAPI.DownloadFileSuccess) -> Swift.Void
public protocol DownloadFileFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RequestErrorCode { get set }
}
public typealias DownloadFileFailCallback = (_ result: any DCloudUTSExtAPI.DownloadFileFail) -> Swift.Void
public typealias DownloadFileComplete = Any
public typealias DownloadFileCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkDownloadFileOptions) @objcMembers public class DownloadFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var filePath: Swift.String?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var success: DCloudUTSExtAPI.DownloadFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.DownloadFileFailCallback?
  @objc public var complete: DCloudUTSExtAPI.DownloadFileCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkOnProgressDownloadResult) @objcMembers public class OnProgressDownloadResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var progress: Foundation.NSNumber!
  @objc public var totalBytesWritten: Foundation.NSNumber!
  @objc public var totalBytesExpectedToWrite: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias DownloadFileProgressUpdateCallback = (_ result: DCloudUTSExtAPI.OnProgressDownloadResult) -> Swift.Void
public protocol DownloadTask {
  func abort()
  func onProgressUpdate(_ callback: @escaping DCloudUTSExtAPI.DownloadFileProgressUpdateCallback)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkNetworkUtil) @objcMembers public class NetworkUtil : ObjectiveC.NSObject {
  @objc public static func convertHeaders(_ headers: Swift.Dictionary<Swift.String, Any>?) -> DCloudUTSFoundation.UTSJSONObject
  @objc public static func parseCookie(_ header: DCloudUTSFoundation.UTSJSONObject?) -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkNetworkRequestListener) @objcMembers public class NetworkRequestListener : ObjectiveC.NSObject {
  @objc weak public var task: Swift.AnyObject?
  @objc public func onStart()
  @objc public func onHeadersReceived(_ statusCode: Foundation.NSNumber, _ headers: Swift.Dictionary<Swift.String, Any>)
  @objc public func onDataReceived(_ data: Foundation.Data)
  @objc public func onFinished(_ response: Foundation.HTTPURLResponse)
  @objc public func onFail(_ error: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkNetworkUploadFileListener) @objcMembers public class NetworkUploadFileListener : ObjectiveC.NSObject {
  @objc weak public var task: Swift.AnyObject?
  public var progressListeners: [DCloudUTSExtAPI.UploadFileProgressUpdateCallback]
  @objc public func onProgress(_ progressUpdate: DCloudUTSExtAPI.OnProgressUpdateResult)
  @objc public func onDataReceived(_ data: Foundation.Data)
  @objc public func onFinished(_ response: Foundation.HTTPURLResponse)
  @objc public func onFail(_ error: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkNetworkDownloadFileListener) @objcMembers public class NetworkDownloadFileListener : ObjectiveC.NSObject {
  @objc weak public var task: Swift.AnyObject?
  @objc public var options: DCloudUTSExtAPI.DownloadFileOptions?
  public var progressListeners: [DCloudUTSExtAPI.DownloadFileProgressUpdateCallback]
  @objc public func onProgress(_ progressUpdate: DCloudUTSExtAPI.OnProgressDownloadResult)
  @objc public func onFinished(_ response: Foundation.HTTPURLResponse, _ filePath: Swift.String)
  @objc public func onFail(_ error: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkNetworkRequestTaskImpl) @objcMembers public class NetworkRequestTaskImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.RequestTask {
  public var headersReceivedListeners: [Foundation.NSNumber : DCloudUTSExtAPI.RequestTaskOnHeadersReceivedCallback]
  public var chunkReceivedListeners: [Foundation.NSNumber : DCloudUTSExtAPI.RequestTaskOnChunkReceivedCallback]
  @objc public init(_ task: Foundation.URLSessionDataTask?)
  @objc public func abort()
  @objc public func onHeadersReceived(_ listener: @escaping DCloudUTSExtAPI.RequestTaskOnHeadersReceivedCallback) -> Foundation.NSNumber
  @objc public func offHeadersReceived(_ listener: Any?)
  @objc public func onChunkReceived(_ listener: @escaping DCloudUTSExtAPI.RequestTaskOnChunkReceivedCallback) -> Foundation.NSNumber
  @objc public func offChunkReceived(_ listener: Any?)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkNetworkUploadTaskImpl) @objcMembers public class NetworkUploadTaskImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UploadTask {
  @objc public init(_ task: Foundation.URLSessionDataTask?, _ listener: DCloudUTSExtAPI.NetworkUploadFileListener)
  @objc public func abort()
  @objc public func onProgressUpdate(_ option: @escaping DCloudUTSExtAPI.UploadFileProgressUpdateCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkUploadController) @objcMembers public class UploadController : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  @objc public static func getInstance() -> DCloudUTSExtAPI.UploadController
  public func uploadFile(_ options: DCloudUTSExtAPI.UploadFileOptions, _ listener: DCloudUTSExtAPI.NetworkUploadFileListener) -> any DCloudUTSExtAPI.UploadTask
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkNetworkDownloadTaskImpl) @objcMembers public class NetworkDownloadTaskImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.DownloadTask {
  @objc public init(_ task: Foundation.URLSessionDownloadTask?, _ listener: DCloudUTSExtAPI.NetworkDownloadFileListener)
  @objc public func abort()
  @objc public func onProgressUpdate(_ option: @escaping DCloudUTSExtAPI.DownloadFileProgressUpdateCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkDownloadController) @objcMembers public class DownloadController : ObjectiveC.NSObject, Foundation.URLSessionDownloadDelegate {
  @objc public static func getInstance() -> DCloudUTSExtAPI.DownloadController
  public func downloadFile(_ options: DCloudUTSExtAPI.DownloadFileOptions, _ listener: DCloudUTSExtAPI.NetworkDownloadFileListener) -> any DCloudUTSExtAPI.DownloadTask
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkNetworkManager) @objcMembers public class NetworkManager : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  @objc public static func getInstance() -> DCloudUTSExtAPI.NetworkManager
  public func request<T>(_ param: DCloudUTSExtAPI.RequestOptions<T>, _ listener: DCloudUTSExtAPI.NetworkRequestListener) -> any DCloudUTSExtAPI.RequestTask
  public func uploadFile(_ options: DCloudUTSExtAPI.UploadFileOptions, _ listener: DCloudUTSExtAPI.NetworkUploadFileListener) -> any DCloudUTSExtAPI.UploadTask
  public func downloadFile(_ options: DCloudUTSExtAPI.DownloadFileOptions, _ listener: DCloudUTSExtAPI.NetworkDownloadFileListener) -> any DCloudUTSExtAPI.DownloadTask
  public func createRequest<T>(_ param: DCloudUTSExtAPI.RequestOptions<T>) -> Foundation.URLRequest?
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (_ dis: Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkStatusCode) @objcMembers public class StatusCode : ObjectiveC.NSObject {
  @objc public static func getStatus(_ code: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public var UniNetWorkErrorSubject: Swift.String
public var NetWorkUniErrors: [DCloudUTSExtAPI.RequestErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniNetworkRequestFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniNetworkRequestFailImpl) public class RequestFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.RequestFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RequestErrorCode)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkUploadFileFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniNetworkUploadFileFailImpl) public class UploadFileFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.UploadFileFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RequestErrorCode)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkDownloadFileFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniNetworkDownloadFileFailImpl) public class DownloadFileFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.DownloadFileFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RequestErrorCode)
  @objc deinit
}
public class SimpleNetworkListener<T> : DCloudUTSExtAPI.NetworkRequestListener {
  @objc weak override public var task: Swift.AnyObject? {
    @objc get
    @objc set(value)
  }
  public init(_ param: DCloudUTSExtAPI.RequestOptions<T>)
  @objc override public func onStart()
  @objc override public func onHeadersReceived(_ statusCode: Foundation.NSNumber, _ headers: Swift.Dictionary<Swift.String, Any>)
  @objc override public func onDataReceived(_ data: Foundation.Data)
  @objc override public func onFinished(_ response: Foundation.HTTPURLResponse)
  @objc override public func onFail(_ error: any Swift.Error)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkUploadNetworkListener) @objcMembers public class UploadNetworkListener : DCloudUTSExtAPI.NetworkUploadFileListener {
  override public var progressListeners: Swift.Array<DCloudUTSExtAPI.UploadFileProgressUpdateCallback> {
    get
    set(value)
  }
  @objc weak override public var task: Swift.AnyObject? {
    @objc get
    @objc set(value)
  }
  @objc public init(_ param: DCloudUTSExtAPI.UploadFileOptions)
  @objc override public func onProgress(_ progressUpdate: DCloudUTSExtAPI.OnProgressUpdateResult)
  @objc override public func onDataReceived(_ data: Foundation.Data)
  @objc override public func onFinished(_ response: Foundation.HTTPURLResponse)
  @objc override public func onFail(_ error: any Swift.Error)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkDownloadNetworkListener) @objcMembers public class DownloadNetworkListener : DCloudUTSExtAPI.NetworkDownloadFileListener {
  @objc override public var options: DCloudUTSExtAPI.DownloadFileOptions? {
    @objc get
    @objc set(value)
  }
  override public var progressListeners: Swift.Array<DCloudUTSExtAPI.DownloadFileProgressUpdateCallback> {
    get
    set(value)
  }
  @objc weak override public var task: Swift.AnyObject? {
    @objc get
    @objc set(value)
  }
  @objc public init(_ options: DCloudUTSExtAPI.DownloadFileOptions)
  @objc override public func onProgress(_ progressUpdate: DCloudUTSExtAPI.OnProgressDownloadResult)
  @objc override public func onFinished(_ response: Foundation.HTTPURLResponse, _ filePath: Swift.String)
  @objc override public func onFail(_ error: any Swift.Error)
  @objc deinit
}
public func request<T>(_ options: DCloudUTSExtAPI.RequestOptions<T>, _ _t: T.Type) -> any DCloudUTSExtAPI.RequestTask
public var uploadFile: (_ options: DCloudUTSExtAPI.UploadFileOptions) -> any DCloudUTSExtAPI.UploadTask
public var downloadFile: (_ options: DCloudUTSExtAPI.DownloadFileOptions) -> any DCloudUTSExtAPI.DownloadTask
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkRequestOptionsJSONObject) @objcMembers public class RequestOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var url: Swift.String!
  @objc public var data: Any?
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var method: DCloudUTSExtAPI.RequestMethod?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var dataType: Swift.String?
  @objc public var responseType: Swift.String?
  @objc public var sslVerify: Swift.Bool
  @objc public var withCredentials: Swift.Bool
  @objc public var firstIpv4: Swift.Bool
  @objc public var enableChunked: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkUploadFileOptionsJSONObject) @objcMembers public class UploadFileOptionsJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var url: Swift.String!
  @objc public var filePath: Swift.String?
  @objc public var name: Swift.String?
  @objc public var files: [DCloudUTSExtAPI.UploadFileOptionFiles]?
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var formData: DCloudUTSFoundation.UTSJSONObject?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkDownloadFileOptionsJSONObject) @objcMembers public class DownloadFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var filePath: Swift.String?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func requestByJs(_ options: DCloudUTSExtAPI.RequestOptionsJSONObject) -> Swift.Int
public func uploadFileByJs(_ options: DCloudUTSExtAPI.UploadFileOptionsJSONObject) -> Swift.Int
public func downloadFileByJs(_ options: DCloudUTSExtAPI.DownloadFileOptionsJSONObject) -> Swift.Int
@objc(UTSSDKModulesDCloudUniNetworkDownloadTaskByJsProxy) @objcMembers public class DownloadTaskByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.DownloadTask
  public init(_ ins: any DCloudUTSExtAPI.DownloadTask)
  @objc public func abortByJs()
  @objc public func onProgressUpdateByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkRequestTaskByJsProxy) @objcMembers public class RequestTaskByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.RequestTask
  public init(_ ins: any DCloudUTSExtAPI.RequestTask)
  @objc public func abortByJs()
  @objc public func onChunkReceivedByJs(_ listener: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public func offChunkReceivedByJs(_ listener: Any?)
  @objc public func onHeadersReceivedByJs(_ listener: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public func offHeadersReceivedByJs(_ listener: Any?)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniNetworkUploadTaskByJsProxy) @objcMembers public class UploadTaskByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.UploadTask
  public init(_ ins: any DCloudUTSExtAPI.UploadTask)
  @objc public func abortByJs()
  @objc public func onProgressUpdateByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniNetworkIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniNetworkIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_requestByJs(_ options: DCloudUTSExtAPI.RequestOptionsJSONObject) -> Swift.Int
  @objc public static func s_uploadFileByJs(_ options: DCloudUTSExtAPI.UploadFileOptionsJSONObject) -> Swift.Int
  @objc public static func s_downloadFileByJs(_ options: DCloudUTSExtAPI.DownloadFileOptionsJSONObject) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public typealias MediaOrientation = Swift.String
public typealias MediaErrorCode = Foundation.NSNumber
public protocol IMediaError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.MediaErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseImageTempFile) @objcMembers public class ChooseImageTempFile : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public var size: Foundation.NSNumber!
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseImageSuccess) @objcMembers public class ChooseImageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errSubject: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public var tempFilePaths: Swift.Array<Swift.String>!
  @objc public var tempFiles: [DCloudUTSExtAPI.ChooseImageTempFile]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseImageFail = DCloudUTSExtAPI.IMediaError
public typealias ChooseImageSuccessCallback = (_ callback: DCloudUTSExtAPI.ChooseImageSuccess) -> Swift.Void
public typealias ChooseImageFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias ChooseImageCompleteCallback = (_ callback: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseImageCropOptions) @objcMembers public class ChooseImageCropOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public var quality: Foundation.NSNumber?
  @objc public var resize: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseImagePageOrientation = Swift.String
public typealias ChooseImageAlbumMode = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseImageOptions) @objcMembers public class ChooseImageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseImagePageOrientation?
  @objc public var albumMode: DCloudUTSExtAPI.ChooseImageAlbumMode?
  @objc public var count: Foundation.NSNumber?
  @objc public var sizeType: [Swift.String]?
  @objc public var sourceType: [Swift.String]?
  @objc public var `extension`: [Swift.String]?
  @objc public var crop: DCloudUTSExtAPI.ChooseImageCropOptions?
  @objc public var success: DCloudUTSExtAPI.ChooseImageSuccessCallback?
  public var fail: DCloudUTSExtAPI.ChooseImageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseImageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseImage = (_ options: DCloudUTSExtAPI.ChooseImageOptions) -> Swift.Void
public typealias GetImageInfo = (_ options: DCloudUTSExtAPI.GetImageInfoOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetImageInfoSuccess) @objcMembers public class GetImageInfoSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public var path: Swift.String!
  @objc public var orientation: DCloudUTSExtAPI.MediaOrientation?
  @objc public var type: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetImageInfoFail = DCloudUTSExtAPI.IMediaError
public typealias GetImageInfoSuccessCallback = (_ callback: DCloudUTSExtAPI.GetImageInfoSuccess) -> Swift.Void
public typealias GetImageInfoFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias GetImageInfoCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetImageInfoOptions) @objcMembers public class GetImageInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var src: Swift.String!
  @objc public var success: DCloudUTSExtAPI.GetImageInfoSuccessCallback?
  public var fail: DCloudUTSExtAPI.GetImageInfoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetImageInfoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SaveImageToPhotosAlbum = (_ options: DCloudUTSExtAPI.SaveImageToPhotosAlbumOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveImageToPhotosAlbumSuccess) @objcMembers public class SaveImageToPhotosAlbumSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SaveImageToPhotosAlbumFail = DCloudUTSExtAPI.IMediaError
public typealias SaveImageToPhotosAlbumSuccessCallback = (_ callback: DCloudUTSExtAPI.SaveImageToPhotosAlbumSuccess) -> Swift.Void
public typealias SaveImageToPhotosAlbumFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias SaveImageToPhotosAlbumCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveImageToPhotosAlbumOptions) @objcMembers public class SaveImageToPhotosAlbumOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.SaveImageToPhotosAlbumSuccessCallback?
  public var fail: DCloudUTSExtAPI.SaveImageToPhotosAlbumFailCallback?
  @objc public var complete: DCloudUTSExtAPI.SaveImageToPhotosAlbumCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CompressImage = (_ options: DCloudUTSExtAPI.CompressImageOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressImageSuccess) @objcMembers public class CompressImageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CompressImageFail = DCloudUTSExtAPI.IMediaError
public typealias CompressImageSuccessCallback = (_ callback: DCloudUTSExtAPI.CompressImageSuccess) -> Swift.Void
public typealias CompressImageFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias CompressImageCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressImageOptions) @objcMembers public class CompressImageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var src: Swift.String!
  @objc public var quality: Foundation.NSNumber?
  @objc public var rotate: Foundation.NSNumber?
  @objc public var width: Swift.String?
  @objc public var height: Swift.String?
  @objc public var compressedHeight: Foundation.NSNumber?
  @objc public var compressedWidth: Foundation.NSNumber?
  @objc public var success: DCloudUTSExtAPI.CompressImageSuccessCallback?
  public var fail: DCloudUTSExtAPI.CompressImageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.CompressImageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseVideoSuccess) @objcMembers public class ChooseVideoSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var duration: Foundation.NSNumber!
  @objc public var size: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public var width: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseVideoFail = DCloudUTSExtAPI.IMediaError
public typealias ChooseVideoSuccessCallback = (_ callback: DCloudUTSExtAPI.ChooseVideoSuccess) -> Swift.Void
public typealias ChooseVideoFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias ChooseVideoCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
public typealias ChooseVideoPageOrientation = DCloudUTSExtAPI.ChooseImagePageOrientation
public typealias ChooseVideoAlbumMode = DCloudUTSExtAPI.ChooseImageAlbumMode
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseVideoOptions) @objcMembers public class ChooseVideoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseVideoPageOrientation?
  @objc public var albumMode: DCloudUTSExtAPI.ChooseVideoAlbumMode?
  @objc public var sourceType: [Swift.String]?
  @objc public var compressed: Swift.Bool
  @objc public var maxDuration: Foundation.NSNumber?
  @objc public var camera: Swift.String?
  @objc public var `extension`: [Swift.String]?
  @objc public var success: DCloudUTSExtAPI.ChooseVideoSuccessCallback?
  public var fail: DCloudUTSExtAPI.ChooseVideoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseVideoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseVideo = (_ options: DCloudUTSExtAPI.ChooseVideoOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetVideoInfoSuccess) @objcMembers public class GetVideoInfoSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var orientation: DCloudUTSExtAPI.MediaOrientation?
  @objc public var type: Swift.String?
  @objc public var duration: Foundation.NSNumber!
  @objc public var size: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  @objc public var width: Foundation.NSNumber!
  @objc public var fps: Foundation.NSNumber?
  @objc public var bitrate: Foundation.NSNumber?
  @objc public var thumbTempFilePath: Swift.String?
  @objc public var byteSize: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetVideoInfoFail = DCloudUTSExtAPI.IMediaError
public typealias GetVideoInfoSuccessCallback = (_ callback: DCloudUTSExtAPI.GetVideoInfoSuccess) -> Swift.Void
public typealias GetVideoInfoFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias GetVideoInfoCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetVideoInfoOptions) @objcMembers public class GetVideoInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var src: Swift.String!
  @objc public var success: DCloudUTSExtAPI.GetVideoInfoSuccessCallback?
  public var fail: DCloudUTSExtAPI.GetVideoInfoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetVideoInfoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetVideoInfo = (_ options: DCloudUTSExtAPI.GetVideoInfoOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveVideoToPhotosAlbumSuccess) @objcMembers public class SaveVideoToPhotosAlbumSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SaveVideoToPhotosAlbumFail = DCloudUTSExtAPI.IMediaError
public typealias SaveVideoToPhotosAlbumSuccessCallback = (_ callback: DCloudUTSExtAPI.SaveVideoToPhotosAlbumSuccess) -> Swift.Void
public typealias SaveVideoToPhotosAlbumFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias SaveVideoToPhotosAlbumCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveVideoToPhotosAlbumOptions) @objcMembers public class SaveVideoToPhotosAlbumOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.SaveVideoToPhotosAlbumSuccessCallback?
  public var fail: DCloudUTSExtAPI.SaveVideoToPhotosAlbumFailCallback?
  @objc public var complete: DCloudUTSExtAPI.SaveVideoToPhotosAlbumCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SaveVideoToPhotosAlbum = (_ options: DCloudUTSExtAPI.SaveVideoToPhotosAlbumOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressVideoSuccess) @objcMembers public class CompressVideoSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var size: Foundation.NSNumber!
  @objc public var byteSize: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CompressVideoFail = DCloudUTSExtAPI.IMediaError
public typealias CompressVideoSuccessCallback = (_ callback: DCloudUTSExtAPI.CompressVideoSuccess) -> Swift.Void
public typealias CompressVideoFailCallback = (_ callback: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias CompressVideoCompleteCallback = DCloudUTSExtAPI.ChooseImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressVideoOptions) @objcMembers public class CompressVideoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var src: Swift.String!
  @objc public var quality: Swift.String?
  @objc public var bitrate: Foundation.NSNumber?
  @objc public var fps: Foundation.NSNumber?
  @objc public var resolution: Foundation.NSNumber?
  @objc public var success: DCloudUTSExtAPI.CompressVideoSuccessCallback?
  public var fail: DCloudUTSExtAPI.CompressVideoFailCallback?
  @objc public var complete: DCloudUTSExtAPI.CompressVideoCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CompressVideo = (_ options: DCloudUTSExtAPI.CompressVideoOptions) -> Swift.Void
public typealias ChooseFile = (_ options: DCloudUTSExtAPI.ChooseFileOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseFileSuccess) @objcMembers public class ChooseFileSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePaths: [Swift.String]!
  @objc public var tempFiles: [DCloudUTSExtAPI.ChooseFileTempFile]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseFileTempFile) @objcMembers public class ChooseFileTempFile : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var name: Swift.String!
  @objc public var path: Swift.String!
  @objc public var size: Foundation.NSNumber!
  @objc public var type: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseFileSuccessCallback = (_ result: DCloudUTSExtAPI.ChooseFileSuccess) -> Swift.Void
public typealias ChooseFileFail = DCloudUTSExtAPI.IMediaError
public typealias ChooseFileFailCallback = (_ result: any DCloudUTSExtAPI.IMediaError) -> Swift.Void
public typealias ChooseFileComplete = Any
public typealias ChooseFileCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseFileOptions) @objcMembers public class ChooseFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var count: Foundation.NSNumber?
  @objc public var type: Swift.String?
  @objc public var `extension`: [Swift.String]?
  @objc public var sizeType: Any?
  @objc public var sourceType: [Swift.String]?
  @objc public var success: DCloudUTSExtAPI.ChooseFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.ChooseFileFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseFileCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var UniError_GetImageInfo: Swift.String
public var UniError_SaveImageToPhotosAlbum: Swift.String
public var UniError_SaveVideoToPhotosAlbum: Swift.String
public var UniError_ChooseImage: Swift.String
public var UniError_ChooseVideo: Swift.String
public var UniError_CompressImage: Swift.String
public var UniError_CompressVideo: Swift.String
public var UniError_GetVideoInfo: Swift.String
public var UniError_ChooseFile: Swift.String
public var MediaUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniMediaMediaErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniMediaMediaErrorImpl) public class MediaErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IMediaError {
  @objc public init(_ errCode: DCloudUTSExtAPI.MediaErrorCode, _ uniErrorSubject: Swift.String)
  @objc deinit
}
public func uniChooseImage(_ options: DCloudUTSExtAPI.ChooseImageOptions, _ onSourceTypeSelect: @escaping (_ count: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Void)
public func uniChooseVideo(_ options: DCloudUTSExtAPI.ChooseVideoOptions, _ onSourceTypeSelect: @escaping (_ index: Foundation.NSNumber) -> Swift.Void)
public func requestMicrophonePermission(_ completion: @escaping (_ status: Foundation.NSNumber) -> Swift.Void)
public func requestCameraPermission(_ completion: @escaping (_ status: Foundation.NSNumber) -> Swift.Void)
public func requestAlbumPermission(_ level: Swift.String, _ completion: @escaping (_ status: Foundation.NSNumber) -> Swift.Void)
public func isNetUrl(_ urlStr: Swift.String) -> Swift.Bool
public func getImageOrientation(_ image: UIKit.UIImage) -> Swift.String
public func getImageFormat(_ imageData: Foundation.Data) -> Swift.String
public func isExistFilePath(_ path: Swift.String) -> Swift.Bool
public func createFilePath(_ fileName: Swift.String) -> Swift.String
public func saveImage(_ imageData: Foundation.Data, _ type: Swift.String) -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaDCUniMediaPicker) @objcMembers public class DCUniMediaPicker : ObjectiveC.NSObject {
  @objc public func chooseImageWithCamera(_ option: DCloudUTSExtAPI.ChooseImageOptions)
  @objc public func chooseImageWithAlbum(_ option: DCloudUTSExtAPI.ChooseImageOptions, _ count: Foundation.NSNumber)
  @objc public func chooseVideoWithCamera(_ option: DCloudUTSExtAPI.ChooseVideoOptions)
  @objc public func chooseVideoWithAlbum(_ option: DCloudUTSExtAPI.ChooseVideoOptions)
  @objc public func compressImage(_ option: DCloudUTSExtAPI.CompressImageOptions)
  @objc public func getVideoInfo(_ option: DCloudUTSExtAPI.GetVideoInfoOptions)
  @objc public func compressVideo(_ option: DCloudUTSExtAPI.CompressVideoOptions)
  @objc override dynamic public init()
  @objc deinit
}
public var mediaPicker: DCloudUTSExtAPI.DCUniMediaPicker
public var chooseFile: (_ option: DCloudUTSExtAPI.ChooseFileOptions) -> Swift.Void
public var chooseImage: (_ option: DCloudUTSExtAPI.ChooseImageOptions) -> Swift.Void
public var chooseVideo: (_ option: DCloudUTSExtAPI.ChooseVideoOptions) -> Swift.Void
public var saveImageToPhotosAlbum: (_ options: DCloudUTSExtAPI.SaveImageToPhotosAlbumOptions) -> Swift.Void
public var saveVideoToPhotosAlbum: (_ options: DCloudUTSExtAPI.SaveVideoToPhotosAlbumOptions) -> Swift.Void
public var getImageInfo: (_ options: DCloudUTSExtAPI.GetImageInfoOptions) -> Swift.Void
public var getVideoInfo: (_ options: DCloudUTSExtAPI.GetVideoInfoOptions) -> Swift.Void
public var compressImage: (_ options: DCloudUTSExtAPI.CompressImageOptions) -> Swift.Void
public var compressVideo: (_ options: DCloudUTSExtAPI.CompressVideoOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseImageOptionsJSONObject) @objcMembers public class ChooseImageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseImagePageOrientation?
  @objc public var albumMode: DCloudUTSExtAPI.ChooseImageAlbumMode?
  @objc public var count: Foundation.NSNumber?
  @objc public var sizeType: [Swift.String]?
  @objc public var sourceType: [Swift.String]?
  @objc public var `extension`: [Swift.String]?
  @objc public var crop: DCloudUTSExtAPI.ChooseImageCropOptions?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetImageInfoOptionsJSONObject) @objcMembers public class GetImageInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var src: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.GetImageInfoCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveImageToPhotosAlbumOptionsJSONObject) @objcMembers public class SaveImageToPhotosAlbumOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.SaveImageToPhotosAlbumCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressImageOptionsJSONObject) @objcMembers public class CompressImageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var src: Swift.String!
  @objc public var quality: Foundation.NSNumber?
  @objc public var rotate: Foundation.NSNumber?
  @objc public var width: Swift.String?
  @objc public var height: Swift.String?
  @objc public var compressedHeight: Foundation.NSNumber?
  @objc public var compressedWidth: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.CompressImageCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseVideoOptionsJSONObject) @objcMembers public class ChooseVideoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseVideoPageOrientation?
  @objc public var albumMode: DCloudUTSExtAPI.ChooseVideoAlbumMode?
  @objc public var sourceType: [Swift.String]?
  @objc public var compressed: Swift.Bool
  @objc public var maxDuration: Foundation.NSNumber?
  @objc public var camera: Swift.String?
  @objc public var `extension`: [Swift.String]?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseVideoCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaGetVideoInfoOptionsJSONObject) @objcMembers public class GetVideoInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var src: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.GetVideoInfoCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaSaveVideoToPhotosAlbumOptionsJSONObject) @objcMembers public class SaveVideoToPhotosAlbumOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.SaveVideoToPhotosAlbumCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaCompressVideoOptionsJSONObject) @objcMembers public class CompressVideoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var src: Swift.String!
  @objc public var quality: Swift.String?
  @objc public var bitrate: Foundation.NSNumber?
  @objc public var fps: Foundation.NSNumber?
  @objc public var resolution: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.CompressVideoCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaChooseFileOptionsJSONObject) @objcMembers public class ChooseFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var count: Foundation.NSNumber?
  @objc public var type: Swift.String?
  @objc public var `extension`: [Swift.String]?
  @objc public var sizeType: Any?
  @objc public var sourceType: [Swift.String]?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func chooseFileByJs(_ options: DCloudUTSExtAPI.ChooseFileOptionsJSONObject)
public func chooseImageByJs(_ options: DCloudUTSExtAPI.ChooseImageOptionsJSONObject)
public func chooseVideoByJs(_ options: DCloudUTSExtAPI.ChooseVideoOptionsJSONObject)
public func saveImageToPhotosAlbumByJs(_ options: DCloudUTSExtAPI.SaveImageToPhotosAlbumOptionsJSONObject)
public func saveVideoToPhotosAlbumByJs(_ options: DCloudUTSExtAPI.SaveVideoToPhotosAlbumOptionsJSONObject)
public func getImageInfoByJs(_ options: DCloudUTSExtAPI.GetImageInfoOptionsJSONObject)
public func getVideoInfoByJs(_ options: DCloudUTSExtAPI.GetVideoInfoOptionsJSONObject)
public func compressImageByJs(_ options: DCloudUTSExtAPI.CompressImageOptionsJSONObject)
public func compressVideoByJs(_ options: DCloudUTSExtAPI.CompressVideoOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMediaIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniMediaIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_chooseFileByJs(_ options: DCloudUTSExtAPI.ChooseFileOptionsJSONObject)
  @objc public static func s_chooseImageByJs(_ options: DCloudUTSExtAPI.ChooseImageOptionsJSONObject)
  @objc public static func s_chooseVideoByJs(_ options: DCloudUTSExtAPI.ChooseVideoOptionsJSONObject)
  @objc public static func s_saveImageToPhotosAlbumByJs(_ options: DCloudUTSExtAPI.SaveImageToPhotosAlbumOptionsJSONObject)
  @objc public static func s_saveVideoToPhotosAlbumByJs(_ options: DCloudUTSExtAPI.SaveVideoToPhotosAlbumOptionsJSONObject)
  @objc public static func s_getImageInfoByJs(_ options: DCloudUTSExtAPI.GetImageInfoOptionsJSONObject)
  @objc public static func s_getVideoInfoByJs(_ options: DCloudUTSExtAPI.GetVideoInfoOptionsJSONObject)
  @objc public static func s_compressImageByJs(_ options: DCloudUTSExtAPI.CompressImageOptionsJSONObject)
  @objc public static func s_compressVideoByJs(_ options: DCloudUTSExtAPI.CompressVideoOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias handlerCallback = (DCloudUTSExtAPI.ChooseFileSuccess?, Foundation.NSNumber?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class UniChooseFileManager : ObjectiveC.NSObject, UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency public static let shared: DCloudUTSExtAPI.UniChooseFileManager
  @_Concurrency.MainActor @preconcurrency public func chooseFile(count: Foundation.NSNumber?, type: Swift.String?, extension: [Swift.String]?, sizeType: Any?, sourceType: [Swift.String]?, completionHandler: DCloudUTSExtAPI.handlerCallback? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor @preconcurrency @objc public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
public typealias ConnectSocket = (_ options: DCloudUTSExtAPI.ConnectSocketOptions) -> any DCloudUTSExtAPI.SocketTask
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketConnectSocketSuccess) @objcMembers public class ConnectSocketSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ConnectSocketSuccessCallback = (_ result: DCloudUTSExtAPI.ConnectSocketSuccess) -> Swift.Void
public typealias ConnectSocketErrorCode = Foundation.NSNumber
public protocol ConnectSocketFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ConnectSocketErrorCode { get set }
}
public typealias ConnectSocketFailCallback = (_ result: any DCloudUTSExtAPI.ConnectSocketFail) -> Swift.Void
public typealias ConnectSocketComplete = Any
public typealias ConnectSocketCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketConnectSocketOptions) @objcMembers public class ConnectSocketOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var protocols: [Swift.String]?
  @objc public var success: DCloudUTSExtAPI.ConnectSocketSuccessCallback?
  public var fail: DCloudUTSExtAPI.ConnectSocketFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ConnectSocketCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketGeneralCallbackResult) @objcMembers public class GeneralCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SendSocketMessageErrorCode = Foundation.NSNumber
public protocol SendSocketMessageFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.SendSocketMessageErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketSendSocketMessageOptions) @objcMembers public class SendSocketMessageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any!
  @objc public var success: ((_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SendSocketMessageFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketCloseSocketOptions) @objcMembers public class CloseSocketOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var reason: Swift.String?
  @objc public var success: ((_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)?
  @objc public var fail: ((_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)?
  @objc public var complete: ((_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketOnSocketOpenCallbackResult) @objcMembers public class OnSocketOpenCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var header: Any!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketOnSocketMessageCallbackResult) @objcMembers public class OnSocketMessageCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol SocketTask {
  func send(_ options: DCloudUTSExtAPI.SendSocketMessageOptions)
  func close(_ options: DCloudUTSExtAPI.CloseSocketOptions)
  func onOpen(_ callback: @escaping (_ result: DCloudUTSExtAPI.OnSocketOpenCallbackResult) -> Swift.Void)
  func onClose(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onError(_ callback: @escaping (_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)
  func onMessage(_ callback: @escaping (_ result: DCloudUTSExtAPI.OnSocketMessageCallbackResult) -> Swift.Void)
}
public typealias OnSocketOpenCallback = (_ result: DCloudUTSExtAPI.OnSocketOpenCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketOnSocketErrorCallbackResult) @objcMembers public class OnSocketErrorCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnSocketErrorCallback = (_ result: DCloudUTSExtAPI.OnSocketErrorCallbackResult) -> Swift.Void
public typealias SendSocketMessage = (_ options: DCloudUTSExtAPI.SendSocketMessageOptions) -> Swift.Void
public typealias OnSocketMessageCallback = (_ result: DCloudUTSExtAPI.OnSocketMessageCallbackResult) -> Swift.Void
public typealias CloseSocket = (_ options: DCloudUTSExtAPI.CloseSocketOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketOnSocketCloseCallbackResult) @objcMembers public class OnSocketCloseCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var code: Foundation.NSNumber!
  @objc public var reason: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnSocketCloseCallback = (_ result: DCloudUTSExtAPI.OnSocketCloseCallbackResult) -> Swift.Void
public var UniWebsocketErrorSubject: Swift.String
public var ConnectUniErrors: [DCloudUTSExtAPI.ConnectSocketErrorCode : Swift.String]
public var SendMessageUniErrors: [DCloudUTSExtAPI.SendSocketMessageErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniWebsocketConnectSocketFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniWebsocketConnectSocketFailImpl) public class ConnectSocketFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.ConnectSocketFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.ConnectSocketErrorCode)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniWebsocketSendSocketMessageFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniWebsocketSendSocketMessageFailImpl) public class SendSocketMessageFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.SendSocketMessageFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.SendSocketMessageErrorCode)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniWebsocketSimpleSocketTask) @objcMembers public class SimpleSocketTask : ObjectiveC.NSObject, DCloudUTSExtAPI.SocketTask {
  @objc public init(_ client: DCloudUTSExtAPI.WebsockerClient)
  @objc public func dispatchOpen(_ options: DCloudUTSExtAPI.OnSocketOpenCallbackResult)
  @objc public func dispatchClose(_ options: Any)
  @objc public func dispatchError(_ options: DCloudUTSExtAPI.GeneralCallbackResult)
  @objc public func dispatchMessage(_ options: DCloudUTSExtAPI.OnSocketMessageCallbackResult)
  @objc public func send(_ options: DCloudUTSExtAPI.SendSocketMessageOptions)
  @objc public func close(_ options: DCloudUTSExtAPI.CloseSocketOptions)
  @objc public func onOpen(_ callback: @escaping (_ result: DCloudUTSExtAPI.OnSocketOpenCallbackResult) -> Swift.Void)
  @objc public func onClose(_ callback: @escaping (_ result: Any) -> Swift.Void)
  @objc public func onError(_ callback: @escaping (_ result: DCloudUTSExtAPI.GeneralCallbackResult) -> Swift.Void)
  @objc public func onMessage(_ callback: @escaping (_ result: DCloudUTSExtAPI.OnSocketMessageCallbackResult) -> Swift.Void)
  @objc deinit
}
public protocol WebSocketManagerListener {
  func onOpen(_ client: DCloudUTSExtAPI.WebsockerClient, _ header: Any)
  func onMessage(_ client: DCloudUTSExtAPI.WebsockerClient, _ data: Any)
  func onClose(_ client: DCloudUTSExtAPI.WebsockerClient, _ code: Foundation.NSNumber, _ reason: Swift.String)
  func onError(_ client: DCloudUTSExtAPI.WebsockerClient, _ msg: Swift.String)
}
@objc(UTSSDKModulesDCloudUniWebsocketWebsockerClient) @objcMembers public class WebsockerClient : ObjectiveC.NSObject {
  public init(_ options: DCloudUTSExtAPI.ConnectSocketOptions, _ listener: any DCloudUTSExtAPI.WebSocketManagerListener)
  @objc public func connect()
  @objc public func send(_ options: DCloudUTSExtAPI.SendSocketMessageOptions)
  @objc public func close(_ options: DCloudUTSExtAPI.CloseSocketOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketWebSocketManager) @objcMembers public class WebSocketManager : ObjectiveC.NSObject, DCloudUTSExtAPI.WebSocketManagerListener {
  @objc public static func getInstance() -> DCloudUTSExtAPI.WebSocketManager
  public func connectSocket(_ options: DCloudUTSExtAPI.ConnectSocketOptions) -> any DCloudUTSExtAPI.SocketTask
  @objc public func sendSocketMessage(_ options: DCloudUTSExtAPI.SendSocketMessageOptions)
  @objc public func closeSocket(_ options: DCloudUTSExtAPI.CloseSocketOptions)
  @objc public func onSocketOpen(_ callback: @escaping DCloudUTSExtAPI.OnSocketOpenCallback)
  @objc public func onSocketError(_ callback: @escaping DCloudUTSExtAPI.OnSocketErrorCallback)
  @objc public func onSocketClose(_ callback: @escaping DCloudUTSExtAPI.OnSocketCloseCallback)
  @objc public func onSocketMessage(_ callback: @escaping DCloudUTSExtAPI.OnSocketMessageCallback)
  @objc public func getTaskWithClient(_ client: DCloudUTSExtAPI.WebsockerClient) -> DCloudUTSExtAPI.SimpleSocketTask?
  @objc public func onOpen(_ client: DCloudUTSExtAPI.WebsockerClient, _ header: Any)
  @objc public func onMessage(_ client: DCloudUTSExtAPI.WebsockerClient, _ data: Any)
  @objc public func onClose(_ client: DCloudUTSExtAPI.WebsockerClient, _ code: Foundation.NSNumber, _ reason: Swift.String)
  @objc public func onError(_ client: DCloudUTSExtAPI.WebsockerClient, _ msg: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketWebsocketDelegate) @objcMembers public class WebsocketDelegate : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniWebsocketRunnableTask) @objcMembers public class RunnableTask : ObjectiveC.NSObject {
  @objc public init(_ looper: Foundation.RunLoop?, _ callback: @escaping () -> Swift.Void)
  @objc public func execute()
  @objc deinit
}
public var connectSocket: (_ options: DCloudUTSExtAPI.ConnectSocketOptions) -> any DCloudUTSExtAPI.SocketTask
public var sendSocketMessage: (_ options: DCloudUTSExtAPI.SendSocketMessageOptions) -> Swift.Void
public var closeSocket: (_ options: DCloudUTSExtAPI.CloseSocketOptions) -> Swift.Void
public func onSocketOpen(_ callback: @escaping DCloudUTSExtAPI.OnSocketOpenCallback)
public func onSocketMessage(_ callback: @escaping DCloudUTSExtAPI.OnSocketMessageCallback)
public func onSocketClose(_ callback: @escaping DCloudUTSExtAPI.OnSocketCloseCallback)
public func onSocketError(_ callback: @escaping DCloudUTSExtAPI.OnSocketErrorCallback)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketConnectSocketOptionsJSONObject) @objcMembers public class ConnectSocketOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public var protocols: [Swift.String]?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketSendSocketMessageOptionsJSONObject) @objcMembers public class SendSocketMessageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: Any!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketCloseSocketOptionsJSONObject) @objcMembers public class CloseSocketOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSNumber?
  @objc public var reason: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func connectSocketByJs(_ options: DCloudUTSExtAPI.ConnectSocketOptionsJSONObject) -> Swift.Int
public func sendSocketMessageByJs(_ options: DCloudUTSExtAPI.SendSocketMessageOptionsJSONObject)
public func closeSocketByJs(_ options: DCloudUTSExtAPI.CloseSocketOptionsJSONObject)
public func onSocketOpenByJs(_ callback: DCloudUTSFoundation.UTSCallback)
public func onSocketMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback)
public func onSocketCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
public func onSocketErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
@objc(UTSSDKModulesDCloudUniWebsocketSocketTaskByJsProxy) @objcMembers public class SocketTaskByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.SocketTask
  public init(_ ins: any DCloudUTSExtAPI.SocketTask)
  @objc public func sendByJs(_ options: DCloudUTSExtAPI.SendSocketMessageOptionsJSONObject)
  @objc public func closeByJs(_ options: DCloudUTSExtAPI.CloseSocketOptionsJSONObject)
  @objc public func onOpenByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniWebsocketIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniWebsocketIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_connectSocketByJs(_ options: DCloudUTSExtAPI.ConnectSocketOptionsJSONObject) -> Swift.Int
  @objc public static func s_sendSocketMessageByJs(_ options: DCloudUTSExtAPI.SendSocketMessageOptionsJSONObject)
  @objc public static func s_closeSocketByJs(_ options: DCloudUTSExtAPI.CloseSocketOptionsJSONObject)
  @objc public static func s_onSocketOpenByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public static func s_onSocketMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public static func s_onSocketCloseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public static func s_onSocketErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc override dynamic public init()
  @objc deinit
}
public protocol SecureNetworkManager {
  func hasClientKey(_ options: DCloudUTSExtAPI.HasClientKeyOptions)
  func encryptGetClientKeyPayload(_ options: DCloudUTSExtAPI.EncryptGetClientKeyPayloadOptions)
  func setClientKey(_ options: DCloudUTSExtAPI.SetClientKeyOptions)
  func encrypt(_ options: DCloudUTSExtAPI.EncryptOptions)
  func decrypt(_ options: DCloudUTSExtAPI.DecryptOptions)
}
public typealias SecureNetworkErrorCode = Foundation.NSNumber
public protocol SecureNetworkFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.SecureNetworkErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkHasClientKeyOptions) @objcMembers public class HasClientKeyOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: ((_ result: Swift.Bool) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SecureNetworkFail) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkEncryptGetClientKeyPayloadOptions) @objcMembers public class EncryptGetClientKeyPayloadOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: DCloudUTSFoundation.UTSJSONObject!
  @objc public var success: ((_ result: DCloudUTSFoundation.UTSJSONObject) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SecureNetworkFail) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkSetClientKeyOptions) @objcMembers public class SetClientKeyOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var clientKey: Swift.String!
  @objc public var key: Swift.String!
  @objc public var success: ((_ result: Swift.Bool) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SecureNetworkFail) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkEncryptOptions) @objcMembers public class EncryptOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: ((_ result: DCloudUTSFoundation.UTSJSONObject) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SecureNetworkFail) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkDecryptOptions) @objcMembers public class DecryptOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public var key: Swift.String!
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: ((_ result: DCloudUTSFoundation.UTSJSONObject) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.SecureNetworkFail) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var SecureNetworkErrors: [DCloudUTSExtAPI.SecureNetworkErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniSecureNetworkSecureNetworkFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniSecureNetworkSecureNetworkFailImpl) public class SecureNetworkFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.SecureNetworkFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.SecureNetworkErrorCode)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkSecureNetworkManagerImpl) @objcMembers public class SecureNetworkManagerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.SecureNetworkManager {
  @objc public static func getInstance() -> DCloudUTSExtAPI.SecureNetworkManagerImpl
  @objc public func decrypt(_ options: DCloudUTSExtAPI.DecryptOptions)
  @objc public func encrypt(_ options: DCloudUTSExtAPI.EncryptOptions)
  @objc public func setClientKey(_ options: DCloudUTSExtAPI.SetClientKeyOptions)
  @objc public func encryptGetClientKeyPayload(_ options: DCloudUTSExtAPI.EncryptGetClientKeyPayloadOptions)
  @objc public func hasClientKey(_ options: DCloudUTSExtAPI.HasClientKeyOptions)
  @objc override dynamic public init()
  @objc deinit
}
public func __getSecureNetworkManager() -> any DCloudUTSExtAPI.SecureNetworkManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkHasClientKeyOptionsJSONObject) @objcMembers public class HasClientKeyOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkEncryptGetClientKeyPayloadOptionsJSONObject) @objcMembers public class EncryptGetClientKeyPayloadOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: DCloudUTSFoundation.UTSJSONObject!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkSetClientKeyOptionsJSONObject) @objcMembers public class SetClientKeyOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var clientKey: Swift.String!
  @objc public var key: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkEncryptOptionsJSONObject) @objcMembers public class EncryptOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: Swift.String!
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkDecryptOptionsJSONObject) @objcMembers public class DecryptOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: Swift.String!
  @objc public var key: Swift.String!
  @objc public var spaceId: Swift.String!
  @objc public var provider: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func __getSecureNetworkManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniSecureNetworkSecureNetworkManagerByJsProxy) @objcMembers public class SecureNetworkManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.SecureNetworkManager
  public init(_ ins: any DCloudUTSExtAPI.SecureNetworkManager)
  @objc public func hasClientKeyByJs(_ options: DCloudUTSExtAPI.HasClientKeyOptionsJSONObject)
  @objc public func encryptGetClientKeyPayloadByJs(_ options: DCloudUTSExtAPI.EncryptGetClientKeyPayloadOptionsJSONObject)
  @objc public func setClientKeyByJs(_ options: DCloudUTSExtAPI.SetClientKeyOptionsJSONObject)
  @objc public func encryptByJs(_ options: DCloudUTSExtAPI.EncryptOptionsJSONObject)
  @objc public func decryptByJs(_ options: DCloudUTSExtAPI.DecryptOptionsJSONObject)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSecureNetworkIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniSecureNetworkIndexSwift : ObjectiveC.NSObject {
  @objc public static func s___getSecureNetworkManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public typealias CreateWebviewContext = (_ webviewId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.WebviewContext)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCreateWebviewContextUniWebviewContextLoadDataOptions) @objcMembers public class UniWebviewContextLoadDataOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public var baseURL: Swift.String?
  @objc public var mimeType: Swift.String?
  @objc public var encoding: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol WebviewContext {
  func back()
  func forward()
  func reload()
  func stop()
  func evalJS(_ js: Swift.String)
  func loadData(_ options: DCloudUTSExtAPI.UniWebviewContextLoadDataOptions)
}
public var createWebviewContext: (_ webviewId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.WebviewContext)?
@objc(UTSSDKModulesDCloudUniCreateWebviewContextWebviewContextImpl) @objcMembers public class WebviewContextImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.WebviewContext {
  @objc public init(_ webviewElement: any DCloudUniappRuntime.UniWebViewElement)
  @objc public func back()
  @objc public func forward()
  @objc public func reload()
  @objc public func stop()
  @objc public func evalJS(_ js: Swift.String)
  @objc public func loadData(_ options: DCloudUTSExtAPI.UniWebviewContextLoadDataOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCreateWebviewContextUniWebviewContextLoadDataOptionsJSONObject) @objcMembers public class UniWebviewContextLoadDataOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: Swift.String!
  @objc public var baseURL: Swift.String?
  @objc public var mimeType: Swift.String?
  @objc public var encoding: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public func createWebviewContextByJs(_ webviewId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
@objc(UTSSDKModulesDCloudUniCreateWebviewContextWebviewContextByJsProxy) @objcMembers public class WebviewContextByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.WebviewContext
  public init(_ ins: any DCloudUTSExtAPI.WebviewContext)
  @objc public func backByJs()
  @objc public func forwardByJs()
  @objc public func reloadByJs()
  @objc public func stopByJs()
  @objc public func evalJSByJs(_ js: Swift.String)
  @objc public func loadDataByJs(_ options: DCloudUTSExtAPI.UniWebviewContextLoadDataOptionsJSONObject)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCreateWebviewContextIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniCreateWebviewContextIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_createWebviewContextByJs(_ webviewId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public typealias FacialRecognitionVerifyErrorCode = Foundation.NSNumber
public typealias StartFacialRecognitionVerifyScreenOrientation = Swift.String
public protocol IFacialRecognitionVerifyError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.FacialRecognitionVerifyErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFacialVerifyStartFacialRecognitionVerifySuccess) @objcMembers public class StartFacialRecognitionVerifySuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errCode: Foundation.NSNumber!
  @objc public var errSubject: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public var cause: DCloudUTSFoundation.SourceError?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias StartFacialRecognitionVerifySuccessCallback = (_ res: DCloudUTSExtAPI.StartFacialRecognitionVerifySuccess) -> Swift.Void
public typealias StartFacialRecognitionVerifyFailCallback = (_ res: any DCloudUTSExtAPI.IFacialRecognitionVerifyError) -> Swift.Void
public typealias StartFacialRecognitionVerifyCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFacialVerifyStartFacialRecognitionVerifyOptions) @objcMembers public class StartFacialRecognitionVerifyOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var certifyId: Swift.String!
  @objc public var progressBarColor: Swift.String?
  @objc public var screenOrientation: DCloudUTSExtAPI.StartFacialRecognitionVerifyScreenOrientation?
  @objc public var success: DCloudUTSExtAPI.StartFacialRecognitionVerifySuccessCallback?
  public var fail: DCloudUTSExtAPI.StartFacialRecognitionVerifyFailCallback?
  @objc public var complete: DCloudUTSExtAPI.StartFacialRecognitionVerifyCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetFacialRecognitionMetaInfo = () -> Swift.String
public typealias StartFacialRecognitionVerify = (_ faceStyle: DCloudUTSExtAPI.StartFacialRecognitionVerifyOptions) -> Swift.Void
public var UniError_StartFacialRecognitionVerify: Swift.String
public var FacialRecognitionVerifyUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniFacialVerifyFacialRecognitionVerifyErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniFacialVerifyFacialRecognitionVerifyErrorImpl) public class FacialRecognitionVerifyErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IFacialRecognitionVerifyError {
  @objc public init(_ errCode: DCloudUTSExtAPI.FacialRecognitionVerifyErrorCode, _ causeError: DCloudUTSFoundation.SourceError?)
  @objc deinit
}
public var isLoadService: Swift.Bool
public var faceAuth: DCloudUTSExtAPI.FacialRecognition
public var startFacialRecognitionVerify: (_ faceStyle: DCloudUTSExtAPI.StartFacialRecognitionVerifyOptions) -> Swift.Void
public var getFacialRecognitionMetaInfo: () -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFacialVerifyFacialRecognition) @objcMembers public class FacialRecognition : ObjectiveC.NSObject {
  @objc public func initSDK()
  @objc public func startVerify(_ options: DCloudUTSExtAPI.StartFacialRecognitionVerifyOptions)
  @objc public func getMetaInfo() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFacialVerifyStartFacialRecognitionVerifyOptionsJSONObject) @objcMembers public class StartFacialRecognitionVerifyOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var certifyId: Swift.String!
  @objc public var progressBarColor: Swift.String?
  @objc public var screenOrientation: DCloudUTSExtAPI.StartFacialRecognitionVerifyScreenOrientation?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func startFacialRecognitionVerifyByJs(_ faceStyle: DCloudUTSExtAPI.StartFacialRecognitionVerifyOptionsJSONObject)
public func getFacialRecognitionMetaInfoByJs() -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFacialVerifyIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniFacialVerifyIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_startFacialRecognitionVerifyByJs(_ faceStyle: DCloudUTSExtAPI.StartFacialRecognitionVerifyOptionsJSONObject)
  @objc public static func s_getFacialRecognitionMetaInfoByJs() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadFileSuccessResult) @objcMembers public class ReadFileSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerOpenFileSuccessResult) @objcMembers public class OpenFileSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFileManagerSuccessResult) @objcMembers public class FileManagerSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias FileManagerSuccessCallback = (_ res: DCloudUTSExtAPI.FileManagerSuccessResult) -> Swift.Void
public typealias FileManagerFailCallback = (_ res: any DCloudUTSExtAPI.IFileSystemManagerFail) -> Swift.Void
public typealias FileManagerCompleteCallback = (_ res: Any) -> Swift.Void
public typealias ReadFileSuccessCallback = (_ res: DCloudUTSExtAPI.ReadFileSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadFileOptions) @objcMembers public class ReadFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var encoding: Swift.String?
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.ReadFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteFileOptions) @objcMembers public class WriteFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var data: Any!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerAppendFileOptions) @objcMembers public class AppendFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var data: Any!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenFileSuccessCallback = (_ res: DCloudUTSExtAPI.OpenFileSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerOpenFileOptions) @objcMembers public class OpenFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var flag: Swift.String!
  @objc public var success: DCloudUTSExtAPI.OpenFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerOpenFileSyncOptions) @objcMembers public class OpenFileSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var flag: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UnLinkSuccessCallback = (_ res: DCloudUTSExtAPI.FileManagerSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerUnLinkOptions) @objcMembers public class UnLinkOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.UnLinkSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias MkDirSuccessCallback = (_ res: DCloudUTSExtAPI.FileManagerSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerMkDirOptions) @objcMembers public class MkDirOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var dirPath: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.MkDirSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRmDirOptions) @objcMembers public class RmDirOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var dirPath: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.MkDirSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadDirSuccessResult) @objcMembers public class ReadDirSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var files: [Swift.String]!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ReadDirSuccessCallback = (_ res: DCloudUTSExtAPI.ReadDirSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadDirOptions) @objcMembers public class ReadDirOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var dirPath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.ReadDirSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerAccessOptions) @objcMembers public class AccessOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRenameOptions) @objcMembers public class RenameOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var oldPath: Swift.String!
  @objc public var newPath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCopyFileOptions) @objcMembers public class CopyFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var srcPath: Swift.String!
  @objc public var destPath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerSaveFileOptions) @objcMembers public class SaveFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var filePath: Swift.String?
  @objc public var success: DCloudUTSExtAPI.SaveFileSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SaveFileSuccessCallback = (_ res: DCloudUTSExtAPI.SaveFileSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerSaveFileSuccessResult) @objcMembers public class SaveFileSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var savedFilePath: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetFileInfoSuccessResult) @objcMembers public class GetFileInfoSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var digest: Swift.String!
  @objc public var size: Foundation.NSNumber!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetFileInfoSuccessCallback = (_ res: DCloudUTSExtAPI.GetFileInfoSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetFileInfoOptions) @objcMembers public class GetFileInfoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var digestAlgorithm: Swift.String?
  @objc public var success: DCloudUTSExtAPI.GetFileInfoSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@objc public protocol Stats : JavaScriptCore.JSExport {
  @objc var mode: Foundation.NSNumber { get set }
  @objc var size: Foundation.NSNumber { get set }
  @objc var lastAccessedTime: Foundation.NSNumber { get set }
  @objc var lastModifiedTime: Foundation.NSNumber { get set }
  @objc var mIsFile: Swift.Bool { get set }
  @objc func isDirectory() -> Swift.Bool
  @objc func isFile() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFileStats) @objcMembers public class FileStats : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public var stats: (any DCloudUTSExtAPI.Stats)!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerStatSuccessResult) @objcMembers public class StatSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public var stats: [DCloudUTSExtAPI.FileStats]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias StatSuccessCallback = (_ res: DCloudUTSExtAPI.StatSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerStatOptions) @objcMembers public class StatOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.StatSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerUnzipFileOptions) @objcMembers public class UnzipFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var zipFilePath: Swift.String!
  @objc public var targetPath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetSavedFileListResult) @objcMembers public class GetSavedFileListResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fileList: [Swift.String]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetSavedFileListCallback = (_ res: DCloudUTSExtAPI.GetSavedFileListResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetSavedFileListOptions) @objcMembers public class GetSavedFileListOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetSavedFileListCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerTruncateFileOptions) @objcMembers public class TruncateFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadCompressedFileResult) @objcMembers public class ReadCompressedFileResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ReadCompressedFileCallback = (_ res: DCloudUTSExtAPI.ReadCompressedFileResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadCompressedFileOptions) @objcMembers public class ReadCompressedFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var compressionAlgorithm: Swift.String!
  @objc public var success: DCloudUTSExtAPI.ReadCompressedFileCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRemoveSavedFileOptions) @objcMembers public class RemoveSavedFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteResult) @objcMembers public class WriteResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var bytesWritten: Foundation.NSNumber!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias WriteCallback = (_ res: DCloudUTSExtAPI.WriteResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteOptions) @objcMembers public class WriteOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var data: Any!
  @objc public var offset: Foundation.NSNumber?
  @objc public var length: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public var encoding: Swift.String?
  @objc public var success: DCloudUTSExtAPI.WriteCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteSyncOptions) @objcMembers public class WriteSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var data: Any!
  @objc public var encoding: Swift.String?
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCloseOptions) @objcMembers public class CloseOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCloseSyncOptions) @objcMembers public class CloseSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFStatSuccessResult) @objcMembers public class FStatSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var stats: (any DCloudUTSExtAPI.Stats)!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias FStatSuccessCallback = (_ res: DCloudUTSExtAPI.FStatSuccessResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFStatOptions) @objcMembers public class FStatOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var success: DCloudUTSExtAPI.FStatSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFStatSyncOptions) @objcMembers public class FStatSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFTruncateFileOptions) @objcMembers public class FTruncateFileOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc public var success: DCloudUTSExtAPI.FileManagerSuccessCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFTruncateFileSyncOptions) @objcMembers public class FTruncateFileSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerEntryItem) @objcMembers public class EntryItem : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var path: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerEntriesResult) @objcMembers public class EntriesResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var entries: Swift.Dictionary<Swift.String, DCloudUTSExtAPI.ZipFileItem>!
  @objc public var result: Swift.Dictionary<Swift.String, DCloudUTSExtAPI.ZipFileItem>!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerZipFileItem) @objcMembers public class ZipFileItem : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any?
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ReadZipEntryCallback = (_ res: DCloudUTSExtAPI.EntriesResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadZipEntryOptions) @objcMembers public class ReadZipEntryOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var entries: [DCloudUTSExtAPI.EntryItem]?
  @objc public var success: DCloudUTSExtAPI.ReadZipEntryCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadSuccessCallbackResult) @objcMembers public class ReadSuccessCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var bytesRead: Foundation.NSNumber!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ReadSuccessCallback = (_ result: DCloudUTSExtAPI.ReadSuccessCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadOption) @objcMembers public class ReadOption : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public var complete: DCloudUTSExtAPI.FileManagerCompleteCallback?
  public var fail: DCloudUTSExtAPI.FileManagerFailCallback?
  @objc public var success: DCloudUTSExtAPI.ReadSuccessCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadSyncOption) @objcMembers public class ReadSyncOption : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadResult) @objcMembers public class ReadResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var bytesRead: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol FileSystemManager {
  func access(_ options: DCloudUTSExtAPI.AccessOptions)
  func accessSync(_ path: Swift.String)
  func appendFile(_ options: DCloudUTSExtAPI.AppendFileOptions)
  func appendFileSync(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  func close(_ options: DCloudUTSExtAPI.CloseOptions)
  func closeSync(_ options: DCloudUTSExtAPI.CloseSyncOptions)
  func copyFile(_ options: DCloudUTSExtAPI.CopyFileOptions)
  func copyFileSync(_ srcPath: Swift.String, _ destPath: Swift.String)
  func fstat(_ options: DCloudUTSExtAPI.FStatOptions)
  func fstatSync(_ options: DCloudUTSExtAPI.FStatSyncOptions) -> any DCloudUTSExtAPI.Stats
  func ftruncate(_ options: DCloudUTSExtAPI.FTruncateFileOptions)
  func ftruncateSync(_ options: DCloudUTSExtAPI.FTruncateFileSyncOptions)
  func getFileInfo(_ options: DCloudUTSExtAPI.GetFileInfoOptions)
  func getSavedFileList(_ options: DCloudUTSExtAPI.GetSavedFileListOptions)
  func mkdir(_ options: DCloudUTSExtAPI.MkDirOptions)
  func mkdirSync(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  func open(_ options: DCloudUTSExtAPI.OpenFileOptions)
  func openSync(_ options: DCloudUTSExtAPI.OpenFileSyncOptions) -> Swift.String
  func readFile(_ options: DCloudUTSExtAPI.ReadFileOptions)
  func readFileSync(_ filePath: Swift.String, _ encoding: Swift.String?) -> Any
  func read(_ option: DCloudUTSExtAPI.ReadOption)
  func readSync(_ option: DCloudUTSExtAPI.ReadSyncOption) -> DCloudUTSExtAPI.ReadResult
  func readdir(_ options: DCloudUTSExtAPI.ReadDirOptions)
  func readdirSync(_ dirPath: Swift.String) -> [Swift.String]?
  func readZipEntry(_ options: DCloudUTSExtAPI.ReadZipEntryOptions)
  func rmdir(_ options: DCloudUTSExtAPI.RmDirOptions)
  func rmdirSync(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  func rename(_ options: DCloudUTSExtAPI.RenameOptions)
  func renameSync(_ oldPath: Swift.String, _ newPath: Swift.String)
  func removeSavedFile(_ options: DCloudUTSExtAPI.RemoveSavedFileOptions)
  func readCompressedFile(_ options: DCloudUTSExtAPI.ReadCompressedFileOptions)
  func readCompressedFileSync(_ filePath: Swift.String, _ compressionAlgorithm: Swift.String) -> Swift.String
  func saveFile(_ options: DCloudUTSExtAPI.SaveFileOptions)
  func saveFileSync(_ tempFilePath: Swift.String, _ filePath: Swift.String?) -> Swift.String
  func stat(_ options: DCloudUTSExtAPI.StatOptions)
  func statSync(_ path: Swift.String, _ recursive: Swift.Bool) -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
  func truncate(_ options: DCloudUTSExtAPI.TruncateFileOptions)
  func truncateSync(_ filePath: Swift.String, _ length: Foundation.NSNumber?)
  func unlink(_ options: DCloudUTSExtAPI.UnLinkOptions)
  func unlinkSync(_ filePath: Swift.String)
  func unzip(_ options: DCloudUTSExtAPI.UnzipFileOptions)
  func writeFile(_ options: DCloudUTSExtAPI.WriteFileOptions)
  func writeFileSync(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  func write(_ options: DCloudUTSExtAPI.WriteOptions)
  func writeSync(_ options: DCloudUTSExtAPI.WriteSyncOptions) -> DCloudUTSExtAPI.WriteResult
}
public typealias GetFileSystemManager = () -> any DCloudUTSExtAPI.FileSystemManager
public typealias FileSystemManagerErrorCode = Foundation.NSNumber
public typealias FileSystemManagerFail = DCloudUTSExtAPI.IFileSystemManagerFail
public protocol IFileSystemManagerFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.FileSystemManagerErrorCode { get set }
}
public var FileSystemManagerUniErrorSubject: Swift.String
public var FileSystemManagerUniErrors: [DCloudUTSExtAPI.FileSystemManagerErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniFileSystemManagerFileSystemManagerFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniFileSystemManagerFileSystemManagerFailImpl) public class FileSystemManagerFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IFileSystemManagerFail {
  @objc override public var errCode: DCloudUTSExtAPI.FileSystemManagerErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errCode: DCloudUTSExtAPI.FileSystemManagerErrorCode)
  @objc deinit
}
public var getFileSystemManager: () -> any DCloudUTSExtAPI.FileSystemManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerInnerFileSystemManager) @objcMembers public class InnerFileSystemManager : ObjectiveC.NSObject, DCloudUTSExtAPI.FileSystemManager {
  @objc public func readFile(_ options: DCloudUTSExtAPI.ReadFileOptions)
  @objc public func writeFile(_ options: DCloudUTSExtAPI.WriteFileOptions)
  @objc public func unlink(_ options: DCloudUTSExtAPI.UnLinkOptions)
  @objc public func mkdir(_ options: DCloudUTSExtAPI.MkDirOptions)
  @objc public func rmdir(_ options: DCloudUTSExtAPI.RmDirOptions)
  @objc public func readdir(_ options: DCloudUTSExtAPI.ReadDirOptions)
  @objc public func access(_ options: DCloudUTSExtAPI.AccessOptions)
  @objc public func rename(_ options: DCloudUTSExtAPI.RenameOptions)
  @objc public func copyFile(_ options: DCloudUTSExtAPI.CopyFileOptions)
  @objc public func getFileInfo(_ options: DCloudUTSExtAPI.GetFileInfoOptions)
  @objc public func stat(_ options: DCloudUTSExtAPI.StatOptions)
  @objc public func appendFile(_ options: DCloudUTSExtAPI.AppendFileOptions)
  @objc public func saveFile(_ options: DCloudUTSExtAPI.SaveFileOptions)
  @objc public func removeSavedFile(_ options: DCloudUTSExtAPI.RemoveSavedFileOptions)
  @objc public func unzip(_ options: DCloudUTSExtAPI.UnzipFileOptions)
  @objc public func getSavedFileList(_ options: DCloudUTSExtAPI.GetSavedFileListOptions)
  @objc public func truncate(_ options: DCloudUTSExtAPI.TruncateFileOptions)
  @objc public func readCompressedFile(_ options: DCloudUTSExtAPI.ReadCompressedFileOptions)
  @objc public func open(_ options: DCloudUTSExtAPI.OpenFileOptions)
  @objc public func close(_ options: DCloudUTSExtAPI.CloseOptions)
  @objc public func fstat(_ options: DCloudUTSExtAPI.FStatOptions)
  @objc public func ftruncate(_ options: DCloudUTSExtAPI.FTruncateFileOptions)
  @objc public func readZipEntry(_ options: DCloudUTSExtAPI.ReadZipEntryOptions)
  @objc public func write(_ options: DCloudUTSExtAPI.WriteOptions)
  @objc public func writeSync(_ options: DCloudUTSExtAPI.WriteSyncOptions) -> DCloudUTSExtAPI.WriteResult
  @objc public func read(_ option: DCloudUTSExtAPI.ReadOption)
  @objc public func readSync(_ option: DCloudUTSExtAPI.ReadSyncOption) -> DCloudUTSExtAPI.ReadResult
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadFileOptionsJSONObject) @objcMembers public class ReadFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var encoding: Swift.String?
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteFileOptionsJSONObject) @objcMembers public class WriteFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var data: Any!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerAppendFileOptionsJSONObject) @objcMembers public class AppendFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var data: Any!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerOpenFileOptionsJSONObject) @objcMembers public class OpenFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var flag: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerOpenFileSyncOptionsJSONObject) @objcMembers public class OpenFileSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var flag: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerUnLinkOptionsJSONObject) @objcMembers public class UnLinkOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerMkDirOptionsJSONObject) @objcMembers public class MkDirOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var dirPath: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRmDirOptionsJSONObject) @objcMembers public class RmDirOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var dirPath: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadDirOptionsJSONObject) @objcMembers public class ReadDirOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var dirPath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerAccessOptionsJSONObject) @objcMembers public class AccessOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var path: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRenameOptionsJSONObject) @objcMembers public class RenameOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var oldPath: Swift.String!
  @objc public var newPath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCopyFileOptionsJSONObject) @objcMembers public class CopyFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var srcPath: Swift.String!
  @objc public var destPath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerSaveFileOptionsJSONObject) @objcMembers public class SaveFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var filePath: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetFileInfoOptionsJSONObject) @objcMembers public class GetFileInfoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var digestAlgorithm: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerStatOptionsJSONObject) @objcMembers public class StatOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var path: Swift.String!
  @objc public var recursive: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerUnzipFileOptionsJSONObject) @objcMembers public class UnzipFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var zipFilePath: Swift.String!
  @objc public var targetPath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerGetSavedFileListOptionsJSONObject) @objcMembers public class GetSavedFileListOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerTruncateFileOptionsJSONObject) @objcMembers public class TruncateFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadCompressedFileOptionsJSONObject) @objcMembers public class ReadCompressedFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var compressionAlgorithm: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerRemoveSavedFileOptionsJSONObject) @objcMembers public class RemoveSavedFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteOptionsJSONObject) @objcMembers public class WriteOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var data: Any!
  @objc public var offset: Foundation.NSNumber?
  @objc public var length: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public var encoding: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerWriteSyncOptionsJSONObject) @objcMembers public class WriteSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var data: Any!
  @objc public var encoding: Swift.String?
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCloseOptionsJSONObject) @objcMembers public class CloseOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerCloseSyncOptionsJSONObject) @objcMembers public class CloseSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFStatOptionsJSONObject) @objcMembers public class FStatOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFStatSyncOptionsJSONObject) @objcMembers public class FStatSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFTruncateFileOptionsJSONObject) @objcMembers public class FTruncateFileOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFTruncateFileSyncOptionsJSONObject) @objcMembers public class FTruncateFileSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadZipEntryOptionsJSONObject) @objcMembers public class ReadZipEntryOptionsJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var filePath: Swift.String!
  @objc public var encoding: Swift.String?
  @objc public var entries: [DCloudUTSExtAPI.EntryItem]?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadOptionJSONObject) @objcMembers public class ReadOptionJSONObject : ObjectiveC.NSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerReadSyncOptionJSONObject) @objcMembers public class ReadSyncOptionJSONObject : ObjectiveC.NSObject {
  @objc public var arrayBuffer: DCloudUTSFoundation.ArrayBuffer!
  @objc public var fd: Swift.String!
  @objc public var length: Foundation.NSNumber?
  @objc public var offset: Foundation.NSNumber?
  @objc public var position: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerFileSystemManagerFailImplByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniFileSystemManagerFileSystemManagerFailImplByJs) public class FileSystemManagerFailImplByJs : DCloudUTSExtAPI.FileSystemManagerFailImpl {
  @objc override public init(_ errCode: DCloudUTSExtAPI.FileSystemManagerErrorCode)
  @objc deinit
}
public func getFileSystemManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniFileSystemManagerFileSystemManagerByJsProxy) @objcMembers public class FileSystemManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.FileSystemManager
  public init(_ ins: any DCloudUTSExtAPI.FileSystemManager)
  @objc public func accessByJs(_ options: DCloudUTSExtAPI.AccessOptionsJSONObject)
  @objc public func accessSyncByJs(_ path: Swift.String)
  @objc public func appendFileByJs(_ options: DCloudUTSExtAPI.AppendFileOptionsJSONObject)
  @objc public func appendFileSyncByJs(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  @objc public func closeByJs(_ options: DCloudUTSExtAPI.CloseOptionsJSONObject)
  @objc public func closeSyncByJs(_ options: DCloudUTSExtAPI.CloseSyncOptionsJSONObject)
  @objc public func copyFileByJs(_ options: DCloudUTSExtAPI.CopyFileOptionsJSONObject)
  @objc public func copyFileSyncByJs(_ srcPath: Swift.String, _ destPath: Swift.String)
  @objc public func fstatByJs(_ options: DCloudUTSExtAPI.FStatOptionsJSONObject)
  @objc public func fstatSyncByJs(_ options: DCloudUTSExtAPI.FStatSyncOptionsJSONObject) -> Swift.Int
  @objc public func ftruncateByJs(_ options: DCloudUTSExtAPI.FTruncateFileOptionsJSONObject)
  @objc public func ftruncateSyncByJs(_ options: DCloudUTSExtAPI.FTruncateFileSyncOptionsJSONObject)
  @objc public func getFileInfoByJs(_ options: DCloudUTSExtAPI.GetFileInfoOptionsJSONObject)
  @objc public func getSavedFileListByJs(_ options: DCloudUTSExtAPI.GetSavedFileListOptionsJSONObject)
  @objc public func mkdirByJs(_ options: DCloudUTSExtAPI.MkDirOptionsJSONObject)
  @objc public func mkdirSyncByJs(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  @objc public func openByJs(_ options: DCloudUTSExtAPI.OpenFileOptionsJSONObject)
  @objc public func openSyncByJs(_ options: DCloudUTSExtAPI.OpenFileSyncOptionsJSONObject) -> Swift.String
  @objc public func readFileByJs(_ options: DCloudUTSExtAPI.ReadFileOptionsJSONObject)
  @objc public func readFileSyncByJs(_ filePath: Swift.String, _ encoding: Swift.String?) -> Any
  @objc public func readByJs(_ option: DCloudUTSExtAPI.ReadOptionJSONObject)
  @objc public func readSyncByJs(_ option: DCloudUTSExtAPI.ReadSyncOptionJSONObject) -> DCloudUTSExtAPI.ReadResult
  @objc public func readdirByJs(_ options: DCloudUTSExtAPI.ReadDirOptionsJSONObject)
  @objc public func readdirSyncByJs(_ dirPath: Swift.String) -> [Swift.String]?
  @objc public func readZipEntryByJs(_ options: DCloudUTSExtAPI.ReadZipEntryOptionsJSONObject)
  @objc public func rmdirByJs(_ options: DCloudUTSExtAPI.RmDirOptionsJSONObject)
  @objc public func rmdirSyncByJs(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  @objc public func renameByJs(_ options: DCloudUTSExtAPI.RenameOptionsJSONObject)
  @objc public func renameSyncByJs(_ oldPath: Swift.String, _ newPath: Swift.String)
  @objc public func removeSavedFileByJs(_ options: DCloudUTSExtAPI.RemoveSavedFileOptionsJSONObject)
  @objc public func readCompressedFileByJs(_ options: DCloudUTSExtAPI.ReadCompressedFileOptionsJSONObject)
  @objc public func readCompressedFileSyncByJs(_ filePath: Swift.String, _ compressionAlgorithm: Swift.String) -> Swift.String
  @objc public func saveFileByJs(_ options: DCloudUTSExtAPI.SaveFileOptionsJSONObject)
  @objc public func saveFileSyncByJs(_ tempFilePath: Swift.String, _ filePath: Swift.String?) -> Swift.String
  @objc public func statByJs(_ options: DCloudUTSExtAPI.StatOptionsJSONObject)
  @objc public func statSyncByJs(_ path: Swift.String, _ recursive: Swift.Bool) -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
  @objc public func truncateByJs(_ options: DCloudUTSExtAPI.TruncateFileOptionsJSONObject)
  @objc public func truncateSyncByJs(_ filePath: Swift.String, _ length: Foundation.NSNumber?)
  @objc public func unlinkByJs(_ options: DCloudUTSExtAPI.UnLinkOptionsJSONObject)
  @objc public func unlinkSyncByJs(_ filePath: Swift.String)
  @objc public func unzipByJs(_ options: DCloudUTSExtAPI.UnzipFileOptionsJSONObject)
  @objc public func writeFileByJs(_ options: DCloudUTSExtAPI.WriteFileOptionsJSONObject)
  @objc public func writeFileSyncByJs(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  @objc public func writeByJs(_ options: DCloudUTSExtAPI.WriteOptionsJSONObject)
  @objc public func writeSyncByJs(_ options: DCloudUTSExtAPI.WriteSyncOptionsJSONObject) -> DCloudUTSExtAPI.WriteResult
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniFileSystemManagerStatsByJsProxy) @objcMembers public class StatsByJsProxy : ObjectiveC.NSObject {
  @objc public var __instance: any DCloudUTSExtAPI.Stats
  @objc public init(_ ins: any DCloudUTSExtAPI.Stats)
  @objc public var mode: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var size: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var lastAccessedTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var lastModifiedTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var mIsFile: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public func isDirectoryByJs() -> Swift.Bool
  @objc public func isFileByJs() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniFileSystemManagerIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniFileSystemManagerIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getFileSystemManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSExtAPI.InnerFileSystemManager {
  public func toValue<T>(_ value: Any, as type: T.Type) -> T?
  public func failedAction(_ errorCode: Foundation.NSNumber, errMsg: Swift.String? = nil) -> DCloudUTSExtAPI.FileSystemManagerFailImpl
  @objc dynamic public func getErrorMessage(name: Swift.String, errorCode: Foundation.NSNumber, description: Swift.String) -> Swift.String
}
extension DCloudUTSExtAPI.InnerFileSystemManager {
  @objc dynamic public func readFileSync(_ filePath: Swift.String, _ encoding: Swift.String?) -> Any
  @objc dynamic public func writeFileSync(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  @objc dynamic public func unlinkSync(_ filePath: Swift.String)
  @objc dynamic public func mkdirSync(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  @objc dynamic public func rmdirSync(_ dirPath: Swift.String, _ recursive: Swift.Bool)
  @objc dynamic public func readdirSync(_ dirPath: Swift.String) -> [Swift.String]?
  @objc dynamic public func accessSync(_ path: Swift.String)
  @objc dynamic public func renameSync(_ oldPath: Swift.String, _ newPath: Swift.String)
  @objc dynamic public func copyFileSync(_ srcPath: Swift.String, _ destPath: Swift.String)
  @objc dynamic public func statSync(_ path: Swift.String, _ recursive: Swift.Bool) -> Swift.Array<Swift.Dictionary<Swift.String, Any>>
  @objc dynamic public func appendFileSync(_ filePath: Swift.String, _ data: Any, _ encoding: Swift.String?)
  @objc dynamic public func saveFileSync(_ tempFilePath: Swift.String, _ filePath: Swift.String?) -> Swift.String
  @objc dynamic public func truncateSync(_ filePath: Swift.String, _ length: Foundation.NSNumber?)
  @objc dynamic public func readCompressedFileSync(_ filePath: Swift.String, _ compressionAlgorithm: Swift.String) -> Swift.String
  @objc dynamic public func openSync(_ options: DCloudUTSExtAPI.OpenFileSyncOptions) -> Swift.String
  @objc dynamic public func closeSync(_ options: DCloudUTSExtAPI.CloseSyncOptions)
  @objc dynamic public func fstatSync(_ options: DCloudUTSExtAPI.FStatSyncOptions) -> any DCloudUTSExtAPI.Stats
  @objc dynamic public func ftruncateSync(_ options: DCloudUTSExtAPI.FTruncateFileSyncOptions)
  @objc dynamic public func innerReadSync(_ options: DCloudUTSExtAPI.ReadSyncOption) -> Foundation.NSNumber?
  @objc dynamic public func innerWriteSync(_ options: DCloudUTSExtAPI.WriteSyncOptions) -> Foundation.NSNumber?
}
public enum UniFileSystemManagerFlag : Swift.Int {
  case a
  case aplus
  case ax
  case axplus
  case `as`
  case asplus
  case r
  case rplus
  case w
  case wplus
  case wx
  case wxplus
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UniFilePermission : Swift.Int {
  case readOnly
  case writeOnly
  case readWrite
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class UniFileOpenOptions : ObjectiveC.NSObject {
  final public let rawValue: Swift.Int32
  public static let create: DCloudUTSExtAPI.UniFileOpenOptions
  public static let exclusive: DCloudUTSExtAPI.UniFileOpenOptions
  public static let truncate: DCloudUTSExtAPI.UniFileOpenOptions
  public static let append: DCloudUTSExtAPI.UniFileOpenOptions
  public static let sync: DCloudUTSExtAPI.UniFileOpenOptions
  public static let dsync: DCloudUTSExtAPI.UniFileOpenOptions
  public init(rawValue: Swift.Int32)
  public class func combine(options: [DCloudUTSExtAPI.UniFileOpenOptions]) -> DCloudUTSExtAPI.UniFileOpenOptions
  public func contains(option: DCloudUTSExtAPI.UniFileOpenOptions) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UniFileSystemManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum UniFileEncoding : Swift.String {
  case base64
  case utf8
  case ascii
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UniFileSystemManagerError : Swift.Error, Swift.Equatable {
  public static func == (lhs: DCloudUTSExtAPI.UniFileSystemManagerError, rhs: DCloudUTSExtAPI.UniFileSystemManagerError) -> Swift.Bool
  case argumentInvalid
  case encodingNotSupport
  case encodingFailed
  case fileNotFound
  case fileNameTooLong
  case failedRemove
  case notDirectory
  case isDirectory
  case permissionDenied
  case directoryNotEmpty
  case systemError
  case alreadyExist
  case busy
  case readOnly
  case illegalOperation
  case outOfSpace
  case outOfMemory
  case badAddress
  case tooLarge
  case brotli_failed
  case unzip_UnableToOpen
  case unzip_EntryFailed((any Swift.Error)?)
  case unzip_Failed
  case invalidFlag
  case badFileDescriptor
  case unknownError
  case navtiveError((any Swift.Error)?)
  public var nativeErrorDescription: Swift.String? {
    get
  }
  public static func from(originalError: Foundation.NSError) -> DCloudUTSExtAPI.UniFileSystemManagerError
  public static func from(errno: Swift.Int32) -> DCloudUTSExtAPI.UniFileSystemManagerError
  public var errorCode: Foundation.NSNumber {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension DCloudUTSExtAPI.UniFileSystemManager {
  public typealias fileStatsArrayCallback = ([DCloudUTSExtAPI.FileStats]?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias fileInfoCallback = (DCloudUTSExtAPI.GetFileInfoSuccessResult?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias anyCallback = (Any?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias boolCallback = (Swift.Bool, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias intCallback = (Swift.Int32?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias stringCallback = (Swift.String?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public typealias stringArrayCallback = ([Swift.String]?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void
  public static func readFile(encoding: Swift.String? = nil, path: Swift.String, chunkSize: Swift.Int = 1024 * 256, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.anyCallback? = nil)
  public static func readFileSync(_ filePath: Swift.String, _ encoding: Swift.String?) -> (Any?, DCloudUTSExtAPI.UniFileSystemManagerError?)
  public static func writeFile(encoding: Swift.String? = nil, path: Swift.String, data: Any!, chunkSize: Swift.Int = 1024 * 256, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func removeFile(filePath: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  @objc @discardableResult
  public static func creatFile(_ path: Swift.String) -> Swift.Bool
  public static func createDirectory(path: Swift.String, recursive: Swift.Bool, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  @objc @discardableResult
  public static func createDirectorySync(_ dirPath: Swift.String, _ recursive: Swift.Bool) -> Swift.Bool
  public static func removeDirectory(filePath: Swift.String, recursive: Swift.Bool, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  @discardableResult
  public static func removeDirectorySync(_ dirPath: Swift.String, _ recursive: Swift.Bool) -> (Swift.Bool, DCloudUTSExtAPI.UniFileSystemManagerError?)
  public static func readDirectoryListSync(_ path: Swift.String) -> ([Swift.String]?, DCloudUTSExtAPI.UniFileSystemManagerError?)
  public static func readDirectoryList(_ path: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.stringArrayCallback? = nil)
  public static func rename(oldPath: Swift.String, newPath: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func copyFile(srcPath: Swift.String, destPath: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func getFileInfo(filePath: Swift.String, digestAlgorithm: Swift.String?, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.fileInfoCallback? = nil)
  public static func getStat(filePath: Swift.String, recursive: Swift.Bool, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.fileStatsArrayCallback? = nil)
  public static func appendFile(encoding: Swift.String? = nil, path: Swift.String, data: Any!, chunkSize: Swift.Int = 1024 * 256, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func saveFile(tempFilePath: Swift.String, filePath: Swift.String?, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.stringCallback? = nil)
  public static func removeSavedFile(filePath: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func unzip(zipFilePath: Swift.String, targetPath: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func getSavedFileList(completionHandler: DCloudUTSExtAPI.UniFileSystemManager.stringArrayCallback? = nil)
  public static func truncate(filePath: Swift.String, length: Foundation.NSNumber? = 0, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func open(filePath: Swift.String, flag: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.intCallback? = nil)
  public static func close(fd: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func fstat(fd: Swift.String, completionHandler: (((any DCloudUTSExtAPI.Stats)?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void)? = nil)
  public static func ftruncate(fd: Swift.String, length: Foundation.NSNumber? = 0, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.boolCallback? = nil)
  public static func write(encoding: Swift.String? = nil, fd: Swift.String, data: Any!, offset: Foundation.NSNumber?, length: Foundation.NSNumber?, position: Foundation.NSNumber?, chunkSize: Swift.Int = 1024 * 256, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.intCallback? = nil)
  public static func read(arrayBuffer: DCloudUTSFoundation.ArrayBuffer, fd: Swift.String, offset: Foundation.NSNumber?, length: Foundation.NSNumber?, position: Foundation.NSNumber?, chunkSize: Swift.Int = 1024 * 256, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.intCallback? = nil)
  public static func readCompressedFile(filePath: Swift.String, compressionAlgorithm: Swift.String, completionHandler: DCloudUTSExtAPI.UniFileSystemManager.stringCallback? = nil)
  public static func readZipEntry(filePath: Swift.String, encoding: Swift.String?, entries: [DCloudUTSExtAPI.EntryItem]?, completionHandler: (([Swift.String : DCloudUTSExtAPI.ZipFileItem]?, DCloudUTSExtAPI.UniFileSystemManagerError?) -> Swift.Void)? = nil)
}
extension DCloudUTSExtAPI.UniFileSystemManager {
  @objc public static func isEmpty(_ path: Swift.String) -> Swift.Bool
  @objc public static func isExist(_ path: Swift.String) -> Swift.Bool
  @objc public static func isDirectory(_ path: Swift.String) -> Swift.Bool
  @objc public static func isSandbox(_ path: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class UniFileDigest : ObjectiveC.NSObject {
  public enum DigestType : Swift.String {
    case sha1
    case md5
    case sha256
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func toDigest(forFileAtPath path: Swift.String, type: DCloudUTSExtAPI.UniFileDigest.DigestType) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Stats) public class UniFileSystemManagerStats : ObjectiveC.NSObject, DCloudUTSExtAPI.Stats {
  @objc public var mode: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var size: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var lastAccessedTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var lastModifiedTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var mIsFile: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func isDirectory() -> Swift.Bool
  @objc public func isFile() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UniFileDecompressTool : ObjectiveC.NSObject {
  public static func unzip(at zipFilePath: Swift.String, to destinationPath: Swift.String) throws
  public static func brotliDecompress(filePath: Swift.String) throws -> Foundation.Data
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetLocationFailImpl = DCloudUTSExtAPI.GetLocationFailImpl1
public var LocationUniErrorSubject: Swift.String
@objc public protocol UniLocationProvider : DCloudUniappRuntime.UniProvider {
  @objc func getLocation(_ options: DCloudUTSExtAPI.GetLocationOptions)
}
public typealias LocationErrorCode = Foundation.NSNumber
public protocol IGetLocationFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.LocationErrorCode { get set }
}
public typealias GetLocationFail = DCloudUTSExtAPI.IGetLocationFail
public typealias GetLocation = (_ options: DCloudUTSExtAPI.GetLocationOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationGetLocationSuccess) @objcMembers public class GetLocationSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var speed: Foundation.NSNumber!
  @objc public var accuracy: Foundation.NSNumber!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var verticalAccuracy: Foundation.NSNumber!
  @objc public var horizontalAccuracy: Foundation.NSNumber!
  @objc public var address: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetLocationSuccessCallback = (_ result: DCloudUTSExtAPI.GetLocationSuccess) -> Swift.Void
public typealias GetLocationFailCallback = (_ result: any DCloudUTSExtAPI.IGetLocationFail) -> Swift.Void
public typealias GetLocationComplete = Any
public typealias GetLocationCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationGetLocationOptions) @objcMembers public class GetLocationOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var provider: Swift.String?
  @objc public var type: Swift.String?
  @objc public var altitude: Swift.Bool
  @objc public var geocode: Swift.Bool
  @objc public var highAccuracyExpireTime: Foundation.NSNumber?
  @objc public var isHighAccuracy: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.GetLocationSuccessCallback?
  public var fail: DCloudUTSExtAPI.GetLocationFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetLocationCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var LocationUniErrors: [DCloudUTSExtAPI.LocationErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniLocationGetLocationFailImpl1) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniLocationGetLocationFailImpl1) public class GetLocationFailImpl1 : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IGetLocationFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.LocationErrorCode)
  @objc deinit
}
public var getLocation: (_ options: DCloudUTSExtAPI.GetLocationOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationGetLocationOptionsJSONObject) @objcMembers public class GetLocationOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var provider: Swift.String?
  @objc public var type: Swift.String?
  @objc public var altitude: Swift.Bool
  @objc public var geocode: Swift.Bool
  @objc public var highAccuracyExpireTime: Foundation.NSNumber?
  @objc public var isHighAccuracy: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getLocationByJs(_ options: DCloudUTSExtAPI.GetLocationOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniLocationIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getLocationByJs(_ options: DCloudUTSExtAPI.GetLocationOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UniLocationSystemProvider : DCloudUTSExtAPI.UniLocationProvider {
  @objc func toJSON() -> Swift.Dictionary<Swift.String, Any>
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationSystemUniLocationSystemProviderImpl) @objcMembers public class UniLocationSystemProviderImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniLocationSystemProvider {
  @objc public var id: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var isAppExist: Swift.Bool
  @objc public func getLocation(_ options: DCloudUTSExtAPI.GetLocationOptions)
  @objc public func toJSON() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationSystemSystemLocation) @objcMembers public class SystemLocation : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc public static var share: DCloudUTSExtAPI.SystemLocation
  @objc public var locationManager: CoreLocation.CLLocationManager!
  @objc public var locationOptions: DCloudUTSExtAPI.GetLocationOptions?
  @objc public func configLocationManager()
  @objc public func requestLocationWithAuthorization()
  @objc public func getAuthorizationStatus() -> CoreLocation.CLAuthorizationStatus
  @objc public func getLocationImpl(_ options: DCloudUTSExtAPI.GetLocationOptions)
  @objc public func getLocation()
  @objc public func requestLocation()
  @objc public func requestTemporaryFullAccuracyAuthorization()
  @objc public func failedAction(_ errCode: Foundation.NSNumber)
  @objc public func successAction(_ response: DCloudUTSExtAPI.GetLocationSuccess)
  @objc public func clearWatch()
  @objc public func isSameLocation(_ left: CoreLocation.CLLocation, _ right: CoreLocation.CLLocation) -> Swift.Bool
  @objc public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationSystemUniLocationSystemProviderImplByJs) @objcMembers public class UniLocationSystemProviderImplByJs : DCloudUTSExtAPI.UniLocationSystemProviderImpl {
  @objc public func getLocationByJs(_ options: DCloudUTSExtAPI.GetLocationOptions)
  @objc public func toJSONByJs() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UniLocationTencentProvider : DCloudUTSExtAPI.UniLocationProvider {
  @objc func toJSON() -> Swift.Dictionary<Swift.String, Any>
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationTencentUniLocationTencentProviderImpl) @objcMembers public class UniLocationTencentProviderImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniLocationTencentProvider {
  @objc public var id: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var isAppExist: Swift.Bool
  @objc public func getLocation(_ options: DCloudUTSExtAPI.GetLocationOptions)
  @objc public func toJSON() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniLocationTencentUniLocationTencentProviderImplByJs) @objcMembers public class UniLocationTencentProviderImplByJs : DCloudUTSExtAPI.UniLocationTencentProviderImpl {
  @objc public func getLocationByJs(_ options: DCloudUTSExtAPI.GetLocationOptions)
  @objc public func toJSONByJs() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetNetworkType = (_ options: DCloudUTSExtAPI.GetNetworkTypeOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetNetworkTypeGetNetworkTypeSuccess) @objcMembers public class GetNetworkTypeSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var networkType: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetNetworkTypeSuccessCallback = (_ result: DCloudUTSExtAPI.GetNetworkTypeSuccess) -> Swift.Void
public typealias GetNetworkTypeFail = DCloudUTSFoundation.UniError
public typealias GetNetworkTypeFailCallback = (_ result: DCloudUTSExtAPI.GetNetworkTypeFail) -> Swift.Void
public typealias GetNetworkTypeComplete = Any
public typealias GetNetworkTypeCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetNetworkTypeGetNetworkTypeOptions) @objcMembers public class GetNetworkTypeOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetNetworkTypeSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetNetworkTypeFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetNetworkTypeCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetNetworkTypeOnNetworkStatusChangeCallbackResult) @objcMembers public class OnNetworkStatusChangeCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var isConnected: Swift.Bool
  @objc public var networkType: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var getNetworkType: (_ options: DCloudUTSExtAPI.GetNetworkTypeOptions) -> Swift.Void
public func getInternalNetworkType() -> Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetNetworkTypeGetNetworkTypeOptionsJSONObject) @objcMembers public class GetNetworkTypeOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getNetworkTypeByJs(_ options: DCloudUTSExtAPI.GetNetworkTypeOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetNetworkTypeIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetNetworkTypeIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getNetworkTypeByJs(_ options: DCloudUTSExtAPI.GetNetworkTypeOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetProviderFailImpl = DCloudUTSExtAPI.GetProviderFailImpl1
public var ProviderUniErrorSubject: Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderSuccess) @objcMembers public class GetProviderSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var service: Swift.String!
  @objc public var provider: [Swift.String]!
  @objc public var providers: [any DCloudUniappRuntime.UniProvider]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderSyncSuccess) @objcMembers public class GetProviderSyncSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var service: Swift.String!
  @objc public var providerIds: [Swift.String]!
  @objc public var providerObjects: [any DCloudUniappRuntime.UniProvider]!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetProviderSync = (_ options: DCloudUTSExtAPI.GetProviderSyncOptions) -> DCloudUTSExtAPI.GetProviderSyncSuccess
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderSyncOptions) @objcMembers public class GetProviderSyncOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var service: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetProviderSuccessCallback = (_ result: DCloudUTSExtAPI.GetProviderSuccess) -> Swift.Void
public typealias GetProviderFail = DCloudUTSExtAPI.IGetProviderFail
public typealias GetProviderFailCallback = (_ result: any DCloudUTSExtAPI.IGetProviderFail) -> Swift.Void
public typealias GetProviderComplete = Any
public typealias GetProviderCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderOptions) @objcMembers public class GetProviderOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var service: Swift.String!
  @objc public var success: DCloudUTSExtAPI.GetProviderSuccessCallback?
  public var fail: DCloudUTSExtAPI.GetProviderFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetProviderCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetProvider = (_ options: DCloudUTSExtAPI.GetProviderOptions) -> Swift.Void
public typealias ProviderErrorCode = Foundation.NSNumber
public protocol IGetProviderFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ProviderErrorCode { get set }
}
public var ProviderUniErrors: [DCloudUTSExtAPI.ProviderErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniGetProviderGetProviderFailImpl1) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniGetProviderGetProviderFailImpl1) public class GetProviderFailImpl1 : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IGetProviderFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.ProviderErrorCode)
  @objc deinit
}
public var SupportedProviderServiceList: [Swift.String]
public var getProvider: (_ options: DCloudUTSExtAPI.GetProviderOptions) -> Swift.Void
public var getProviderSync: (_ options: DCloudUTSExtAPI.GetProviderSyncOptions) -> DCloudUTSExtAPI.GetProviderSyncSuccess
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderSyncOptionsJSONObject) @objcMembers public class GetProviderSyncOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var service: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderGetProviderOptionsJSONObject) @objcMembers public class GetProviderOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var service: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getProviderByJs(_ options: DCloudUTSExtAPI.GetProviderOptionsJSONObject)
public func getProviderSyncByJs(_ options: DCloudUTSExtAPI.GetProviderSyncOptionsJSONObject) -> DCloudUTSExtAPI.GetProviderSyncSuccess
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetProviderIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetProviderIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getProviderByJs(_ options: DCloudUTSExtAPI.GetProviderOptionsJSONObject)
  @objc public static func s_getProviderSyncByJs(_ options: DCloudUTSExtAPI.GetProviderSyncOptionsJSONObject) -> DCloudUTSExtAPI.GetProviderSyncSuccess
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentLocationObject) @objcMembers public class LocationObject : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMarker) @objcMembers public class Marker : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var id: Foundation.NSNumber!
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var iconPath: Swift.String!
  @objc public var title: Swift.String?
  @objc public var rotate: Foundation.NSNumber?
  @objc public var alpha: Foundation.NSNumber?
  @objc public var width: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc public var ariaLabel: Swift.String?
  @objc public var anchor: DCloudUTSExtAPI.Anchor?
  @objc public var callout: DCloudUTSExtAPI.MapMarkerCallout?
  @objc public var label: DCloudUTSExtAPI.MapMarkerLabel?
  @objc public var clusterId: Foundation.NSNumber?
  @objc public var customCallout: DCloudUTSExtAPI.MapMarkerCallout?
  @objc public var joinCluster: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapMarkerCallout) @objcMembers public class MapMarkerCallout : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var content: Swift.String?
  @objc public var color: Swift.String?
  @objc public var fontSize: Foundation.NSNumber?
  @objc public var borderRadius: Foundation.NSNumber?
  @objc public var borderWidth: Foundation.NSNumber?
  @objc public var borderColor: Swift.String?
  @objc public var bgColor: Swift.String?
  @objc public var padding: Foundation.NSNumber?
  @objc public var display: Swift.String?
  @objc public var textAlign: Swift.String?
  @objc public var anchorX: Foundation.NSNumber?
  @objc public var anchorY: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapMarkerLabel) @objcMembers public class MapMarkerLabel : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var content: Swift.String?
  @objc public var color: Swift.String?
  @objc public var fontSize: Foundation.NSNumber?
  @objc public var x: Foundation.NSNumber?
  @objc public var y: Foundation.NSNumber?
  @objc public var anchorX: Foundation.NSNumber?
  @objc public var anchorY: Foundation.NSNumber?
  @objc public var borderWidth: Foundation.NSNumber?
  @objc public var borderColor: Swift.String?
  @objc public var borderRadius: Foundation.NSNumber?
  @objc public var bgColor: Swift.String?
  @objc public var padding: Foundation.NSNumber?
  @objc public var textAlign: Swift.String?
  @objc public var ariaLabel: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentAnchor) @objcMembers public class Anchor : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var x: Foundation.NSNumber!
  @objc public var y: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentPolyline) @objcMembers public class Polyline : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var color: Swift.String?
  @objc public var width: Foundation.NSNumber?
  @objc public var dottedLine: Swift.Bool
  @objc public var arrowLine: Swift.Bool
  @objc public var arrowIconPath: Swift.String?
  @objc public var borderColor: Swift.String?
  @objc public var borderWidth: Foundation.NSNumber?
  @objc public var colorList: [Swift.String]?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentPolygon) @objcMembers public class Polygon : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var strokeWidth: Foundation.NSNumber?
  @objc public var strokeColor: Swift.String?
  @objc public var fillColor: Swift.String?
  @objc public var zIndex: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentCircle) @objcMembers public class Circle : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var radius: Foundation.NSNumber!
  @objc public var color: Swift.String?
  @objc public var fillColor: Swift.String?
  @objc public var strokeWidth: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentControlPosition) @objcMembers public class ControlPosition : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var left: Foundation.NSNumber?
  @objc public var top: Foundation.NSNumber?
  @objc public var width: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentControl) @objcMembers public class Control : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var position: DCloudUTSExtAPI.ControlPosition!
  @objc public var iconPath: Swift.String!
  @objc public var id: Foundation.NSNumber?
  @objc public var clickable: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentBounds) @objcMembers public class Bounds : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var southwest: DCloudUTSExtAPI.LocationObject!
  @objc public var northeast: DCloudUTSExtAPI.LocationObject!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CreateMapContext = (_ mapId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.MapContext)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetCenterLocationOptions) @objcMembers public class MapContextGetCenterLocationOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: ((_ result: DCloudUTSExtAPI.LocationObject) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextMoveToLocationOptions) @objcMembers public class MapContextMoveToLocationOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var latitude: Foundation.NSNumber?
  @objc public var longitude: Foundation.NSNumber?
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextTranslateMarkerOptions) @objcMembers public class MapContextTranslateMarkerOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var markerId: Foundation.NSNumber!
  @objc public var destination: DCloudUTSExtAPI.LocationObject!
  @objc public var autoRotate: Swift.Bool
  @objc public var rotate: Foundation.NSNumber?
  @objc public var moveWithRotate: Swift.Bool
  @objc public var duration: Foundation.NSNumber?
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextIncludePointsOptions) @objcMembers public class MapContextIncludePointsOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetRegionResult) @objcMembers public class MapContextGetRegionResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var southwest: DCloudUTSExtAPI.LocationObject!
  @objc public var northeast: DCloudUTSExtAPI.LocationObject!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetRegionOptions) @objcMembers public class MapContextGetRegionOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: ((_ result: DCloudUTSExtAPI.MapContextGetRegionResult) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetScaleResult) @objcMembers public class MapContextGetScaleResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var scale: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetScaleOptions) @objcMembers public class MapContextGetScaleOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: ((_ result: DCloudUTSExtAPI.MapContextGetScaleResult) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextAddGroundOverlayOptions) @objcMembers public class MapContextAddGroundOverlayOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var id: Swift.String!
  @objc public var src: Swift.String!
  @objc public var bounds: DCloudUTSExtAPI.Bounds!
  @objc public var visible: Swift.Bool
  @objc public var zIndex: Foundation.NSNumber?
  @objc public var opacity: Foundation.NSNumber?
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextAddMarkersOptions) @objcMembers public class MapContextAddMarkersOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var markers: [DCloudUTSExtAPI.Marker]!
  @objc public var clear: Swift.Bool
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextMoveAlongOptions) @objcMembers public class MapContextMoveAlongOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var markerId: Foundation.NSNumber!
  @objc public var path: [DCloudUTSExtAPI.LocationObject]!
  @objc public var duration: Foundation.NSNumber?
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextRemoveGroundOverlayOptions) @objcMembers public class MapContextRemoveGroundOverlayOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var id: Swift.String!
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextRemoveMarkersOptions) @objcMembers public class MapContextRemoveMarkersOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var markerIds: [Foundation.NSNumber]!
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextUpdateGroundOverlayOptions) @objcMembers public class MapContextUpdateGroundOverlayOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var id: Swift.String!
  @objc public var src: Swift.String!
  @objc public var bounds: DCloudUTSExtAPI.Bounds!
  @objc public var visible: Swift.Bool
  @objc public var zIndex: Foundation.NSNumber?
  @objc public var opacity: Foundation.NSNumber?
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.MapContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias MapErrorCode = Foundation.NSNumber
public protocol MapContextFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.MapErrorCode { get set }
}
public protocol MapContext {
  func getCenterLocation(_ options: DCloudUTSExtAPI.MapContextGetCenterLocationOptions)
  func moveToLocation(_ options: DCloudUTSExtAPI.MapContextMoveToLocationOptions)
  func translateMarker(_ options: DCloudUTSExtAPI.MapContextTranslateMarkerOptions)
  func includePoints(_ options: DCloudUTSExtAPI.MapContextIncludePointsOptions)
  func getRegion(_ options: DCloudUTSExtAPI.MapContextGetRegionOptions)
  func getScale(_ options: DCloudUTSExtAPI.MapContextGetScaleOptions)
  func addGroundOverlay(_ options: DCloudUTSExtAPI.MapContextAddGroundOverlayOptions)
  func addMarkers(_ options: DCloudUTSExtAPI.MapContextAddMarkersOptions)
  func moveAlong(_ options: DCloudUTSExtAPI.MapContextMoveAlongOptions)
  func removeGroundOverlay(_ options: DCloudUTSExtAPI.MapContextRemoveGroundOverlayOptions)
  func removeMarkers(_ options: DCloudUTSExtAPI.MapContextRemoveMarkersOptions)
  func updateGroundOverlay(_ options: DCloudUTSExtAPI.MapContextUpdateGroundOverlayOptions)
}
public var UniMapErrorSubject: Swift.String
public var MapUniErrors: [DCloudUTSExtAPI.MapErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniMapTencentMapContextFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniMapTencentMapContextFailImpl) public class MapContextFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.MapContextFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.MapErrorCode)
  @objc deinit
}
@objc public protocol UniMapElement : JavaScriptCore.JSExport {
  @objc func moveAlong(_ options: DCloudUTSExtAPI.MapContextMoveAlongOptions)
  @objc func translateMarker(_ options: DCloudUTSExtAPI.MapContextTranslateMarkerOptions)
  @objc func addGroundOverlay(_ options: DCloudUTSExtAPI.MapContextAddGroundOverlayOptions)
  @objc func updateGroundOverlay(_ options: DCloudUTSExtAPI.MapContextUpdateGroundOverlayOptions)
  @objc func removeGroundOverlay(_ options: DCloudUTSExtAPI.MapContextRemoveGroundOverlayOptions)
  @objc func getCenterLocation(_ options: DCloudUTSExtAPI.MapContextGetCenterLocationOptions)
  @objc func addMarkers(_ options: DCloudUTSExtAPI.MapContextAddMarkersOptions)
  @objc func removeMarkers(_ options: DCloudUTSExtAPI.MapContextRemoveMarkersOptions)
  @objc func getScale(_ options: DCloudUTSExtAPI.MapContextGetScaleOptions)
  @objc func moveToLocation(_ options: DCloudUTSExtAPI.MapContextMoveToLocationOptions)
  @objc func getRegion(_ options: DCloudUTSExtAPI.MapContextGetRegionOptions)
  @objc func includePoints(_ options: DCloudUTSExtAPI.MapContextIncludePointsOptions)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentUniMapElementImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniMapTencentUniMapElementImpl) public class UniMapElementImpl : DCloudUniappRuntime.UniElementImpl, DCloudUTSExtAPI.UniMapElement {
  @objc override public func getIOSView() -> UIKit.UIView?
  @objc public func moveAlong(_ options: DCloudUTSExtAPI.MapContextMoveAlongOptions)
  @objc public func translateMarker(_ options: DCloudUTSExtAPI.MapContextTranslateMarkerOptions)
  @objc public func addGroundOverlay(_ options: DCloudUTSExtAPI.MapContextAddGroundOverlayOptions)
  @objc public func updateGroundOverlay(_ options: DCloudUTSExtAPI.MapContextUpdateGroundOverlayOptions)
  @objc public func removeGroundOverlay(_ options: DCloudUTSExtAPI.MapContextRemoveGroundOverlayOptions)
  @objc public func getCenterLocation(_ options: DCloudUTSExtAPI.MapContextGetCenterLocationOptions)
  @objc public func addMarkers(_ options: DCloudUTSExtAPI.MapContextAddMarkersOptions)
  @objc public func removeMarkers(_ options: DCloudUTSExtAPI.MapContextRemoveMarkersOptions)
  @objc public func getScale(_ options: DCloudUTSExtAPI.MapContextGetScaleOptions)
  @objc public func moveToLocation(_ options: DCloudUTSExtAPI.MapContextMoveToLocationOptions)
  @objc public func getRegion(_ options: DCloudUTSExtAPI.MapContextGetRegionOptions)
  @objc public func includePoints(_ options: DCloudUTSExtAPI.MapContextIncludePointsOptions)
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniMapTencentTencentMap) @objcMembers public class TencentMap : ObjectiveC.NSObject {
  @objc public var __$$element: any DCloudUniappRuntime.UniNativeViewElement
  @objc public init(_ element: any DCloudUniappRuntime.UniNativeViewElement)
  @objc public func start()
  @objc public func destroy()
  @objc public func setCenter(_ latitude: Foundation.NSNumber, _ longitude: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setMinScale(_ zoom: Foundation.NSNumber)
  @objc public func setMaxScale(_ zoom: Foundation.NSNumber)
  @objc public func setScale(_ zoom: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func getScale() -> Foundation.NSNumber
  @objc public func setTheme(_ theme: Swift.String)
  @objc public func setLayerStyle(_ id: Swift.String)
  @objc public func setMarkers(_ markers: [DCloudUTSExtAPI.Marker])
  @objc public func setPolyline(_ polylines: [DCloudUTSExtAPI.Polyline])
  @objc public func setCircle(_ circles: [DCloudUTSExtAPI.Circle])
  @objc public func setControl(_ controls: [DCloudUTSExtAPI.Control])
  @objc public func setPolygon(_ polygons: [DCloudUTSExtAPI.Polygon])
  @objc public func setIncludePoints(_ points: [DCloudUTSExtAPI.LocationObject], _ animate: Swift.Bool = true)
  @objc public func enable3D(_ enable: Swift.Bool)
  @objc public func showCompass(_ enable: Swift.Bool)
  @objc public func enableZoom(_ enable: Swift.Bool)
  @objc public func enableScroll(_ enable: Swift.Bool)
  @objc public func enableRotate(_ enable: Swift.Bool)
  @objc public func setRotate(_ rotate: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setSkew(_ skew: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setEnableOverlooking(_ enable: Swift.Bool)
  @objc public func setEnableSatellite(_ enable: Swift.Bool)
  @objc public func setEnableTraffic(_ enable: Swift.Bool)
  @objc public func setEnablePoi(_ enable: Swift.Bool)
  @objc public func setEnableBuilding(_ enable: Swift.Bool)
  @objc public func setShowLocation(_ show: Swift.Bool)
  @objc public func setEnableIndoorMap(_ enable: Swift.Bool)
  @objc public func setOnMapLoadedCallback()
  @objc public func setOnMapClickCallback()
  @objc public func setOnMapRegionChange()
  @objc public func setOnMapMarkerTap()
  @objc public func setOnMapControlTap()
  @objc public func setOnMapAnchorPointTap()
  @objc public func setOnMapPoiTap()
  @objc public func setOnMapCalloutTap()
  @objc deinit
}
public var createMapContext: (_ mapId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.MapContext)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentLocationObjectJSONObject) @objcMembers public class LocationObjectJSONObject : ObjectiveC.NSObject {
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMarkerJSONObject) @objcMembers public class MarkerJSONObject : ObjectiveC.NSObject {
  @objc public var id: Foundation.NSNumber!
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var iconPath: Swift.String!
  @objc public var title: Swift.String?
  @objc public var rotate: Foundation.NSNumber?
  @objc public var alpha: Foundation.NSNumber?
  @objc public var width: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc public var ariaLabel: Swift.String?
  @objc public var anchor: DCloudUTSExtAPI.Anchor?
  @objc public var callout: DCloudUTSExtAPI.MapMarkerCallout?
  @objc public var label: DCloudUTSExtAPI.MapMarkerLabel?
  @objc public var clusterId: Foundation.NSNumber?
  @objc public var customCallout: DCloudUTSExtAPI.MapMarkerCallout?
  @objc public var joinCluster: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentPolylineJSONObject) @objcMembers public class PolylineJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var color: Swift.String?
  @objc public var width: Foundation.NSNumber?
  @objc public var dottedLine: Swift.Bool
  @objc public var arrowLine: Swift.Bool
  @objc public var arrowIconPath: Swift.String?
  @objc public var borderColor: Swift.String?
  @objc public var borderWidth: Foundation.NSNumber?
  @objc public var colorList: [Swift.String]?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentPolygonJSONObject) @objcMembers public class PolygonJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var strokeWidth: Foundation.NSNumber?
  @objc public var strokeColor: Swift.String?
  @objc public var fillColor: Swift.String?
  @objc public var zIndex: Foundation.NSNumber?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentCircleJSONObject) @objcMembers public class CircleJSONObject : ObjectiveC.NSObject {
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var radius: Foundation.NSNumber!
  @objc public var color: Swift.String?
  @objc public var fillColor: Swift.String?
  @objc public var strokeWidth: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentControlJSONObject) @objcMembers public class ControlJSONObject : ObjectiveC.NSObject {
  @objc public var position: DCloudUTSExtAPI.ControlPosition!
  @objc public var iconPath: Swift.String!
  @objc public var id: Foundation.NSNumber?
  @objc public var clickable: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetCenterLocationOptionsJSONObject) @objcMembers public class MapContextGetCenterLocationOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextMoveToLocationOptionsJSONObject) @objcMembers public class MapContextMoveToLocationOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var latitude: Foundation.NSNumber?
  @objc public var longitude: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextTranslateMarkerOptionsJSONObject) @objcMembers public class MapContextTranslateMarkerOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var markerId: Foundation.NSNumber!
  @objc public var destination: DCloudUTSExtAPI.LocationObjectJSONObject!
  @objc public var autoRotate: Swift.Bool
  @objc public var rotate: Foundation.NSNumber?
  @objc public var moveWithRotate: Swift.Bool
  @objc public var duration: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextIncludePointsOptionsJSONObject) @objcMembers public class MapContextIncludePointsOptionsJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var points: [DCloudUTSExtAPI.LocationObject]!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetRegionOptionsJSONObject) @objcMembers public class MapContextGetRegionOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextGetScaleOptionsJSONObject) @objcMembers public class MapContextGetScaleOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextAddGroundOverlayOptionsJSONObject) @objcMembers public class MapContextAddGroundOverlayOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var id: Swift.String!
  @objc public var src: Swift.String!
  @objc public var bounds: DCloudUTSExtAPI.Bounds!
  @objc public var visible: Swift.Bool
  @objc public var zIndex: Foundation.NSNumber?
  @objc public var opacity: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextAddMarkersOptionsJSONObject) @objcMembers public class MapContextAddMarkersOptionsJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var markers: [DCloudUTSExtAPI.Marker]!
  @objc public var clear: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextMoveAlongOptionsJSONObject) @objcMembers public class MapContextMoveAlongOptionsJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.DCUniModel {
  @objc public var markerId: Foundation.NSNumber!
  @objc public var path: [DCloudUTSExtAPI.LocationObject]!
  @objc public var duration: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc public static func modelContainerPropertyGenericClass() -> Swift.Dictionary<Swift.String, Any>?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextRemoveGroundOverlayOptionsJSONObject) @objcMembers public class MapContextRemoveGroundOverlayOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var id: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextRemoveMarkersOptionsJSONObject) @objcMembers public class MapContextRemoveMarkersOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var markerIds: [Foundation.NSNumber]!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentMapContextUpdateGroundOverlayOptionsJSONObject) @objcMembers public class MapContextUpdateGroundOverlayOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var id: Swift.String!
  @objc public var src: Swift.String!
  @objc public var bounds: DCloudUTSExtAPI.Bounds!
  @objc public var visible: Swift.Bool
  @objc public var zIndex: Foundation.NSNumber?
  @objc public var opacity: Foundation.NSNumber?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentTencentMapByJs) @objcMembers public class TencentMapByJs : DCloudUTSExtAPI.TencentMap {
  @objc public func startByJs()
  @objc public func destroyByJs()
  @objc public func setCenterByJs(_ latitude: Foundation.NSNumber, _ longitude: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setMinScaleByJs(_ zoom: Foundation.NSNumber)
  @objc public func setMaxScaleByJs(_ zoom: Foundation.NSNumber)
  @objc public func setScaleByJs(_ zoom: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func getScaleByJs() -> Foundation.NSNumber
  @objc public func setThemeByJs(_ theme: Swift.String)
  @objc public func setLayerStyleByJs(_ id: Swift.String)
  @objc public func setMarkersByJs(_ markers: [DCloudUTSExtAPI.MarkerJSONObject])
  @objc public func setPolylineByJs(_ polylines: [DCloudUTSExtAPI.PolylineJSONObject])
  @objc public func setCircleByJs(_ circles: [DCloudUTSExtAPI.CircleJSONObject])
  @objc public func setControlByJs(_ controls: [DCloudUTSExtAPI.ControlJSONObject])
  @objc public func setPolygonByJs(_ polygons: [DCloudUTSExtAPI.PolygonJSONObject])
  @objc public func setIncludePointsByJs(_ points: [DCloudUTSExtAPI.LocationObjectJSONObject], _ animate: Swift.Bool = true)
  @objc public func enable3DByJs(_ enable: Swift.Bool)
  @objc public func showCompassByJs(_ enable: Swift.Bool)
  @objc public func enableZoomByJs(_ enable: Swift.Bool)
  @objc public func enableScrollByJs(_ enable: Swift.Bool)
  @objc public func enableRotateByJs(_ enable: Swift.Bool)
  @objc public func setRotateByJs(_ rotate: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setSkewByJs(_ skew: Foundation.NSNumber, _ animate: Swift.Bool = true)
  @objc public func setEnableOverlookingByJs(_ enable: Swift.Bool)
  @objc public func setEnableSatelliteByJs(_ enable: Swift.Bool)
  @objc public func setEnableTrafficByJs(_ enable: Swift.Bool)
  @objc public func setEnablePoiByJs(_ enable: Swift.Bool)
  @objc public func setEnableBuildingByJs(_ enable: Swift.Bool)
  @objc public func setShowLocationByJs(_ show: Swift.Bool)
  @objc public func setEnableIndoorMapByJs(_ enable: Swift.Bool)
  @objc public func setOnMapLoadedCallbackByJs()
  @objc public func setOnMapClickCallbackByJs()
  @objc public func setOnMapRegionChangeByJs()
  @objc public func setOnMapMarkerTapByJs()
  @objc public func setOnMapControlTapByJs()
  @objc public func setOnMapAnchorPointTapByJs()
  @objc public func setOnMapPoiTapByJs()
  @objc public func setOnMapCalloutTapByJs()
  @objc override public init(_ element: any DCloudUniappRuntime.UniNativeViewElement)
  @objc deinit
}
public func createMapContextByJs(_ mapId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
@objc(UTSSDKModulesDCloudUniMapTencentMapContextByJsProxy) @objcMembers public class MapContextByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.MapContext
  public init(_ ins: any DCloudUTSExtAPI.MapContext)
  @objc public func getCenterLocationByJs(_ options: DCloudUTSExtAPI.MapContextGetCenterLocationOptionsJSONObject)
  @objc public func moveToLocationByJs(_ options: DCloudUTSExtAPI.MapContextMoveToLocationOptionsJSONObject)
  @objc public func translateMarkerByJs(_ options: DCloudUTSExtAPI.MapContextTranslateMarkerOptionsJSONObject)
  @objc public func includePointsByJs(_ options: DCloudUTSExtAPI.MapContextIncludePointsOptionsJSONObject)
  @objc public func getRegionByJs(_ options: DCloudUTSExtAPI.MapContextGetRegionOptionsJSONObject)
  @objc public func getScaleByJs(_ options: DCloudUTSExtAPI.MapContextGetScaleOptionsJSONObject)
  @objc public func addGroundOverlayByJs(_ options: DCloudUTSExtAPI.MapContextAddGroundOverlayOptionsJSONObject)
  @objc public func addMarkersByJs(_ options: DCloudUTSExtAPI.MapContextAddMarkersOptionsJSONObject)
  @objc public func moveAlongByJs(_ options: DCloudUTSExtAPI.MapContextMoveAlongOptionsJSONObject)
  @objc public func removeGroundOverlayByJs(_ options: DCloudUTSExtAPI.MapContextRemoveGroundOverlayOptionsJSONObject)
  @objc public func removeMarkersByJs(_ options: DCloudUTSExtAPI.MapContextRemoveMarkersOptionsJSONObject)
  @objc public func updateGroundOverlayByJs(_ options: DCloudUTSExtAPI.MapContextUpdateGroundOverlayOptionsJSONObject)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMapTencentIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniMapTencentIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_createMapContextByJs(_ mapId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniMapComponentRegister) @objcMembers public class UniMapComponentRegister : ObjectiveC.NSObject {
  @objc public static func registerComponent()
  @objc override dynamic public init()
  @objc deinit
}
public var RequestPaymentUniErrorSubject: Swift.String
@objc public protocol UniPaymentProvider : DCloudUniappRuntime.UniProvider {
  @objc func requestPayment(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
}
public typealias RequestPaymentErrorCode = Foundation.NSNumber
public typealias RequestPayment = (_ options: DCloudUTSExtAPI.RequestPaymentOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentRequestPaymentSuccess) @objcMembers public class RequestPaymentSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Any?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestPaymentSuccessCallback = (_ result: DCloudUTSExtAPI.RequestPaymentSuccess) -> Swift.Void
public typealias RequestPaymentFail = DCloudUTSExtAPI.IRequestPaymentFail
public typealias RequestPaymentFailCallback = (_ result: any DCloudUTSExtAPI.IRequestPaymentFail) -> Swift.Void
public typealias RequestPaymentComplete = Any
public protocol IRequestPaymentFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RequestPaymentErrorCode { get set }
}
public typealias RequestPaymentCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentRequestPaymentOptions) @objcMembers public class RequestPaymentOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var provider: Swift.String!
  @objc public var orderInfo: Swift.String!
  @objc public var success: DCloudUTSExtAPI.RequestPaymentSuccessCallback?
  public var fail: DCloudUTSExtAPI.RequestPaymentFailCallback?
  @objc public var complete: DCloudUTSExtAPI.RequestPaymentCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var RequestPaymentUniErrors: [DCloudUTSExtAPI.RequestPaymentErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniPaymentRequestPaymentFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniPaymentRequestPaymentFailImpl) public class RequestPaymentFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IRequestPaymentFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RequestPaymentErrorCode)
  @objc deinit
}
public var requestPayment: (_ options: DCloudUTSExtAPI.RequestPaymentOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentRequestPaymentOptionsJSONObject) @objcMembers public class RequestPaymentOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var provider: Swift.String!
  @objc public var orderInfo: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniPaymentIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UniPaymentAlipayProvider : DCloudUTSExtAPI.UniPaymentProvider {
  @objc func toJSON() -> Swift.Dictionary<Swift.String, Any>
}
public var defaultErrorCode: Foundation.NSNumber
public var errorCodeMap: [Swift.String : Foundation.NSNumber]
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayUniPaymentAlipayProviderImpl) @objcMembers public class UniPaymentAlipayProviderImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniPaymentAlipayProvider {
  @objc public var id: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var isAppExist: Swift.Bool
  @objc public func requestPayment(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc public func toJSON() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayAlipayHookProxy) @objcMembers public class AlipayHookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationOpenURLOptions(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandler(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: ((_ res: [Any]?) -> Swift.Void)? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayAlipay) @objcMembers public class Alipay : ObjectiveC.NSObject {
  @objc public static var share: DCloudUTSExtAPI.Alipay
  @objc public static func requestPayment(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayUniPaymentAlipayProviderImplByJs) @objcMembers public class UniPaymentAlipayProviderImplByJs : DCloudUTSExtAPI.UniPaymentAlipayProviderImpl {
  @objc public func requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc public func toJSONByJs() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayAlipayHookProxyByJs) @objcMembers public class AlipayHookProxyByJs : DCloudUTSExtAPI.AlipayHookProxy {
  @objc public func applicationOpenURLOptionsByJs(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandlerByJs(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: DCloudUTSFoundation.UTSCallback? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentAlipayAlipayByJs) @objcMembers public class AlipayByJs : DCloudUTSExtAPI.Alipay {
  @objc public static func requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc public func processOrderByJs(_ url: Foundation.URL)
  @objc public func handleOpenUniversalLinkByJs(_ userActivity: Foundation.NSUserActivity?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UniPaymentWxpayProvider : DCloudUTSExtAPI.UniPaymentProvider {
  @objc func toJSON() -> Swift.Dictionary<Swift.String, Any>
  @objc var isWeChatInstalled: Swift.Bool { get set }
}
public var wxDefaultErrorCode: Foundation.NSNumber
public var wxErrorCodeMap: [Foundation.NSNumber : Foundation.NSNumber]
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayUniPaymentWxpayProviderImpl) @objcMembers public class UniPaymentWxpayProviderImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniPaymentWxpayProvider {
  @objc public var id: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var isAppExist: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc public func requestPayment(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc public func checkAppExist()
  @objc public var isWeChatInstalled: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc public func toJSON() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayWxpayHookProxy) @objcMembers public class WxpayHookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationOpenURLOptions(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandler(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: ((_ res: [Any]?) -> Swift.Void)? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayWxpay) @objcMembers public class Wxpay : ObjectiveC.NSObject, DCloudUTSExtAPI.WXApiDelegate {
  @objc public static var share: DCloudUTSExtAPI.Wxpay
  @objc public func onResp(_ resp: DCloudUTSExtAPI.BaseResp)
  @objc public static func requestPayment(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayUniPaymentWxpayProviderImplByJs) @objcMembers public class UniPaymentWxpayProviderImplByJs : DCloudUTSExtAPI.UniPaymentWxpayProviderImpl {
  @objc public func requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc public func checkAppExistByJs()
  @objc public func toJSONByJs() -> Swift.Dictionary<Swift.String, Any>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayWxpayHookProxyByJs) @objcMembers public class WxpayHookProxyByJs : DCloudUTSExtAPI.WxpayHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptionsByJs(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationOpenURLOptionsByJs(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandlerByJs(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: DCloudUTSFoundation.UTSCallback? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPaymentWxpayWxpayByJs) @objcMembers public class WxpayByJs : DCloudUTSExtAPI.Wxpay {
  @objc public func registerAppByJs()
  @objc public func handleOpenByJs(_ url: Foundation.URL)
  @objc public func handleOpenUniversalLinkByJs(_ userActivity: Foundation.NSUserActivity?)
  @objc public func isWXAppInstalledByJs() -> Swift.Bool
  @objc public func onRespByJs(_ resp: DCloudUTSExtAPI.BaseResp)
  @objc public static func requestPaymentByJs(_ options: DCloudUTSExtAPI.RequestPaymentOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushGetPushClientIdSuccess) @objcMembers public class GetPushClientIdSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var cid: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetPushClientIdSuccessCallback = (_ result: DCloudUTSExtAPI.GetPushClientIdSuccess) -> Swift.Void
public typealias GetPushClientIdFail = DCloudUTSFoundation.UniError
public typealias GetPushClientIdFailCallback = (_ result: DCloudUTSExtAPI.GetPushClientIdFail) -> Swift.Void
public typealias GetPushClientIdComplete = Any
public typealias GetPushClientIdCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushGetPushClientIdOptions) @objcMembers public class GetPushClientIdOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetPushClientIdSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.GetPushClientIdFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetPushClientIdCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnPushMessageType = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushOnPushMessageCallbackResult) @objcMembers public class OnPushMessageCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var type: DCloudUTSExtAPI.OnPushMessageType!
  @objc public var data: DCloudUTSFoundation.UTSJSONObject!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnPushMessageCallback = (_ result: DCloudUTSExtAPI.OnPushMessageCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushCreatePushMessageSuccess) @objcMembers public class CreatePushMessageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias CreatePushMessageSuccessCallback = (_ result: DCloudUTSExtAPI.CreatePushMessageSuccess) -> Swift.Void
public typealias CreatePushMessageFail = DCloudUTSFoundation.UniError
public typealias CreatePushMessageFailCallback = (_ result: DCloudUTSExtAPI.CreatePushMessageFail) -> Swift.Void
public typealias CreatePushMessageComplete = Any
public typealias CreatePushMessageCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushCreatePushMessageOptions) @objcMembers public class CreatePushMessageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var cover: Swift.Bool
  @objc public var delay: Foundation.NSNumber?
  @objc public var icon: Swift.String?
  @objc public var sound: Swift.String?
  @objc public var title: Swift.String?
  @objc public var content: Swift.String!
  @objc public var payload: Any?
  @objc public var when: Foundation.NSNumber?
  @objc public var channelId: Swift.String?
  @objc public var category: Swift.String?
  @objc public var success: DCloudUTSExtAPI.CreatePushMessageSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.CreatePushMessageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.CreatePushMessageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushBadgeOptions) @objcMembers public class BadgeOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var title: Swift.String?
  @objc public var content: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public func getPushClientId(_ options: DCloudUTSExtAPI.GetPushClientIdOptions)
public func onPushMessage(_ callback: DCloudUTSExtAPI.OnPushMessageCallback?)
public func offPushMessage(_ callback: DCloudUTSExtAPI.OnPushMessageCallback?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushHookProxy) @objcMembers public class HookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushNotificationCenterDelegateImpl) @objcMembers public class NotificationCenterDelegateImpl : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (_ options: UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public var notificationCenterDelegateImpl: DCloudUTSExtAPI.NotificationCenterDelegateImpl
public var coverIndex: Foundation.NSNumber
public func createPushMessage(_ reassignedOptions: DCloudUTSExtAPI.CreatePushMessageOptions)
public func setAppBadgeNumber(_ num: Foundation.NSNumber, _ options: DCloudUTSExtAPI.BadgeOptions?)
public func requestAuthorization()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushGetPushClientIdOptionsJSONObject) @objcMembers public class GetPushClientIdOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushCreatePushMessageOptionsJSONObject) @objcMembers public class CreatePushMessageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var cover: Swift.Bool
  @objc public var delay: Foundation.NSNumber?
  @objc public var icon: Swift.String?
  @objc public var sound: Swift.String?
  @objc public var title: Swift.String?
  @objc public var content: Swift.String!
  @objc public var payload: Any?
  @objc public var when: Foundation.NSNumber?
  @objc public var channelId: Swift.String?
  @objc public var category: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushBadgeOptionsJSONObject) @objcMembers public class BadgeOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var content: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public func getPushClientIdByJs(_ options: DCloudUTSExtAPI.GetPushClientIdOptionsJSONObject)
public func onPushMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback?)
public func offPushMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushHookProxyByJs) @objcMembers public class HookProxyByJs : DCloudUTSExtAPI.HookProxy {
  @objc public func applicationDidFinishLaunchingWithOptionsByJs(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public func createPushMessageByJs(_ options: DCloudUTSExtAPI.CreatePushMessageOptionsJSONObject)
public func setAppBadgeNumberByJs(_ num: Foundation.NSNumber, _ options: DCloudUTSExtAPI.BadgeOptionsJSONObject?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPushIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniPushIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getPushClientIdByJs(_ options: DCloudUTSExtAPI.GetPushClientIdOptionsJSONObject)
  @objc public static func s_onPushMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback?)
  @objc public static func s_offPushMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback?)
  @objc public static func s_createPushMessageByJs(_ options: DCloudUTSExtAPI.CreatePushMessageOptionsJSONObject)
  @objc public static func s_setAppBadgeNumberByJs(_ num: Foundation.NSNumber, _ options: DCloudUTSExtAPI.BadgeOptionsJSONObject?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetUniverifyManager = () -> any DCloudUTSExtAPI.UniverifyManager
public typealias GetUniVerifyManager = () -> any DCloudUTSExtAPI.UniVerifyManager
public protocol UniVerifyManager : DCloudUTSExtAPI.UniverifyManager {
}
public protocol UniverifyManager {
  func preLogin(_ options: DCloudUTSExtAPI.UniVerifyManagerPreLoginOptions)
  func login(_ options: DCloudUTSExtAPI.UniVerifyManagerLoginOptions)
  func customLogin(_ options: DCloudUTSExtAPI.UniVerifyManagerCustomLoginOptions)
  func close()
  func isPreLoginValid() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerPreLoginOptions) @objcMembers public class UniVerifyManagerPreLoginOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.UniVerifyManagerPreLoginSuccessCallback?
  public var fail: DCloudUTSExtAPI.UniVerifyManagerPreLoginFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UniVerifyManagerPreLoginCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginOptions) @objcMembers public class UniVerifyManagerLoginOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var uniVerifyStyle: DCloudUTSExtAPI.UniVerifyManagerLoginStyle?
  @objc public var univerifyStyle: DCloudUTSExtAPI.UniVerifyManagerLoginStyle?
  @objc public var success: DCloudUTSExtAPI.UniVerifyManagerLoginSuccessCallback?
  public var fail: DCloudUTSExtAPI.UniVerifyManagerLoginFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UniVerifyManagerLoginCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerCustomLoginOptions) @objcMembers public class UniVerifyManagerCustomLoginOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var numberTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var sloganTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var loginButtonElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var privacyCheckBoxElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var privacyTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var success: DCloudUTSExtAPI.UniVerifyManagerLoginSuccessCallback?
  public var fail: DCloudUTSExtAPI.UniVerifyManagerLoginFailCallback?
  @objc public var complete: DCloudUTSExtAPI.UniVerifyManagerLoginCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginStyle) @objcMembers public class UniVerifyManagerLoginStyle : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var fullScreen: Swift.Bool
  @objc public var logoPath: Swift.String?
  @objc public var backgroundColor: Swift.String?
  @objc public var loginBtnText: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerPreLoginSuccess) @objcMembers public class UniVerifyManagerPreLoginSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var number: Swift.String!
  @objc public var slogan: Swift.String!
  @objc public var privacyName: Swift.String!
  @objc public var privacyUrl: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UniVerifyManagerPreLoginSuccessCallback = (_ res: DCloudUTSExtAPI.UniVerifyManagerPreLoginSuccess) -> Swift.Void
public protocol UniVerifyManagerPreLoginFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode { get set }
}
public typealias UniVerifyManagerPreLoginFailCallback = (_ err: any DCloudUTSExtAPI.UniVerifyManagerPreLoginFail) -> Swift.Void
public typealias UniVerifyManagerPreLoginComplete = Any
public typealias UniVerifyManagerPreLoginCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginSuccess) @objcMembers public class UniVerifyManagerLoginSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var openId: Swift.String!
  @objc public var accessToken: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias UniVerifyManagerLoginSuccessCallback = (_ res: DCloudUTSExtAPI.UniVerifyManagerLoginSuccess) -> Swift.Void
public protocol UniVerifyManagerLoginFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode { get set }
}
public typealias UniVerifyManagerLoginFailCallback = (_ err: any DCloudUTSExtAPI.UniVerifyManagerLoginFail) -> Swift.Void
public typealias UniVerifyManagerLoginComplete = Any
public typealias UniVerifyManagerLoginCompleteCallback = (_ res: Any) -> Swift.Void
public typealias UniVerifyManagerErrorCode = Foundation.NSNumber
public var UniErrorSubject: Swift.String
public var UniErrors: [DCloudUTSExtAPI.UniVerifyManagerErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerPreLoginFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVerifyUniVerifyManagerPreLoginFailImpl) public class UniVerifyManagerPreLoginFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.UniVerifyManagerPreLoginFail {
  @objc override public var errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode, _ errMsg: Swift.String? = nil, _ cause: DCloudUTSFoundation.SourceError? = nil)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginFailImpl) public class UniVerifyManagerLoginFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.UniVerifyManagerLoginFail {
  @objc override public var errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errCode: DCloudUTSExtAPI.UniVerifyManagerErrorCode, _ errMsg: Swift.String? = nil, _ cause: DCloudUTSFoundation.SourceError? = nil)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerSourceError) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVerifyUniVerifyManagerSourceError) public class UniVerifyManagerSourceError : DCloudUTSFoundation.SourceError {
  @objc public var gyuid: Swift.String
  @objc public var processID: Swift.String
  @objc public var operatorType: Foundation.NSNumber
  @objc public init(_ code: Foundation.NSNumber, _ message: Swift.String, _ gyuid: Swift.String, _ processID: Swift.String, _ operatorType: Foundation.NSNumber, _ cause: DCloudUTSFoundation.SourceError? = nil)
  @objc deinit
}
public func checkPermission(_ appid: Swift.String, _ gyid: Swift.String) -> DCloudUTSFoundation.UTSPromise<Swift.Void>
public func getPermissionCheckResult() -> DCloudUTSExtAPI.PermissionCheckResult
public var result: DCloudUTSExtAPI.PermissionCheckResult
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyPermissionCheckResult) @objcMembers public class PermissionCheckResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var valid: Swift.Bool
  @objc public var code: Foundation.NSNumber!
  @objc public var desc: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public func verifyOptions(_ options: DCloudUTSExtAPI.UniVerifyManagerCustomLoginOptions, _ verifyInfo: DCloudUTSFoundation.UTSJSONObject) -> Foundation.NSNumber
public func verifyVisibility(_ targetview: UIKit.UIView, _ rootview: UIKit.UIView) -> Swift.Bool
public func checkConverage(_ view: UIKit.UIView, _ target: UIKit.UIView, _ root: UIKit.UIView) -> Swift.Bool
public func commonSuperviewOfView(_ target: UIKit.UIView, _ view: UIKit.UIView) -> UIKit.UIView?
public func findInContainerView(_ view: UIKit.UIView, _ superview: UIKit.UIView) -> UIKit.UIView?
public var uni_verify_islogining: Swift.Bool
public var uni_verify_closeevent: Swift.String?
public func uniVerifyClose(_ isPreLogin: Swift.Bool)
public func uniVerifyLogin(_ options: DCloudUTSExtAPI.UniVerifyManagerLoginOptions, _ info: DCloudUTSFoundation.UTSJSONObject)
public var getUniverifyManager: () -> any DCloudUTSExtAPI.UniverifyManager
public var getUniVerifyManager: () -> any DCloudUTSExtAPI.UniVerifyManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerImpl) @objcMembers public class UniVerifyManagerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniVerifyManager {
  @objc public static var share: DCloudUTSExtAPI.UniVerifyManagerImpl
  @objc public var preLoginResult: DCloudUTSExtAPI.UniVerifyManagerPreLoginSuccess?
  @objc public var baseFlag: Foundation.NSNumber
  @objc public var GYAppId: Swift.String
  @objc public var appId: Swift.String
  @objc override dynamic public init()
  @objc public func preLogin(_ options: DCloudUTSExtAPI.UniVerifyManagerPreLoginOptions)
  @objc public func customLogin(_ options: DCloudUTSExtAPI.UniVerifyManagerCustomLoginOptions)
  @objc public func isPreLoginValid() -> Swift.Bool
  @objc public func login(_ options: DCloudUTSExtAPI.UniVerifyManagerLoginOptions)
  @objc public func close()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerPreLoginOptionsJSONObject) @objcMembers public class UniVerifyManagerPreLoginOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerLoginOptionsJSONObject) @objcMembers public class UniVerifyManagerLoginOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var uniVerifyStyle: DCloudUTSExtAPI.UniVerifyManagerLoginStyle?
  @objc public var univerifyStyle: DCloudUTSExtAPI.UniVerifyManagerLoginStyle?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerCustomLoginOptionsJSONObject) @objcMembers public class UniVerifyManagerCustomLoginOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var numberTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var sloganTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var loginButtonElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var privacyCheckBoxElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var privacyTextElement: (any DCloudUniappRuntime.UniElement)!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getUniverifyManagerByJs() -> Swift.Int
public func getUniVerifyManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniVerifyUniverifyManagerByJsProxy) @objcMembers public class UniverifyManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.UniverifyManager
  public init(_ ins: any DCloudUTSExtAPI.UniverifyManager)
  @objc public func preLoginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerPreLoginOptionsJSONObject)
  @objc public func loginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerLoginOptionsJSONObject)
  @objc public func customLoginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerCustomLoginOptionsJSONObject)
  @objc public func closeByJs()
  @objc public func isPreLoginValidByJs() -> Swift.Bool
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniVerifyUniVerifyManagerByJsProxy) @objcMembers public class UniVerifyManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.UniVerifyManager
  public init(_ ins: any DCloudUTSExtAPI.UniVerifyManager)
  @objc public func preLoginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerPreLoginOptionsJSONObject)
  @objc public func loginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerLoginOptionsJSONObject)
  @objc public func customLoginByJs(_ options: DCloudUTSExtAPI.UniVerifyManagerCustomLoginOptionsJSONObject)
  @objc public func closeByJs()
  @objc public func isPreLoginValidByJs() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVerifyIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniVerifyIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getUniverifyManagerByJs() -> Swift.Int
  @objc public static func s_getUniVerifyManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public typealias CreateVideoContext = (_ videoId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.VideoContext)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVideoDanmu) @objcMembers public class Danmu : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var text: Swift.String?
  @objc public var color: Swift.String?
  @objc public var time: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVideoRequestFullScreenOptions) @objcMembers public class RequestFullScreenOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var direction: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol VideoContext {
  func play()
  func pause()
  func seek(_ position: Foundation.NSNumber)
  func stop()
  func sendDanmu(_ danmu: DCloudUTSExtAPI.Danmu)
  func playbackRate(_ rate: Foundation.NSNumber)
  func requestFullScreen(_ direction: DCloudUTSExtAPI.RequestFullScreenOptions?)
  func exitFullScreen()
}
@_inheritsConvenienceInitializers @objc(VideoComponent) @objcMembers @_Concurrency.MainActor @preconcurrency @_objcRuntimeName(VideoComponent) public class VideoComponent : DCloudUniappRuntime.UTSContainer<UIKit.UIView> {
  @objc @_Concurrency.MainActor @preconcurrency public var src: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var autoplay: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var loop: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var muted: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var initialTime: Foundation.NSNumber
  @objc @_Concurrency.MainActor @preconcurrency public var duration: Foundation.NSNumber
  @objc @_Concurrency.MainActor @preconcurrency public var controls: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var danmuList: [Foundation.NSDictionary]
  @objc @_Concurrency.MainActor @preconcurrency public var danmuBtn: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var enableDanmu: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var pageGesture: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var direction: Foundation.NSNumber
  @objc @_Concurrency.MainActor @preconcurrency public var showProgress: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var showFullscreenBtn: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var showPlayBtn: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var showCenterPlayBtn: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var showLoading: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var enableProgressGesture: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var objectFit: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var poster: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var showMuteBtn: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var title: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var enablePlayGesture: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var vslideGesture: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var vslideGestureInFullscreen: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var codec: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var httpCache: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var playStrategy: Foundation.NSNumber
  @objc @_Concurrency.MainActor @preconcurrency public var header: [Swift.String : Swift.String]
  @objc @_Concurrency.MainActor @preconcurrency override public func created()
  @objc @_Concurrency.MainActor @preconcurrency override public func NVLoad() -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency override public func NVLayouted()
  @objc @_Concurrency.MainActor @preconcurrency override public func unmounted()
  @objc @_Concurrency.MainActor @preconcurrency public func play()
  @objc @_Concurrency.MainActor @preconcurrency public func pause()
  @objc @_Concurrency.MainActor @preconcurrency public func seek(_ pos: Foundation.NSNumber)
  @objc @_Concurrency.MainActor @preconcurrency public func requestFullScreen(_ direction: Foundation.NSNumber)
  @objc @_Concurrency.MainActor @preconcurrency public func exitFullScreen()
  @objc @_Concurrency.MainActor @preconcurrency public func stop()
  @objc @_Concurrency.MainActor @preconcurrency public func showStatusBar()
  @objc @_Concurrency.MainActor @preconcurrency public func hideStatusBar()
  @objc @_Concurrency.MainActor @preconcurrency public func sendDanmu(_ data: Swift.Dictionary<Swift.String, Any>)
  @objc @_Concurrency.MainActor @preconcurrency public func playbackRate(_ rate: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func updateProp(_ key: Swift.String, _ value: Any?)
  @objc @_Concurrency.MainActor @preconcurrency override public func __$$init()
  @objc @_Concurrency.MainActor @preconcurrency required public init(domNode: DCloudUniappRuntime.UniElementImpl)
  @objc deinit
}
@objc public protocol VideoElement : JavaScriptCore.JSExport {
  @objc func play()
  @objc func pause()
  @objc func seek(_ pos: Foundation.NSNumber)
  @objc func requestFullScreen(_ direction: Foundation.NSNumber)
  @objc func exitFullScreen()
  @objc func stop()
  @objc func showStatusBar()
  @objc func hideStatusBar()
  @objc func sendDanmu(_ data: Swift.Dictionary<Swift.String, Any>)
  @objc func playbackRate(_ rate: Swift.String)
}
@_inheritsConvenienceInitializers @objc(VideoElementImpl) @objcMembers @_objcRuntimeName(VideoElementImpl) public class VideoElementImpl : DCloudUniappRuntime.UniElementImpl, DCloudUTSExtAPI.VideoElement {
  public var targetComponent: DCloudUTSExtAPI.VideoComponent {
    get
  }
  @objc public func play()
  @objc public func pause()
  @objc public func seek(_ pos: Foundation.NSNumber)
  @objc public func requestFullScreen(_ direction: Foundation.NSNumber)
  @objc public func exitFullScreen()
  @objc public func stop()
  @objc public func showStatusBar()
  @objc public func hideStatusBar()
  @objc public func sendDanmu(_ data: Swift.Dictionary<Swift.String, Any>)
  @objc public func playbackRate(_ rate: Swift.String)
  override public func getDefaultStyle() -> Swift.Dictionary<Swift.String, Any?>
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(VideoComponentRegister) @objcMembers public class VideoComponentRegister : ObjectiveC.NSObject {
  @objc public static func registerComponent()
  @objc override dynamic public init()
  @objc deinit
}
public var createVideoContext: (_ videoId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> (any DCloudUTSExtAPI.VideoContext)?
@objc(UTSSDKModulesDCloudUniVideoVideoContextImpl) @objcMembers public class VideoContextImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.VideoContext {
  @objc public init(_ videoElement: any DCloudUTSExtAPI.VideoElement)
  @objc public func play()
  @objc public func pause()
  @objc public func seek(_ position: Foundation.NSNumber)
  @objc public func stop()
  @objc public func sendDanmu(_ danmu: DCloudUTSExtAPI.Danmu)
  @objc public func playbackRate(_ rate: Foundation.NSNumber)
  @objc public func requestFullScreen(_ direction: DCloudUTSExtAPI.RequestFullScreenOptions?)
  @objc public func exitFullScreen()
  @objc public func showStatusBar()
  @objc public func hideStatusBar()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVideoDanmuJSONObject) @objcMembers public class DanmuJSONObject : ObjectiveC.NSObject {
  @objc public var text: Swift.String?
  @objc public var color: Swift.String?
  @objc public var time: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVideoRequestFullScreenOptionsJSONObject) @objcMembers public class RequestFullScreenOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var direction: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
public func createVideoContextByJs(_ videoId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
@objc(UTSSDKModulesDCloudUniVideoVideoContextByJsProxy) @objcMembers public class VideoContextByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.VideoContext
  public init(_ ins: any DCloudUTSExtAPI.VideoContext)
  @objc public func playByJs()
  @objc public func pauseByJs()
  @objc public func seekByJs(_ position: Foundation.NSNumber)
  @objc public func stopByJs()
  @objc public func sendDanmuByJs(_ danmu: DCloudUTSExtAPI.DanmuJSONObject)
  @objc public func playbackRateByJs(_ rate: Foundation.NSNumber)
  @objc public func requestFullScreenByJs(_ direction: DCloudUTSExtAPI.RequestFullScreenOptionsJSONObject?)
  @objc public func exitFullScreenByJs()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVideoIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniVideoIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_createVideoContextByJs(_ videoId: Swift.String, _ component: DCloudUniappRuntime.ComponentPublicInstance?) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public var RequestVirtualPaymentUniErrorSubject: Swift.String
public typealias GetVirtualPaymentManager = () -> any DCloudUTSExtAPI.VirtualPaymentManager
public protocol VirtualPaymentManager {
  func restoreTransactions(_ options: DCloudUTSExtAPI.AppleIAPRestoreOptions)
  func getUnfinishedTransactions(_ options: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionOptions)
  func finishTransaction(_ options: DCloudUTSExtAPI.AppleIAPFinishTransactionOptions)
}
public typealias RequestVirtualPaymentErrorCode = Foundation.NSNumber
public typealias RequestVirtualPayment = (_ options: DCloudUTSExtAPI.RequestVirtualPaymentOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPPromotionalOffer) @objcMembers public class AppleIAPPromotionalOffer : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var offerIdentifier: Swift.String!
  @objc public var keyIdentifier: Swift.String!
  @objc public var nonce: Swift.String!
  @objc public var signature: Swift.String!
  @objc public var timestamp: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPTransactionOptions) @objcMembers public class AppleIAPTransactionOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var productId: Swift.String!
  @objc public var appAccountToken: Swift.String?
  @objc public var quantity: Foundation.NSNumber!
  @objc public var transactionDate: Foundation.Date!
  @objc public var transactionIdentifier: Swift.String!
  @objc public var originalTransactionDate: Foundation.Date!
  @objc public var originalTransactionIdentifier: Swift.String!
  @objc public var jsonRepresentation: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentRequestVirtualPaymentSuccess) @objcMembers public class RequestVirtualPaymentSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var apple: DCloudUTSExtAPI.AppleIAPTransactionOptions?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestVirtualPaymentSuccessCallback = (_ result: DCloudUTSExtAPI.RequestVirtualPaymentSuccess) -> Swift.Void
public typealias RequestVirtualPaymentFail = DCloudUTSExtAPI.IRequestVirtualPaymentFail
public typealias RequestVirtualPaymentFailCallback = (_ result: any DCloudUTSExtAPI.IRequestVirtualPaymentFail) -> Swift.Void
public protocol IRequestVirtualPaymentFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RequestVirtualPaymentErrorCode { get set }
}
public typealias RequestVirtualPaymentComplete = Any
public typealias RequestVirtualPaymentCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPOptions) @objcMembers public class AppleIAPOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var productId: Swift.String!
  @objc public var appAccountToken: Swift.String?
  @objc public var quantity: Foundation.NSNumber!
  @objc public var promotionalOffer: DCloudUTSExtAPI.AppleIAPPromotionalOffer?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentRequestVirtualPaymentOptions) @objcMembers public class RequestVirtualPaymentOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var apple: DCloudUTSExtAPI.AppleIAPOptions?
  @objc public var success: DCloudUTSExtAPI.RequestVirtualPaymentSuccessCallback?
  public var fail: DCloudUTSExtAPI.RequestVirtualPaymentFailCallback?
  @objc public var complete: DCloudUTSExtAPI.RequestVirtualPaymentCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPRestoreSuccess) @objcMembers public class AppleIAPRestoreSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var transactions: [DCloudUTSExtAPI.AppleIAPTransactionOptions]?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias AppleIAPRestoreSuccessCallback = (_ result: DCloudUTSExtAPI.AppleIAPRestoreSuccess) -> Swift.Void
public typealias AppleIAPRestoreFail = DCloudUTSExtAPI.IAppleIAPRestoreFail
public typealias AppleIAPRestoreFailCallback = (_ result: any DCloudUTSExtAPI.IAppleIAPRestoreFail) -> Swift.Void
public protocol IAppleIAPRestoreFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.AppleIAPRestoreErrorCode { get set }
}
public typealias AppleIAPRestoreComplete = Any
public typealias AppleIAPRestoreCompleteCallback = (_ result: Any) -> Swift.Void
public typealias AppleIAPRestoreErrorCode = Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPRestoreOptions) @objcMembers public class AppleIAPRestoreOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.AppleIAPRestoreSuccessCallback?
  public var fail: DCloudUTSExtAPI.AppleIAPRestoreFailCallback?
  @objc public var complete: DCloudUTSExtAPI.AppleIAPRestoreCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPUnfinishedTransactionSuccess) @objcMembers public class AppleIAPUnfinishedTransactionSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var transactions: [DCloudUTSExtAPI.AppleIAPTransactionOptions]?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias AppleIAPUnfinishedTransactionSuccessCallback = (_ result: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionSuccess) -> Swift.Void
public typealias AppleIAPUnfinishedTransactionFail = DCloudUTSExtAPI.IAppleIAPUnfinishedTransactionFail
public typealias AppleIAPUnfinishedTransactionFailCallback = (_ result: any DCloudUTSExtAPI.IAppleIAPUnfinishedTransactionFail) -> Swift.Void
public protocol IAppleIAPUnfinishedTransactionFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionErrorCode { get set }
}
public typealias AppleIAPUnfinishedTransactionComplete = Any
public typealias AppleIAPUnfinishedTransactionCompleteCallback = (_ result: Any) -> Swift.Void
public typealias AppleIAPUnfinishedTransactionErrorCode = Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPUnfinishedTransactionOptions) @objcMembers public class AppleIAPUnfinishedTransactionOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionSuccessCallback?
  public var fail: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionFailCallback?
  @objc public var complete: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPFinishTransactionSuccess) @objcMembers public class AppleIAPFinishTransactionSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var state: Swift.Bool
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias AppleIAPFinishTransactionSuccessCallback = (_ result: DCloudUTSExtAPI.AppleIAPFinishTransactionSuccess) -> Swift.Void
public typealias AppleIAPFinishTransactionFail = DCloudUTSExtAPI.IAppleIAPFinishTransactionFail
public typealias AppleIAPFinishTransactionFailCallback = (_ result: any DCloudUTSExtAPI.IAppleIAPFinishTransactionFail) -> Swift.Void
public protocol IAppleIAPFinishTransactionFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.AppleIAPFinishTransactionFailErrorCode { get set }
}
public typealias AppleIAPFinishTransactionComplete = Any
public typealias AppleIAPFinishTransactionCompleteCallback = (_ result: Any) -> Swift.Void
public typealias AppleIAPFinishTransactionFailErrorCode = Foundation.NSNumber
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPFinishTransactionOptions) @objcMembers public class AppleIAPFinishTransactionOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var transaction: DCloudUTSExtAPI.AppleIAPTransactionOptions!
  @objc public var success: DCloudUTSExtAPI.AppleIAPFinishTransactionSuccessCallback?
  public var fail: DCloudUTSExtAPI.AppleIAPFinishTransactionFailCallback?
  @objc public var complete: DCloudUTSExtAPI.AppleIAPFinishTransactionCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var RequestVirtualPaymentUniErrors: [DCloudUTSExtAPI.RequestVirtualPaymentErrorCode : Swift.String]
public func getRequestVirtualPaymentErrcode(_ errCode: Foundation.NSNumber) -> DCloudUTSExtAPI.RequestVirtualPaymentErrorCode
@objc(UTSSDKModulesDCloudUniVirtualPaymentRequestVirtualPaymentFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVirtualPaymentRequestVirtualPaymentFailImpl) public class RequestVirtualPaymentFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IRequestVirtualPaymentFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RequestVirtualPaymentErrorCode)
  @objc deinit
}
public var AppleIAPRestoreUniErrorSubject: Swift.String
public var AppleIAPRestoreUniErrors: [DCloudUTSExtAPI.AppleIAPRestoreErrorCode : Swift.String]
public func getAppleIAPRestoreErrcode(_ errCode: Foundation.NSNumber) -> DCloudUTSExtAPI.AppleIAPRestoreErrorCode
@objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPRestoreFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPRestoreFailImpl) public class AppleIAPRestoreFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IAppleIAPRestoreFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.AppleIAPRestoreErrorCode)
  @objc deinit
}
public var AppleIAPUnfinishedTransactionUniErrorSubject: Swift.String
public var AppleIAPUnfinishedTransactionUniErrors: [DCloudUTSExtAPI.AppleIAPUnfinishedTransactionErrorCode : Swift.String]
public func getAppleIAPUnfinishedTransactionErrcode(_ errCode: Foundation.NSNumber) -> DCloudUTSExtAPI.AppleIAPUnfinishedTransactionErrorCode
@objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPUnfinishedTransactionFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPUnfinishedTransactionFailImpl) public class AppleIAPUnfinishedTransactionFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IAppleIAPUnfinishedTransactionFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionErrorCode)
  @objc deinit
}
public var AppleIAPFinishTransactionUniErrorSubject: Swift.String
public var AppleIAPFinishTransactionUniErrors: [DCloudUTSExtAPI.AppleIAPFinishTransactionFailErrorCode : Swift.String]
public func getAppleIAPFinishTransactionErrcode(_ errCode: Foundation.NSNumber) -> DCloudUTSExtAPI.AppleIAPFinishTransactionFailErrorCode
@objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPFinishTransactionFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPFinishTransactionFailImpl) public class AppleIAPFinishTransactionFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IAppleIAPFinishTransactionFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.AppleIAPFinishTransactionFailErrorCode)
  @objc deinit
}
public var requestVirtualPayment: (_ options: DCloudUTSExtAPI.RequestVirtualPaymentOptions) -> Swift.Void
public var getVirtualPaymentManager: () -> any DCloudUTSExtAPI.VirtualPaymentManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentVirtualPaymentManagerImpl) @objcMembers public class VirtualPaymentManagerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.VirtualPaymentManager {
  @objc public func restoreTransactions(_ options: DCloudUTSExtAPI.AppleIAPRestoreOptions)
  @objc public func getUnfinishedTransactions(_ options: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionOptions)
  @objc public func finishTransaction(_ options: DCloudUTSExtAPI.AppleIAPFinishTransactionOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentIapManager) @objcMembers public class IapManager : ObjectiveC.NSObject {
  @objc public static var share: DCloudUTSExtAPI.IapManager
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentRequestVirtualPaymentOptionsJSONObject) @objcMembers public class RequestVirtualPaymentOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var apple: DCloudUTSExtAPI.AppleIAPOptions?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPRestoreOptionsJSONObject) @objcMembers public class AppleIAPRestoreOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPUnfinishedTransactionOptionsJSONObject) @objcMembers public class AppleIAPUnfinishedTransactionOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentAppleIAPFinishTransactionOptionsJSONObject) @objcMembers public class AppleIAPFinishTransactionOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var transaction: DCloudUTSExtAPI.AppleIAPTransactionOptions!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func requestVirtualPaymentByJs(_ options: DCloudUTSExtAPI.RequestVirtualPaymentOptionsJSONObject)
public func getVirtualPaymentManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniVirtualPaymentVirtualPaymentManagerByJsProxy) @objcMembers public class VirtualPaymentManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.VirtualPaymentManager
  public init(_ ins: any DCloudUTSExtAPI.VirtualPaymentManager)
  @objc public func restoreTransactionsByJs(_ options: DCloudUTSExtAPI.AppleIAPRestoreOptionsJSONObject)
  @objc public func getUnfinishedTransactionsByJs(_ options: DCloudUTSExtAPI.AppleIAPUnfinishedTransactionOptionsJSONObject)
  @objc public func finishTransactionByJs(_ options: DCloudUTSExtAPI.AppleIAPFinishTransactionOptionsJSONObject)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniVirtualPaymentIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniVirtualPaymentIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_requestVirtualPaymentByJs(_ options: DCloudUTSExtAPI.RequestVirtualPaymentOptionsJSONObject)
  @objc public static func s_getVirtualPaymentManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, *)
public enum UniPurchaseResult {
  case success(DCloudUTSExtAPI.UniPurchase)
  case pending
  case error(DCloudUTSExtAPI.UniStoreKitError)
  public var isSuccess: Swift.Bool {
    get
  }
}
@available(iOS 15.0, *)
public enum UniProductType {
  case consumable
  case nonConsumable
  case autoRenewable
  case nonRenewable
  case unknown
  public static func == (a: DCloudUTSExtAPI.UniProductType, b: DCloudUTSExtAPI.UniProductType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
public struct UniProduct : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String
  public var title: Swift.String?
  public var description: Swift.String?
  public var price: Foundation.Decimal?
  public var displayPrice: Swift.String?
  public var currencyCode: Swift.String?
  public var product: StoreKit.Product?
  public var type: DCloudUTSExtAPI.UniProductType? {
    get
  }
  public var isValidFromAppStore: Swift.Bool {
    get
  }
  public init(identifier: Swift.String)
  public init(product: StoreKit.Product)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DCloudUTSExtAPI.UniProduct, b: DCloudUTSExtAPI.UniProduct) -> Swift.Bool
  @available(iOS 15.0, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct UniPurchaseOption {
  public var quantity: Swift.Int
  public var appAccountToken: Swift.String?
  public var simulatesAskToBuyInSandbox: Swift.Bool
  public var promotionalOffer: DCloudUTSExtAPI.UniPromotionalOffer?
}
public struct UniPromotionalOffer {
  public var offerID: Swift.String
  public var keyID: Swift.String
  public var nonce: Swift.String
  public var signature: Swift.String
  public var timestamp: Swift.Int
}
@available(iOS 15.0, *)
public struct UniPurchase : Swift.Identifiable, Swift.Hashable {
  public var product: DCloudUTSExtAPI.UniProduct
  public var transaction: StoreKit.Transaction
  public var id: Swift.String {
    get
  }
  public var originalID: Swift.String {
    get
  }
  public var productId: Swift.String {
    get
  }
  public var quantity: Swift.Int {
    get
  }
  public var purchaseDate: Foundation.Date {
    get
  }
  public var originalPurchaseDate: Foundation.Date {
    get
  }
  public var appAccountToken: Swift.String? {
    get
  }
  public var jsonRepresentationBase64String: Swift.String {
    get
  }
  public func finish() async
  public func finish(completion: (() -> Swift.Void)?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DCloudUTSExtAPI.UniPurchase, b: DCloudUTSExtAPI.UniPurchase) -> Swift.Bool
  @available(iOS 15.0, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniStoreKit {
  public func fetchProduct(identifier: Swift.String, completion: @escaping (Swift.Result<DCloudUTSExtAPI.UniProduct, DCloudUTSExtAPI.UniStoreKitError>) -> Swift.Void)
  public func fetchProducts(identifiers: [Swift.String], completion: @escaping (Swift.Result<[DCloudUTSExtAPI.UniProduct], DCloudUTSExtAPI.UniStoreKitError>) -> Swift.Void)
  public func fetchProducts(products: [DCloudUTSExtAPI.UniProduct], completion: @escaping (Swift.Result<[DCloudUTSExtAPI.UniProduct], DCloudUTSExtAPI.UniStoreKitError>) -> Swift.Void)
  public func fetchProduct(identifier: Swift.String, success: @escaping (DCloudUTSExtAPI.UniProduct) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniStoreKit {
  public func buyProduct(identifier: Swift.String, completion: @escaping (DCloudUTSExtAPI.UniPurchaseResult) -> Swift.Void)
  public func buyProduct(identifier: Swift.String, quantity: Swift.Int? = 1, appAccountToken: Swift.String? = nil, promotionalOfferID: Swift.String? = nil, promotionalKeyID: Swift.String? = nil, promotionalNonce: Swift.String? = nil, promotionalSigature: Swift.String? = nil, promotionalTimestamp: Swift.Int? = nil, success: @escaping (DCloudUTSExtAPI.UniPurchase) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
  public func buyProduct(identifier: Swift.String, purchaseOption: DCloudUTSExtAPI.UniPurchaseOption? = nil, success: @escaping (DCloudUTSExtAPI.UniPurchase) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
  public func buyProduct(product: DCloudUTSExtAPI.UniProduct, completion: @escaping (DCloudUTSExtAPI.UniPurchaseResult) -> Swift.Void)
  public func buyProduct(product: DCloudUTSExtAPI.UniProduct, success: @escaping (DCloudUTSExtAPI.UniPurchase) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
  public func getActiveEntitlements(completion: @escaping (Swift.Result<[DCloudUTSExtAPI.UniPurchase], DCloudUTSExtAPI.UniStoreKitError>) -> Swift.Void)
  public func getActiveEntitlements(success: @escaping ([DCloudUTSExtAPI.UniPurchase]) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
  public func restorePurchase(success: @escaping ([DCloudUTSExtAPI.UniPurchase]) -> Swift.Void, failure: @escaping (DCloudUTSExtAPI.UniStoreKitError) -> Swift.Void)
  public func getUnfinishedTransactions(completion: @escaping ([DCloudUTSExtAPI.UniPurchase]) -> Swift.Void)
}
public enum UniStoreKitError : Swift.Error, Swift.Equatable {
  case purchase_not_allowed
  case product_not_available
  case promotion_info_invalid
  case user_cancelled
  case verification_failed
  case unknown_error
  case network_error(Foundation.URLError?)
  case system_error
  public static func == (a: DCloudUTSExtAPI.UniStoreKitError, b: DCloudUTSExtAPI.UniStoreKitError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, *)
public class UniStoreKit {
  public static let shared: DCloudUTSExtAPI.UniStoreKit
  public var cacheTransactionsMap: [Swift.String : DCloudUTSExtAPI.UniPurchase]
  @available(iOS 15.0, *)
  public func listenForTransactionUpdates()
  @objc deinit
}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniStoreKit {
  public func fetchProduct(identifier: Swift.String) async -> Swift.Result<DCloudUTSExtAPI.UniProduct, DCloudUTSExtAPI.UniStoreKitError>
  public func fetchProducts(identifiers: [Swift.String]) async -> Swift.Result<[DCloudUTSExtAPI.UniProduct], DCloudUTSExtAPI.UniStoreKitError>
  public func fetchProducts(products: [DCloudUTSExtAPI.UniProduct]) async -> Swift.Result<[DCloudUTSExtAPI.UniProduct], DCloudUTSExtAPI.UniStoreKitError>
}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniStoreKit {
  public func buyProduct(identifier: Swift.String, quantity: Swift.Int? = 1, appAccountToken: Swift.String? = nil, promotionalOfferID: Swift.String? = nil, promotionalKeyID: Swift.String? = nil, promotionalNonce: Swift.String? = nil, promotionalSigature: Swift.String? = nil, promotionalTimestamp: Swift.Int? = nil) async -> DCloudUTSExtAPI.UniPurchaseResult
  public func buyProduct(identifier: Swift.String, purchaseOption: DCloudUTSExtAPI.UniPurchaseOption? = nil) async -> DCloudUTSExtAPI.UniPurchaseResult
  public func buyProduct(product: DCloudUTSExtAPI.UniProduct) async -> DCloudUTSExtAPI.UniPurchaseResult
  public func restorePurchase() async -> Swift.Result<Swift.Bool, DCloudUTSExtAPI.UniStoreKitError>
  public func getActiveEntitlements() async -> Swift.Result<[DCloudUTSExtAPI.UniPurchase], DCloudUTSExtAPI.UniStoreKitError>
  public func getUnfinishedTransactions() async -> [DCloudUTSExtAPI.UniPurchase]
}
public typealias ChooseLocationErrorCode = Foundation.NSNumber
public protocol ChooseLocationSuccess {
  var errMsg: Swift.String { get set }
  var name: Swift.String { get set }
  var address: Swift.String { get set }
  var latitude: Foundation.NSNumber { get set }
  var longitude: Foundation.NSNumber { get set }
}
public typealias ChooseLocationSuccessCallback = (_ result: any DCloudUTSExtAPI.ChooseLocationSuccess) -> Swift.Void
public protocol ChooseLocationFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ChooseLocationErrorCode { get set }
}
public typealias ChooseLocationFailCallback = (_ result: any DCloudUTSExtAPI.ChooseLocationFail) -> Swift.Void
public typealias ChooseLocationComplete = Any
public typealias ChooseLocationCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseLocationChooseLocationOptions) @objcMembers public class ChooseLocationOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var latitude: Foundation.NSNumber?
  @objc public var longitude: Foundation.NSNumber?
  @objc public var keyword: Swift.String?
  @objc public var payload: DCloudUTSFoundation.UTSJSONObject?
  public var success: DCloudUTSExtAPI.ChooseLocationSuccessCallback?
  public var fail: DCloudUTSExtAPI.ChooseLocationFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseLocationCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseLocation = (_ options: DCloudUTSExtAPI.ChooseLocationOptions) -> Swift.Void
@objc(UTSSDKModulesDCloudUniChooseLocationChooseLocationSuccessImpl) @objcMembers public class ChooseLocationSuccessImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.ChooseLocationSuccess {
  @objc public var errMsg: Swift.String
  @objc public var name: Swift.String
  @objc public var address: Swift.String
  @objc public var latitude: Foundation.NSNumber
  @objc public var longitude: Foundation.NSNumber
  @objc public init(_ name: Swift.String, _ address: Swift.String, _ latitude: Foundation.NSNumber, _ longitude: Foundation.NSNumber, _ errMsg: Swift.String = "chooseLocation:ok")
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniChooseLocationChooseLocationFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniChooseLocationChooseLocationFailImpl) public class ChooseLocationFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.ChooseLocationFail {
  @objc override public var errCode: DCloudUTSExtAPI.ChooseLocationErrorCode {
    @objc get
    @objc set(value)
  }
  @objc public init(_ errMsg: Swift.String = "chooseLocation:fail cancel", _ errCode: DCloudUTSExtAPI.ChooseLocationErrorCode = 1)
  @objc deinit
}
public var chooseLocation: (_ options: DCloudUTSExtAPI.ChooseLocationOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseLocationChooseLocationOptionsJSONObject) @objcMembers public class ChooseLocationOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var latitude: Foundation.NSNumber?
  @objc public var longitude: Foundation.NSNumber?
  @objc public var keyword: Swift.String?
  @objc public var payload: DCloudUTSFoundation.UTSJSONObject?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func chooseLocationByJs(_ options: DCloudUTSExtAPI.ChooseLocationOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseLocationIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniChooseLocationIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_chooseLocationByJs(_ options: DCloudUTSExtAPI.ChooseLocationOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias CreateInnerAudioContext = () -> any DCloudUTSExtAPI.InnerAudioContext
public protocol InnerAudioContext {
  var duration: Foundation.NSNumber { get set }
  var currentTime: Foundation.NSNumber { get set }
  var paused: Swift.Bool { get set }
  var src: Swift.String { get set }
  var startTime: Foundation.NSNumber { get set }
  var buffered: Foundation.NSNumber { get set }
  var autoplay: Swift.Bool { get set }
  var loop: Swift.Bool { get set }
  var obeyMuteSwitch: Swift.Bool { get set }
  var volume: Foundation.NSNumber { get set }
  var playbackRate: Foundation.NSNumber? { get set }
  var cache: Swift.Bool { get set }
  func pause()
  func stop()
  func play()
  func seek(_ position: Foundation.NSNumber)
  func destroy()
  func onCanplay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onPlay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onPause(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onStop(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onEnded(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onTimeUpdate(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onError(_ callback: @escaping (_ result: any DCloudUTSExtAPI.ICreateInnerAudioContextFail) -> Swift.Void)
  func onWaiting(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onSeeking(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onSeeked(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offCanplay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offPlay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offPause(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offStop(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offEnded(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offTimeUpdate(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offError(_ callback: @escaping (_ result: any DCloudUTSExtAPI.ICreateInnerAudioContextFail) -> Swift.Void)
  func offWaiting(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offSeeking(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func offSeeked(_ callback: @escaping (_ result: Any) -> Swift.Void)
}
public typealias CreateInnerAudioContextErrorCode = Foundation.NSNumber
public protocol ICreateInnerAudioContextFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.CreateInnerAudioContextErrorCode { get set }
}
public var CreateInnerAudioUniErrorSubject: Swift.String
public var CreateInnerAudioContextUniErrors: [DCloudUTSExtAPI.CreateInnerAudioContextErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniCreateInnerAudioContextCreateInnerAudioContextFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniCreateInnerAudioContextCreateInnerAudioContextFailImpl) public class CreateInnerAudioContextFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.ICreateInnerAudioContextFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.CreateInnerAudioContextErrorCode)
  @objc deinit
}
public var createInnerAudioContext: () -> any DCloudUTSExtAPI.InnerAudioContext
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCreateInnerAudioContextCreateInnerAudioContextFailImplByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniCreateInnerAudioContextCreateInnerAudioContextFailImplByJs) public class CreateInnerAudioContextFailImplByJs : DCloudUTSExtAPI.CreateInnerAudioContextFailImpl {
  @objc override public init(_ errCode: DCloudUTSExtAPI.CreateInnerAudioContextErrorCode)
  @objc deinit
}
public func createInnerAudioContextByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniCreateInnerAudioContextInnerAudioContextByJsProxy) @objcMembers public class InnerAudioContextByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.InnerAudioContext
  public init(_ ins: any DCloudUTSExtAPI.InnerAudioContext)
  @objc public var duration: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var currentTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var paused: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var src: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var startTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var buffered: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var autoplay: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var loop: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var obeyMuteSwitch: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var volume: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var playbackRate: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc public var cache: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public func pauseByJs()
  @objc public func stopByJs()
  @objc public func playByJs()
  @objc public func seekByJs(_ position: Foundation.NSNumber)
  @objc public func destroyByJs()
  @objc public func onCanplayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onPlayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onPauseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onStopByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onEndedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onTimeUpdateByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onWaitingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onSeekingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onSeekedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offCanplayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offPlayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offPauseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offStopByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offEndedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offTimeUpdateByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offWaitingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offSeekingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offSeekedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCreateInnerAudioContextIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniCreateInnerAudioContextIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_createInnerAudioContextByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniAudioPlayer) @objcMembers public class UniAudioPlayer : ObjectiveC.NSObject, DCloudUTSExtAPI.InnerAudioContext {
  @objc public var duration: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var currentTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var paused: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var src: Swift.String {
    @objc get
    @objc set
  }
  @objc public var startTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var buffered: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var autoplay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var loop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var obeyMuteSwitch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var volume: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var playbackRate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var cache: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func seek(_ position: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
  @objc public func destroy()
  @objc public func onCanplay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offCanplay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onPlay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offPlay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onPause(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offPause(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onStop(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offStop(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onEnded(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offEnded(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onTimeUpdate(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offTimeUpdate(_ callback: @escaping (Any) -> Swift.Void)
  public func onError(_ callback: @escaping (any DCloudUTSExtAPI.ICreateInnerAudioContextFail) -> Swift.Void)
  public func offError(_ callback: @escaping (any DCloudUTSExtAPI.ICreateInnerAudioContextFail) -> Swift.Void)
  @objc public func onWaiting(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offWaiting(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onSeeking(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offSeeking(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onSeeked(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offSeeked(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func play()
  @objc public func pause()
  @objc public func stop()
}
extension DCloudUTSExtAPI.UniAudioPlayer {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniShareWithSystemShareWithSystemSuccess) @objcMembers public class ShareWithSystemSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShareWithSystemFail = DCloudUTSExtAPI.IShareWithSystemFail
public protocol IShareWithSystemFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ShareWithSystemErrorCode { get set }
}
public typealias ShareWithSystemErrorCode = Foundation.NSNumber
public typealias ShareWithSystemSuccessCallback = (_ res: DCloudUTSExtAPI.ShareWithSystemSuccess) -> Swift.Void
public typealias ShareWithSystemFailCallback = (_ res: any DCloudUTSExtAPI.IShareWithSystemFail) -> Swift.Void
public typealias ShareWithSystemCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniShareWithSystemShareWithSystemOptions) @objcMembers public class ShareWithSystemOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var type: Swift.String?
  @objc public var summary: Swift.String?
  @objc public var href: Swift.String?
  @objc public var imageUrl: Swift.String?
  @objc public var imagePaths: Swift.Array<Swift.String>?
  @objc public var videoPaths: Swift.Array<Swift.String>?
  @objc public var audioPaths: Swift.Array<Swift.String>?
  @objc public var filePaths: Swift.Array<Swift.String>?
  @objc public var success: DCloudUTSExtAPI.ShareWithSystemSuccessCallback?
  public var fail: DCloudUTSExtAPI.ShareWithSystemFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ShareWithSystemCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ShareWithSystem = (_ options: DCloudUTSExtAPI.ShareWithSystemOptions) -> Swift.Void
public var ShareWithSystemUniErrorSubject: Swift.String
public var ShareWithSystemUniErrors: [DCloudUTSExtAPI.ShareWithSystemErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniShareWithSystemShareWithSystemFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniShareWithSystemShareWithSystemFailImpl) public class ShareWithSystemFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IShareWithSystemFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.ShareWithSystemErrorCode, _ errMsg: Swift.String?)
  @objc deinit
}
public var shareWithSystem: (_ options: DCloudUTSExtAPI.ShareWithSystemOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniShareWithSystemShareManager) @objcMembers public class ShareManager : ObjectiveC.NSObject {
  @objc public static var options: DCloudUTSExtAPI.ShareWithSystemOptions?
  @objc public static var tempBreak: Swift.Bool
  @objc public static func failedAction(_ errCode: Foundation.NSNumber, _ errMsg: Swift.String?)
  @objc public static func successAction()
  @objc public static func isValidHref(_ href: Swift.String?) -> Swift.Bool
  @objc public static func isValidPath(_ path: Swift.String) -> Swift.Bool
  @objc public static func getValidPath(_ path: Swift.String) -> Foundation.URL?
  @objc public static func isValidVideoFile(_ path: Swift.String) -> Swift.Bool
  @objc public static func isValidAudioFile(_ path: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniShareWithSystemShareWithSystemOptionsJSONObject) @objcMembers public class ShareWithSystemOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var type: Swift.String?
  @objc public var summary: Swift.String?
  @objc public var href: Swift.String?
  @objc public var imageUrl: Swift.String?
  @objc public var imagePaths: Swift.Array<Swift.String>?
  @objc public var videoPaths: Swift.Array<Swift.String>?
  @objc public var audioPaths: Swift.Array<Swift.String>?
  @objc public var filePaths: Swift.Array<Swift.String>?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func shareWithSystemByJs(_ options: DCloudUTSExtAPI.ShareWithSystemOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniShareWithSystemIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniShareWithSystemIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_shareWithSystemByJs(_ options: DCloudUTSExtAPI.ShareWithSystemOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetBackgroundAudioManager = () -> any DCloudUTSExtAPI.BackgroundAudioManager
public protocol BackgroundAudioManager {
  var duration: Foundation.NSNumber { get set }
  var currentTime: Foundation.NSNumber { get set }
  var paused: Swift.Bool { get set }
  var src: Swift.String { get set }
  var startTime: Foundation.NSNumber { get set }
  var buffered: Foundation.NSNumber { get set }
  var title: Swift.String { get set }
  var epname: Swift.String { get set }
  var singer: Swift.String { get set }
  var coverImgUrl: Swift.String { get set }
  var webUrl: Swift.String { get set }
  var `protocol`: Swift.String { get set }
  var playbackRate: Foundation.NSNumber? { get set }
  var cache: Swift.Bool { get set }
  func play()
  func pause()
  func seek(_ position: Foundation.NSNumber)
  func stop()
  func onCanplay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onPlay(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onPause(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onStop(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onEnded(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onSeeking(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onSeeked(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onTimeUpdate(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onPrev(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onNext(_ callback: @escaping (_ result: Any) -> Swift.Void)
  func onError(_ callback: @escaping (_ result: any DCloudUTSExtAPI.ICreateBackgroundAudioFail) -> Swift.Void)
  func onWaiting(_ callback: @escaping (_ result: Any) -> Swift.Void)
}
public typealias CreateBackgroundAudioErrorCode = Foundation.NSNumber
public protocol ICreateBackgroundAudioFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.CreateBackgroundAudioErrorCode { get set }
}
public var CreateBackgroundAudioUniErrorSubject: Swift.String
public var CreateBackgroundAudioUniErrors: [DCloudUTSExtAPI.CreateBackgroundAudioErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniGetBackgroundAudioManagerCreateBackgroundAudioFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniGetBackgroundAudioManagerCreateBackgroundAudioFailImpl) public class CreateBackgroundAudioFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.ICreateBackgroundAudioFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.CreateBackgroundAudioErrorCode)
  @objc deinit
}
public var getBackgroundAudioManager: () -> any DCloudUTSExtAPI.BackgroundAudioManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetBackgroundAudioManagerCreateBackgroundAudioFailImplByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniGetBackgroundAudioManagerCreateBackgroundAudioFailImplByJs) public class CreateBackgroundAudioFailImplByJs : DCloudUTSExtAPI.CreateBackgroundAudioFailImpl {
  @objc override public init(_ errCode: DCloudUTSExtAPI.CreateBackgroundAudioErrorCode)
  @objc deinit
}
public func getBackgroundAudioManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniGetBackgroundAudioManagerBackgroundAudioManagerByJsProxy) @objcMembers public class BackgroundAudioManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.BackgroundAudioManager
  public init(_ ins: any DCloudUTSExtAPI.BackgroundAudioManager)
  @objc public var duration: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var currentTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var paused: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var src: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var startTime: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var buffered: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var title: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var epname: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var singer: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var coverImgUrl: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var webUrl: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var `protocol`: Swift.String {
    @objc get
    @objc set(value)
  }
  @objc public var playbackRate: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc public var cache: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public func playByJs()
  @objc public func pauseByJs()
  @objc public func seekByJs(_ position: Foundation.NSNumber)
  @objc public func stopByJs()
  @objc public func onCanplayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onPlayByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onPauseByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onStopByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onEndedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onSeekingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onSeekedByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onTimeUpdateByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onPrevByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onNextByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onWaitingByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniGetBackgroundAudioManagerIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniGetBackgroundAudioManagerIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getBackgroundAudioManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniBackgroundAudioManager) @objcMembers public class UniBackgroundAudioManager : ObjectiveC.NSObject, DCloudUTSExtAPI.BackgroundAudioManager {
  @objc public static var shared: DCloudUTSExtAPI.UniBackgroundAudioManager
  @objc public var duration: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var currentTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var paused: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var src: Swift.String {
    @objc get
    @objc set
  }
  @objc public var startTime: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var buffered: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var title: Swift.String {
    @objc get
    @objc set
  }
  @objc public var epname: Swift.String {
    @objc get
    @objc set
  }
  @objc public var singer: Swift.String {
    @objc get
    @objc set
  }
  @objc public var coverImgUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var webUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var `protocol`: Swift.String {
    @objc get
    @objc set
  }
  @objc public var autoplay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var loop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var obeyMuteSwitch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var volume: Foundation.NSNumber {
    @objc get
    @objc set
  }
  @objc public var playbackRate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var cache: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func seek(_ position: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
  @objc public func destroy()
  @objc public func onCanplay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offCanplay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onPlay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offPlay(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onPause(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offPause(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onStop(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offStop(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onEnded(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offEnded(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onTimeUpdate(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offTimeUpdate(_ callback: @escaping (Any) -> Swift.Void)
  public func onError(_ callback: @escaping (any DCloudUTSExtAPI.ICreateBackgroundAudioFail) -> Swift.Void)
  public func offError(_ callback: @escaping (any DCloudUTSExtAPI.ICreateBackgroundAudioFail) -> Swift.Void)
  @objc public func onWaiting(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offWaiting(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onSeeking(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offSeeking(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onSeeked(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offSeeked(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onPrev(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offPrev(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func onNext(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func offNext(_ callback: @escaping (Any) -> Swift.Void)
  @objc public func play()
  @objc public func pause()
  @objc public func stop()
}
extension DCloudUTSExtAPI.UniBackgroundAudioManager {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public typealias ChooseMediaErrorCode = Foundation.NSNumber
public protocol IChooseMediaError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ChooseMediaErrorCode { get set }
}
public typealias ChooseMediaFileType = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaTempFile) @objcMembers public class ChooseMediaTempFile : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFilePath: Swift.String!
  @objc public var fileType: DCloudUTSExtAPI.ChooseMediaFileType!
  @objc public var size: Foundation.NSNumber!
  @objc public var byteSize: Foundation.NSNumber?
  @objc public var duration: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc public var width: Foundation.NSNumber?
  @objc public var thumbTempFilePath: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaSuccess) @objcMembers public class ChooseMediaSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempFiles: [DCloudUTSExtAPI.ChooseMediaTempFile]!
  @objc public var type: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseMediaFail = DCloudUTSExtAPI.IChooseMediaError
public typealias ChooseMediaSuccessCallback = (_ callback: DCloudUTSExtAPI.ChooseMediaSuccess) -> Swift.Void
public typealias ChooseMediaFailCallback = (_ callback: any DCloudUTSExtAPI.IChooseMediaError) -> Swift.Void
public typealias ChooseMediaCompleteCallback = (_ callback: Any) -> Swift.Void
public typealias ChooseMediaPageOrientation = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaOptions) @objcMembers public class ChooseMediaOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseMediaPageOrientation?
  @objc public var count: Foundation.NSNumber?
  @objc public var mediaType: [Swift.String]?
  @objc public var sourceType: [Swift.String]?
  @objc public var maxDuration: Foundation.NSNumber?
  @objc public var camera: Swift.String?
  @objc public var success: DCloudUTSExtAPI.ChooseMediaSuccessCallback?
  public var fail: DCloudUTSExtAPI.ChooseMediaFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ChooseMediaCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ChooseMedia = (_ options: DCloudUTSExtAPI.ChooseMediaOptions) -> Swift.Void
public var UniError_ChooseMedia: Swift.String
public var ChooseMediaUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniChooseMediaChooseMediaErrorImpl) public class ChooseMediaErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IChooseMediaError {
  @objc public init(_ errCode: DCloudUTSExtAPI.ChooseMediaErrorCode, _ uniErrorSubject: Swift.String = "uni-chooseMedia")
  @objc deinit
}
public var imagePickerManager: DCloudUTSExtAPI.ChooseMediaImagePickerManager?
public var chooseMedia: (_ options: DCloudUTSExtAPI.ChooseMediaOptions) -> Swift.Void
public func chooseMediaWithCamera(_ options: DCloudUTSExtAPI.ChooseMediaOptions)
public func chooseMediaRequestCameraPermission(_ completion: @escaping (_ status: Foundation.NSNumber) -> Swift.Void)
public func chooseMediaRequestMicrophonePermission(_ completion: @escaping (_ status: Foundation.NSNumber) -> Swift.Void)
public func chooseMediaWithSourceType(_ options: DCloudUTSExtAPI.ChooseMediaOptions, _ chooseSourceCallback: @escaping (_ index: Foundation.NSNumber) -> Swift.Void)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaUtil) @objcMembers public class ChooseMediaUtil : ObjectiveC.NSObject {
  @objc public static func createFilePath(_ fileName: Swift.String) -> Swift.String
  @objc public static func saveImage(_ image: UIKit.UIImage, _ path: Swift.String) -> Swift.Bool
  @objc public static func getFristFrameWithVideo(_ reassignedUrl: Foundation.URL) -> UIKit.UIImage?
  @objc public static func getVideoInfo(_ reassignedUrl: Foundation.URL) -> Swift.Dictionary<Swift.String, Any>
  @objc public static func getTempFileWithImage(_ image: UIKit.UIImage) -> DCloudUTSExtAPI.ChooseMediaTempFile?
  @objc public static func getTempFileWithVideo(_ mediaUrl: Foundation.URL) -> DCloudUTSExtAPI.ChooseMediaTempFile?
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaImagePickerManager) @objcMembers @_Concurrency.MainActor @preconcurrency public class ChooseMediaImagePickerManager : ObjectiveC.NSObject, UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public init(_ options: DCloudUTSExtAPI.ChooseMediaOptions)
  @objc @_Concurrency.MainActor @preconcurrency public func chooseMediaWithCamera()
  @objc @_Concurrency.MainActor @preconcurrency public func chooseMediaWithAlbum()
  @objc @_Concurrency.MainActor @preconcurrency public func getMediaTypes(_ types: [Swift.String]?) -> [Swift.String]
  @objc @_Concurrency.MainActor @preconcurrency public func dismiss(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor @preconcurrency @objc public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: Swift.Dictionary<UIKit.UIImagePickerController.InfoKey, Any>)
  @_Concurrency.MainActor @preconcurrency @objc public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @objc deinit
}
@available(iOS 14.0, *)
@objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaPHPickerManager) @objcMembers @_Concurrency.MainActor @preconcurrency public class ChooseMediaPHPickerManager : ObjectiveC.NSObject, PhotosUI.PHPickerViewControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public init(_ options: DCloudUTSExtAPI.ChooseMediaOptions)
  @objc @_Concurrency.MainActor @preconcurrency public func chooseMediaWithAlbum()
  @_Concurrency.MainActor @preconcurrency public func getMediaTypes(_ types: [Swift.String]?) -> PhotosUI.PHPickerFilter?
  @objc @_Concurrency.MainActor @preconcurrency public func getFileType(_ types: [Swift.String]) -> Swift.String
  @_Concurrency.MainActor @preconcurrency public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @objc @_Concurrency.MainActor @preconcurrency public func dismiss(_ picker: PhotosUI.PHPickerViewController)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaChooseMediaOptionsJSONObject) @objcMembers public class ChooseMediaOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var pageOrientation: DCloudUTSExtAPI.ChooseMediaPageOrientation?
  @objc public var count: Foundation.NSNumber?
  @objc public var mediaType: [Swift.String]?
  @objc public var sourceType: [Swift.String]?
  @objc public var maxDuration: Foundation.NSNumber?
  @objc public var camera: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func chooseMediaByJs(_ options: DCloudUTSExtAPI.ChooseMediaOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniChooseMediaIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniChooseMediaIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_chooseMediaByJs(_ options: DCloudUTSExtAPI.ChooseMediaOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias PreviewImageErrorCode = Foundation.NSNumber
public protocol IPreviewImageError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.PreviewImageErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImagePreviewImageSuccess) @objcMembers public class PreviewImageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errSubject: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias PreviewImageFail = DCloudUTSExtAPI.IPreviewImageError
public typealias PreviewImageSuccessCallback = (_ callback: DCloudUTSExtAPI.PreviewImageSuccess) -> Swift.Void
public typealias PreviewImageFailCallback = (_ callback: any DCloudUTSExtAPI.IPreviewImageError) -> Swift.Void
public typealias PreviewImageCompleteCallback = (_ callback: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageLongPressActionsSuccessResult) @objcMembers public class LongPressActionsSuccessResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tapIndex: Foundation.NSNumber!
  @objc public var index: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias LongPressActionsFailResult = DCloudUTSExtAPI.IPreviewImageError
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageLongPressActionsOptions) @objcMembers public class LongPressActionsOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var itemList: [Swift.String]!
  @objc public var itemColor: Swift.String?
  @objc public var success: ((_ result: DCloudUTSExtAPI.LongPressActionsSuccessResult) -> Swift.Void)?
  public var fail: ((_ result: any DCloudUTSExtAPI.IPreviewImageError) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImagePreviewImageOptions) @objcMembers public class PreviewImageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var current: Any?
  @objc public var urls: Swift.Array<Swift.String>!
  @objc public var showmenu: Swift.Bool
  @objc public var indicator: Swift.String?
  @objc public var loop: Swift.Bool
  @objc public var longPressActions: DCloudUTSExtAPI.LongPressActionsOptions?
  @objc public var success: DCloudUTSExtAPI.PreviewImageSuccessCallback?
  public var fail: DCloudUTSExtAPI.PreviewImageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.PreviewImageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ClosePreviewImage = (_ options: DCloudUTSExtAPI.ClosePreviewImageOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageClosePreviewImageSuccess) @objcMembers public class ClosePreviewImageSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ClosePreviewImageFail = DCloudUTSExtAPI.IPreviewImageError
public typealias ClosePreviewImageSuccessCallback = (_ callback: DCloudUTSExtAPI.ClosePreviewImageSuccess) -> Swift.Void
public typealias ClosePreviewImageFailCallback = (_ callback: any DCloudUTSExtAPI.IPreviewImageError) -> Swift.Void
public typealias ClosePreviewImageCompleteCallback = DCloudUTSExtAPI.PreviewImageCompleteCallback
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageClosePreviewImageOptions) @objcMembers public class ClosePreviewImageOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.ClosePreviewImageSuccessCallback?
  public var fail: DCloudUTSExtAPI.ClosePreviewImageFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ClosePreviewImageCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var UniErrorPreviewImage: Swift.String
public var PreviewImageUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniPreviewImagePreviewImageErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniPreviewImagePreviewImageErrorImpl) public class PreviewImageErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IPreviewImageError {
  @objc public init(_ errCode: DCloudUTSExtAPI.PreviewImageErrorCode, _ uniErrorSubject: Swift.String)
  @objc deinit
}
public func __previewImage(_ option: DCloudUTSExtAPI.PreviewImageOptions)
public func __closePreviewImage(_ option: DCloudUTSExtAPI.ClosePreviewImageOptions)
public func previewImage(_ option: DCloudUTSExtAPI.PreviewImageOptions)
public var closePreviewImage: (_ option: DCloudUTSExtAPI.ClosePreviewImageOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageLongPressActionsOptionsJSONObject) @objcMembers public class LongPressActionsOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var itemList: [Swift.String]!
  @objc public var itemColor: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImagePreviewImageOptionsJSONObject) @objcMembers public class PreviewImageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var current: Any?
  @objc public var urls: Swift.Array<Swift.String>!
  @objc public var showmenu: Swift.Bool
  @objc public var indicator: Swift.String?
  @objc public var loop: Swift.Bool
  @objc public var longPressActions: DCloudUTSExtAPI.LongPressActionsOptionsJSONObject?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageClosePreviewImageOptionsJSONObject) @objcMembers public class ClosePreviewImageOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSExtAPI.ClosePreviewImageCompleteCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func previewImageByJs(_ option: DCloudUTSExtAPI.PreviewImageOptionsJSONObject)
public func closePreviewImageByJs(_ options: DCloudUTSExtAPI.ClosePreviewImageOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniPreviewImageIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniPreviewImageIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_previewImageByJs(_ option: DCloudUTSExtAPI.PreviewImageOptionsJSONObject)
  @objc public static func s_closePreviewImageByJs(_ options: DCloudUTSExtAPI.ClosePreviewImageOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSseConnectEventSourceOptions) @objcMembers public class ConnectEventSourceOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ConnectEventSourceCallback = (_ ev: DCloudUTSExtAPI.UniMessageEvent) -> Swift.Void
public typealias ConnectEventSourceErrorCallback = (_ error: DCloudUTSFoundation.UniError) -> Swift.Void
public typealias ConnectEventSource = (_ options: DCloudUTSExtAPI.ConnectEventSourceOptions) -> any DCloudUTSExtAPI.UniEventSource
public protocol UniEventSource {
  func onMessage(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceCallback)
  func onError(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceErrorCallback)
  func onOpen(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceCallback)
  func close()
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSseUniMessageEvent) @objcMembers public class UniMessageEvent : ObjectiveC.NSObject {
  @objc public var type: Swift.String?
  @objc public var data: Any?
  @objc public var lastEventId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public var connectEventSource: (_ options: DCloudUTSExtAPI.ConnectEventSourceOptions) -> any DCloudUTSExtAPI.UniEventSource
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSseMessageEventHandler) @objcMembers public class MessageEventHandler : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var message: DCloudUTSExtAPI.ConnectEventSourceCallback?
  @objc public var error: DCloudUTSExtAPI.ConnectEventSourceErrorCallback?
  @objc public var open: DCloudUTSExtAPI.ConnectEventSourceCallback?
  @objc public var close: DCloudUTSExtAPI.ConnectEventSourceCallback?
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniSseUniEventSourceImpl) @objcMembers public class UniEventSourceImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.UniEventSource {
  @objc public init(_ url: Swift.String, _ headers: DCloudUTSFoundation.UTSJSONObject?)
  @objc public func onMessage(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceCallback)
  @objc public func onError(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceErrorCallback)
  @objc public func onOpen(_ callback: @escaping DCloudUTSExtAPI.ConnectEventSourceCallback)
  @objc public func close()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSseConnectEventSourceOptionsJSONObject) @objcMembers public class ConnectEventSourceOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var url: Swift.String!
  @objc public var header: DCloudUTSFoundation.UTSJSONObject?
  @objc override dynamic public init()
  @objc deinit
}
public func connectEventSourceByJs(_ options: DCloudUTSExtAPI.ConnectEventSourceOptionsJSONObject) -> Swift.Int
@objc(UTSSDKModulesDCloudUniSseUniEventSourceByJsProxy) @objcMembers public class UniEventSourceByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.UniEventSource
  public init(_ ins: any DCloudUTSExtAPI.UniEventSource)
  @objc public func onMessageByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func onOpenByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func closeByJs()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniSseIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniSseIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_connectEventSourceByJs(_ options: DCloudUTSExtAPI.ConnectEventSourceOptionsJSONObject) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public enum EventSourceState {
  case connecting
  case open
  case closed
  public static func == (a: DCloudUTSExtAPI.EventSourceState, b: DCloudUTSExtAPI.EventSourceState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EventSourceProtocol {
  var headers: [Swift.String : Any] { get }
  var retryTime: Swift.Int { get }
  var url: Foundation.URL { get }
  var lastEventId: Swift.String? { get }
  var readyState: DCloudUTSExtAPI.EventSourceState { get }
  func connect(lastEventId: Swift.String?)
  func disconnect()
  func events() -> [Swift.String]
  func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func removeEventListener(_ event: Swift.String)
}
@objc open class EventSource : ObjectiveC.NSObject, DCloudUTSExtAPI.EventSourceProtocol, Foundation.URLSessionDataDelegate {
  final public let url: Foundation.URL
  public var lastEventId: Swift.String? {
    get
  }
  public var retryTime: Swift.Int {
    get
  }
  public var headers: [Swift.String : Any] {
    get
  }
  public var readyState: DCloudUTSExtAPI.EventSourceState {
    get
  }
  public init(url: Foundation.URL, headers: [Swift.String : Any] = [:])
  public func connect(lastEventId: Swift.String? = nil)
  public func disconnect()
  public func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  public func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  public func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func removeEventListener(_ event: Swift.String)
  public func events() -> [Swift.String]
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniCameraComponentRegister) @objcMembers public class UniCameraComponentRegister : ObjectiveC.NSObject {
  @objc public static func registerComponent()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CameraImpl : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum CameraState {
  case ready, accessDenied, noDeviceFound, notDetermined
  public static func == (a: DCloudUTSExtAPI.CameraState, b: DCloudUTSExtAPI.CameraState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraDevice {
  case front, back
  public static func == (a: DCloudUTSExtAPI.CameraDevice, b: DCloudUTSExtAPI.CameraDevice) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraFlashMode : Swift.Int {
  case off, on, auto, torch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CameraOutputMode {
  case stillImage, videoWithMic, videoOnly, videoData
  public static func == (a: DCloudUTSExtAPI.CameraOutputMode, b: DCloudUTSExtAPI.CameraOutputMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureResult {
  case success(content: DCloudUTSExtAPI.CaptureContent)
  case failure(any Swift.Error)
}
public enum CaptureContent {
  case imageData(Foundation.Data)
  case image(UIKit.UIImage)
}
extension DCloudUTSExtAPI.CaptureContent {
  public var asImage: UIKit.UIImage? {
    get
  }
  public var asData: Foundation.Data? {
    get
  }
}
public enum CaptureError : Swift.Error {
  case noImageData
  case invalidImageData
  case noVideoConnection
  case noSampleBuffer
  case assetNotSaved
  public static func == (a: DCloudUTSExtAPI.CaptureError, b: DCloudUTSExtAPI.CaptureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureVideoDataQuality : Swift.String {
  case small, medium, large
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CameraManager : ObjectiveC.NSObject, AVFoundation.AVCaptureFileOutputRecordingDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency open var captureSession: AVFoundation.AVCaptureSession?
  @_Concurrency.MainActor @preconcurrency open var showAccessPermissionPopupAutomatically: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var showErrorBlock: (_ erTitle: Swift.String, _ erMessage: Swift.String) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency open var initDoneCallBack: ((_ maxZoom: Swift.Float) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var stopCallBack: ((_ msg: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open func canSetPreset(preset: AVFoundation.AVCaptureSession.Preset) -> Swift.Bool?
  @_Concurrency.MainActor @preconcurrency open var shouldRespondToOrientationChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldFlipFrontCameraImage: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldKeepViewAtOrientationChanges: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldEnableTapToFocus: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldEnablePinchToZoom: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldEnableExposure: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraIsReady: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var hasFrontCamera: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var hasFlash: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var animateCameraDeviceChange: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var animateShutter: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var cameraDevice: DCloudUTSExtAPI.CameraDevice {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var flashMode: DCloudUTSExtAPI.CameraFlashMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraOutputQuality: AVFoundation.AVCaptureSession.Preset {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraOutputModes: [DCloudUTSExtAPI.CameraOutputMode] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var recordedDuration: CoreMedia.CMTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var recordedFileSize: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var focusMode: AVFoundation.AVCaptureDevice.FocusMode
  @_Concurrency.MainActor @preconcurrency open var exposureMode: AVFoundation.AVCaptureDevice.ExposureMode
  @_Concurrency.MainActor @preconcurrency open var videoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var activeVideoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
  }
  @objc deinit
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addPreviewLayerToView(_ view: UIKit.UIView) -> DCloudUTSExtAPI.CameraState
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addPreviewLayerToView(_ view: UIKit.UIView, newCameraOutputModes: [DCloudUTSExtAPI.CameraOutputMode]) -> DCloudUTSExtAPI.CameraState
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addLayerPreviewToView(_ view: UIKit.UIView, newCameraOutputModes: [DCloudUTSExtAPI.CameraOutputMode], completion: (() -> Swift.Void)?) -> DCloudUTSExtAPI.CameraState
  @_Concurrency.MainActor @preconcurrency open func zoom(_ scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func askUserForCameraPermission(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func stopCaptureSession()
  @_Concurrency.MainActor @preconcurrency open func resumeCaptureSession()
  @_Concurrency.MainActor @preconcurrency open func stopAndRemoveCaptureSession()
  @_Concurrency.MainActor @preconcurrency open func capturePictureWithCompletion(_ quality: Swift.Float, _ imageCompletion: @escaping (DCloudUTSExtAPI.CaptureResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func capturePictureDataWithCompletion(_ imageCompletion: @escaping (DCloudUTSExtAPI.CaptureResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func startRecordingVideo(_ path: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency open func stopVideoRecording()
  public typealias QRCodeDetectionHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency open func deviceOrientationMatchesInterfaceOrientation() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func currentCameraStatus() -> DCloudUTSExtAPI.CameraState
  @_Concurrency.MainActor @preconcurrency open func changeFlashMode() -> DCloudUTSExtAPI.CameraFlashMode
  @_Concurrency.MainActor @preconcurrency open func hasFlash(for cameraDevice: DCloudUTSExtAPI.CameraDevice) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func fileOutput(_: AVFoundation.AVCaptureFileOutput, didStartRecordingTo _: Foundation.URL, from _: [AVFoundation.AVCaptureConnection])
  @_Concurrency.MainActor @preconcurrency @objc open func fileOutput(_: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from _: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func resetOrientation()
  @_Concurrency.MainActor @preconcurrency open func _doFlipAnimation()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
}
extension DCloudUTSExtAPI.CameraManager : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func metadataOutput(_: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from _: AVFoundation.AVCaptureConnection)
}
extension DCloudUTSExtAPI.CameraManager : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public typealias CameraErrorCode = Foundation.NSNumber
public protocol CameraContextFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.CameraErrorCode { get set }
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerStartOptions) @objcMembers public class CameraContextCameraFrameListenerStartOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  @objc public var fail: ((_ result: Any) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerStopOptions) @objcMembers public class CameraContextCameraFrameListenerStopOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  @objc public var fail: ((_ result: Any) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol CameraContextCameraFrameListener {
  func start(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStartOptions)
  func stop(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStopOptions)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextOnCameraFrame) @objcMembers public class CameraContextOnCameraFrame : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var width: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc public var data: DCloudUTSFoundation.ArrayBuffer?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextSetZoomOptions) @objcMembers public class CameraContextSetZoomOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var zoom: Foundation.NSNumber!
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  @objc public var fail: ((_ result: Any) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextTakePhotoResult) @objcMembers public class CameraContextTakePhotoResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempImagePath: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextTakePhotoOptions) @objcMembers public class CameraContextTakePhotoOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var quality: Swift.String?
  @objc public var selfieMirror: Swift.Bool
  @objc public var success: ((_ result: DCloudUTSExtAPI.CameraContextTakePhotoResult) -> Swift.Void)?
  public var fail: ((_ error: any DCloudUTSExtAPI.CameraContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStartRecordTimeoutResult) @objcMembers public class CameraContextStartRecordTimeoutResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempThumbPath: Swift.String?
  @objc public var tempVideoPath: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStartRecordOptions) @objcMembers public class CameraContextStartRecordOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var timeoutCallback: ((_ result: Any) -> Swift.Void)?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var selfieMirror: Swift.Bool
  @objc public var success: ((_ result: Any) -> Swift.Void)?
  public var fail: ((_ error: any DCloudUTSExtAPI.CameraContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStopRecordResult) @objcMembers public class CameraContextStopRecordResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var tempThumbPath: Swift.String?
  @objc public var tempVideoPath: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStopRecordOptions) @objcMembers public class CameraContextStopRecordOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var compressed: Swift.Bool
  @objc public var success: ((_ result: DCloudUTSExtAPI.CameraContextStopRecordResult) -> Swift.Void)?
  public var fail: ((_ error: any DCloudUTSExtAPI.CameraContextFail) -> Swift.Void)?
  @objc public var complete: ((_ result: Any) -> Swift.Void)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol CameraContext {
  func onCameraFrame(_ callback: @escaping (_ frame: DCloudUTSExtAPI.CameraContextOnCameraFrame) -> Swift.Void) -> (any DCloudUTSExtAPI.CameraContextCameraFrameListener)?
  func onIosCameraOriginalFrame(_ callback: @escaping (_ sampleBuffer: CoreMedia.CMSampleBuffer) -> Swift.Void)
  func offIosCameraOriginalFrame()
  func getCurrentZoom() -> Foundation.NSNumber
  func setZoom(_ options: DCloudUTSExtAPI.CameraContextSetZoomOptions)
  func takePhoto(_ options: DCloudUTSExtAPI.CameraContextTakePhotoOptions)
  func startRecord(_ options: DCloudUTSExtAPI.CameraContextStartRecordOptions)
  func stopRecord(_ options: DCloudUTSExtAPI.CameraContextStopRecordOptions)
}
public typealias CreateCameraContext = () -> (any DCloudUTSExtAPI.CameraContext)?
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraBarcodeInformation) @objcMembers public class BarcodeInformation : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var result: Swift.String!
  @objc public var scanType: Swift.String!
  @objc public var charset: Swift.String!
  @objc public var rawData: Swift.String!
  @objc public var scanArea: Swift.Array<Foundation.NSNumber>!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIosScreenShot) @objcMembers public class IosScreenShot : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var image: UIKit.UIImage!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol IosScannerListener {
  func onScanSuccess(_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?)
  func onScanFailure(_ error: Swift.String)
  func needZoom()
  func onLight(_ light: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIosFrameScannerOptions) @objcMembers public class IosFrameScannerOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var sampleBuffer: CoreMedia.CMSampleBuffer!
  @objc public var scanType: Swift.Array<Swift.String>!
  @objc public var autoZoom: Swift.Bool
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  public var iosScannerListenner: (any DCloudUTSExtAPI.IosScannerListener)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIosPhotoScannerOptions) @objcMembers public class IosPhotoScannerOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var scanType: Swift.Array<Swift.String>!
  public var iosScannerListenner: (any DCloudUTSExtAPI.IosScannerListener)?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol IosScanner {
  func processScanBarCode(_ options: DCloudUTSExtAPI.IosFrameScannerOptions)
  func processScanBarCodeWithPhoto(_ options: DCloudUTSExtAPI.IosPhotoScannerOptions)
}
public var UniCameraErrorSubject: Swift.String
public var CameraErrorCodes: [DCloudUTSExtAPI.CameraErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniCameraCameraContextFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniCameraCameraContextFailImpl) public class CameraContextFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.CameraContextFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.CameraErrorCode)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraTypeTest) @objcMembers public class TypeTest : ObjectiveC.NSObject {
  public var a: (any DCloudUTSExtAPI.IosScannerListener)?
  @objc public var b: DCloudUTSExtAPI.IosFrameScannerOptions?
  @objc public var c: DCloudUTSExtAPI.IosPhotoScannerOptions?
  public var d: (any DCloudUTSExtAPI.IosScanner)?
  @objc public var e: DCloudUTSExtAPI.BarcodeInformation?
  @objc public var f: DCloudUTSExtAPI.IosScreenShot?
  @objc override dynamic public init()
  @objc deinit
}
public var iosScanner: (any DCloudUTSExtAPI.IosScanner)?
public func initIosScanner(_ scanner: any DCloudUTSExtAPI.IosScanner)
public func getIosScanner() -> (any DCloudUTSExtAPI.IosScanner)?
@objc public protocol UniCameraElement : JavaScriptCore.JSExport {
  @objc func setZoom(_ zoom: Foundation.NSNumber)
  @objc func getCurrentZoom() -> Foundation.NSNumber
  @objc func setFrameCallback(_ callback: @escaping (_ frame: DCloudUTSExtAPI.CameraContextOnCameraFrame) -> Swift.Void)
  @objc func startOnFrame()
  @objc func stopOnFrame()
  @objc func takePhoto(_ options: DCloudUTSExtAPI.CameraContextTakePhotoOptions)
  @objc func startRecord(_ options: DCloudUTSExtAPI.CameraContextStartRecordOptions)
  @objc func stopRecord(_ options: DCloudUTSExtAPI.CameraContextStopRecordOptions)
  @objc func startAnalysis(_ callback: @escaping (_ sampleBuffer: CoreMedia.CMSampleBuffer) -> Swift.Void)
  @objc func stopAnalysis()
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraUniCameraElementImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniCameraUniCameraElementImpl) public class UniCameraElementImpl : DCloudUniappRuntime.UniElementImpl, DCloudUTSExtAPI.UniCameraElement {
  @objc override public func getIOSView() -> UIKit.UIView?
  @objc public func setZoom(_ zoom: Foundation.NSNumber)
  @objc public func getCurrentZoom() -> Foundation.NSNumber
  @objc public func setFrameCallback(_ callback: @escaping (_ frame: DCloudUTSExtAPI.CameraContextOnCameraFrame) -> Swift.Void)
  @objc public func startOnFrame()
  @objc public func stopOnFrame()
  @objc public func takePhoto(_ options: DCloudUTSExtAPI.CameraContextTakePhotoOptions)
  @objc public func startRecord(_ options: DCloudUTSExtAPI.CameraContextStartRecordOptions)
  @objc public func stopRecord(_ options: DCloudUTSExtAPI.CameraContextStopRecordOptions)
  @objc public func startAnalysis(_ callback: @escaping (_ sampleBuffer: CoreMedia.CMSampleBuffer) -> Swift.Void)
  @objc public func stopAnalysis()
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData, level: DCloudUniappRuntime.UniCSSNodeLevel = super)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniCameraIosScannerListenerImpl) @objcMembers public class IosScannerListenerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.IosScannerListener {
  @objc public init(_ element: any DCloudUniappRuntime.UniNativeViewElement)
  @objc public func onScanSuccess(_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?)
  @objc public func onScanFailure(_ error: Swift.String)
  @objc public func needZoom()
  @objc public func onLight(_ light: Swift.Bool)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniCameraCameraInstance) @objcMembers public class CameraInstance : ObjectiveC.NSObject {
  @objc public var __$$element: any DCloudUniappRuntime.UniNativeViewElement
  @objc public init(_ element1: any DCloudUniappRuntime.UniNativeViewElement)
  @objc public func start(_ position: Swift.String)
  @objc public func stop()
  @objc public func resume()
  @objc public func destory()
  @objc public func switchCamera(_ position: Swift.String)
  @objc public func setFlash(_ flash: Swift.String)
  @objc public func setFrameSize(_ size: Swift.String)
  @objc public func setScanCode(_ on: Swift.Bool)
  @objc public func registerStopCallback()
  @objc public func registerInitDoneCallback()
  @objc public func registerErrorCallback()
  @objc deinit
}
public var createCameraContext: () -> (any DCloudUTSExtAPI.CameraContext)?
@objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerImpl) @objcMembers public class CameraContextCameraFrameListenerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.CameraContextCameraFrameListener {
  @objc public init(_ element: any DCloudUTSExtAPI.UniCameraElement, _ callback: @escaping (_ frame: DCloudUTSExtAPI.CameraContextOnCameraFrame) -> Swift.Void)
  @objc public func start(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStartOptions)
  @objc public func stop(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStopOptions)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniCameraCameraContextImpl) @objcMembers public class CameraContextImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.CameraContext {
  @objc public init(_ element: any DCloudUTSExtAPI.UniCameraElement)
  public func onCameraFrame(_ callback: @escaping (_ frame: DCloudUTSExtAPI.CameraContextOnCameraFrame) -> Swift.Void) -> (any DCloudUTSExtAPI.CameraContextCameraFrameListener)?
  @objc public func setZoom(_ options: DCloudUTSExtAPI.CameraContextSetZoomOptions)
  @objc public func takePhoto(_ options: DCloudUTSExtAPI.CameraContextTakePhotoOptions)
  @objc public func startRecord(_ options: DCloudUTSExtAPI.CameraContextStartRecordOptions)
  @objc public func stopRecord(_ options: DCloudUTSExtAPI.CameraContextStopRecordOptions)
  @objc public func onIosCameraOriginalFrame(_ callback: @escaping (_ sampleBuffer: CoreMedia.CMSampleBuffer) -> Swift.Void)
  @objc public func offIosCameraOriginalFrame()
  @objc public func getCurrentZoom() -> Foundation.NSNumber
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerStartOptionsJSONObject) @objcMembers public class CameraContextCameraFrameListenerStartOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerStopOptionsJSONObject) @objcMembers public class CameraContextCameraFrameListenerStopOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextSetZoomOptionsJSONObject) @objcMembers public class CameraContextSetZoomOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var zoom: Foundation.NSNumber!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextTakePhotoOptionsJSONObject) @objcMembers public class CameraContextTakePhotoOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var quality: Swift.String?
  @objc public var selfieMirror: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStartRecordOptionsJSONObject) @objcMembers public class CameraContextStartRecordOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var timeoutCallback: DCloudUTSFoundation.UTSCallback?
  @objc public var timeout: Foundation.NSNumber?
  @objc public var selfieMirror: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraContextStopRecordOptionsJSONObject) @objcMembers public class CameraContextStopRecordOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var compressed: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIosFrameScannerOptionsJSONObject) @objcMembers public class IosFrameScannerOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var sampleBuffer: CoreMedia.CMSampleBuffer!
  @objc public var scanType: Swift.Array<Swift.String>!
  @objc public var autoZoom: Swift.Bool
  @objc public var width: Foundation.NSNumber!
  @objc public var height: Foundation.NSNumber!
  public var iosScannerListenner: (any DCloudUTSExtAPI.IosScannerListener)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIosPhotoScannerOptionsJSONObject) @objcMembers public class IosPhotoScannerOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var scanType: Swift.Array<Swift.String>!
  public var iosScannerListenner: (any DCloudUTSExtAPI.IosScannerListener)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraTypeTestByJs) @objcMembers public class TypeTestByJs : DCloudUTSExtAPI.TypeTest {
  @objc override dynamic public init()
  @objc deinit
}
public func initIosScannerByJs(_ scanner: any DCloudUTSExtAPI.IosScanner)
public func getIosScannerByJs() -> Swift.Int
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraCameraInstanceByJs) @objcMembers public class CameraInstanceByJs : DCloudUTSExtAPI.CameraInstance {
  @objc public func startByJs(_ position: Swift.String)
  @objc public func stopByJs()
  @objc public func resumeByJs()
  @objc public func destoryByJs()
  @objc public func switchCameraByJs(_ position: Swift.String)
  @objc public func setFlashByJs(_ flash: Swift.String)
  @objc public func setFrameSizeByJs(_ size: Swift.String)
  @objc public func setScanCodeByJs(_ on: Swift.Bool)
  @objc public func registerStopCallbackByJs()
  @objc public func registerInitDoneCallbackByJs()
  @objc public func registerErrorCallbackByJs()
  @objc override public init(_ element1: any DCloudUniappRuntime.UniNativeViewElement)
  @objc deinit
}
public func createCameraContextByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniCameraIosScannerByJsProxy) @objcMembers public class IosScannerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.IosScanner
  public init(_ ins: any DCloudUTSExtAPI.IosScanner)
  @objc public func processScanBarCodeByJs(_ options: DCloudUTSExtAPI.IosFrameScannerOptionsJSONObject)
  @objc public func processScanBarCodeWithPhotoByJs(_ options: DCloudUTSExtAPI.IosPhotoScannerOptionsJSONObject)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniCameraCameraContextByJsProxy) @objcMembers public class CameraContextByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.CameraContext
  public init(_ ins: any DCloudUTSExtAPI.CameraContext)
  @objc public func onCameraFrameByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Swift.Int
  @objc public func onIosCameraOriginalFrameByJs(_ callback: DCloudUTSFoundation.UTSCallback)
  @objc public func offIosCameraOriginalFrameByJs()
  @objc public func getCurrentZoomByJs() -> Foundation.NSNumber
  @objc public func setZoomByJs(_ options: DCloudUTSExtAPI.CameraContextSetZoomOptionsJSONObject)
  @objc public func takePhotoByJs(_ options: DCloudUTSExtAPI.CameraContextTakePhotoOptionsJSONObject)
  @objc public func startRecordByJs(_ options: DCloudUTSExtAPI.CameraContextStartRecordOptionsJSONObject)
  @objc public func stopRecordByJs(_ options: DCloudUTSExtAPI.CameraContextStopRecordOptionsJSONObject)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniCameraCameraContextCameraFrameListenerByJsProxy) @objcMembers public class CameraContextCameraFrameListenerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.CameraContextCameraFrameListener
  public init(_ ins: any DCloudUTSExtAPI.CameraContextCameraFrameListener)
  @objc public func startByJs(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStartOptionsJSONObject)
  @objc public func stopByJs(_ options: DCloudUTSExtAPI.CameraContextCameraFrameListenerStopOptionsJSONObject)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniCameraIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniCameraIndexSwift : ObjectiveC.NSObject {
  public static func s_initIosScannerByJs(_ scanner: any DCloudUTSExtAPI.IosScanner)
  @objc public static func s_getIosScannerByJs() -> Swift.Int
  @objc public static func s_createCameraContextByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public typealias RequestMerchantTransfer = (_ options: DCloudUTSExtAPI.RequestMerchantTransferOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferRequestMerchantTransferOptions) @objcMembers public class RequestMerchantTransferOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var mchId: Swift.String!
  @objc public var package: Swift.String!
  @objc public var appId: Swift.String?
  @objc public var openId: Swift.String?
  @objc public var subAppId: Swift.String?
  @objc public var subMchId: Swift.String?
  @objc public var success: DCloudUTSExtAPI.RequestMerchantTransferSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.RequestMerchantTransferFailCallback?
  @objc public var complete: DCloudUTSExtAPI.RequestMerchantTransferCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias RequestMerchantTransferCompleteCallback = (_ res: DCloudUTSExtAPI.RequestMerchantTransferGeneralCallbackResult) -> Swift.Void
public typealias RequestMerchantTransferFailCallback = (_ res: DCloudUTSExtAPI.RequestMerchantTransferGeneralCallbackResult) -> Swift.Void
public typealias RequestMerchantTransferSuccessCallback = (_ res: DCloudUTSExtAPI.RequestMerchantTransferGeneralCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferRequestMerchantTransferGeneralCallbackResult) @objcMembers public class RequestMerchantTransferGeneralCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var errMsg: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var requestMerchantTransfer: (_ options: DCloudUTSExtAPI.RequestMerchantTransferOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferWxpayManagerHookProxy) @objcMembers public class WxpayManagerHookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationOpenURLOptions(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandler(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: ((_ res: [Any]?) -> Swift.Void)? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferWxpayManager) @objcMembers public class WxpayManager : ObjectiveC.NSObject, DCloudUTSExtAPI.WXApiDelegate {
  @objc public static func buildQueryString(_ parameters: Swift.Dictionary<Swift.String, Swift.String>) -> Swift.String?
  @objc public static func requestMerchantTransfer(_ options: DCloudUTSExtAPI.RequestMerchantTransferOptions)
  @objc public func onResp(_ resp: DCloudUTSExtAPI.BaseResp)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferRequestMerchantTransferOptionsJSONObject) @objcMembers public class RequestMerchantTransferOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var mchId: Swift.String!
  @objc public var package: Swift.String!
  @objc public var appId: Swift.String?
  @objc public var openId: Swift.String?
  @objc public var subAppId: Swift.String?
  @objc public var subMchId: Swift.String?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func requestMerchantTransferByJs(_ options: DCloudUTSExtAPI.RequestMerchantTransferOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferWxpayManagerHookProxyByJs) @objcMembers public class WxpayManagerHookProxyByJs : DCloudUTSExtAPI.WxpayManagerHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptionsByJs(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationOpenURLOptionsByJs(_ app: UIKit.UIApplication?, _ url: Foundation.URL, _ options: Swift.Dictionary<UIKit.UIApplication.OpenURLOptionsKey, Any>? = nil) -> Swift.Bool
  @objc public func applicationContinueUserActivityRestorationHandlerByJs(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: DCloudUTSFoundation.UTSCallback? = nil) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRequestMerchantTransferIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniRequestMerchantTransferIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_requestMerchantTransferByJs(_ options: DCloudUTSExtAPI.RequestMerchantTransferOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias GetRecorderManager = () -> any DCloudUTSExtAPI.RecorderManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRecorderRecorderManagerStartOptions) @objcMembers public class RecorderManagerStartOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var duration: Foundation.NSNumber?
  @objc public var sampleRate: Foundation.NSNumber?
  @objc public var numberOfChannels: Foundation.NSNumber?
  @objc public var encodeBitRate: Foundation.NSNumber?
  @objc public var format: Swift.String?
  @objc public var frameSize: Foundation.NSNumber?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public protocol RecorderManagerOnStopResult {
  var tempFilePath: Swift.String { get set }
}
public protocol RecorderManager {
  func start(_ options: DCloudUTSExtAPI.RecorderManagerStartOptions)
  func pause()
  func resume()
  func stop()
  func onStart(_ options: @escaping (_ result: Any) -> Swift.Void)
  func onPause(_ options: @escaping (_ result: Any) -> Swift.Void)
  func onStop(_ options: @escaping (_ result: any DCloudUTSExtAPI.RecorderManagerOnStopResult) -> Swift.Void)
  func onFrameRecorded(_ options: @escaping (_ result: Any) -> Swift.Void)
  func onError(_ options: @escaping (_ result: any DCloudUTSExtAPI.IRecorderManagerFail) -> Swift.Void)
  func onResume(_ options: @escaping (_ result: Any) -> Swift.Void)
  func onInterruptionBegin(_ options: @escaping (_ result: Any) -> Swift.Void)
  func onInterruptionEnd(_ options: @escaping (_ result: Any) -> Swift.Void)
}
public typealias RecorderManagerErrorCode = Foundation.NSNumber
public protocol IRecorderManagerFail : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.RecorderManagerErrorCode { get set }
}
public var RecorderManagerUniErrorSubject: Swift.String
public var RecorderManagerUniErrors: [DCloudUTSExtAPI.RecorderManagerErrorCode : Swift.String]
@objc(UTSSDKModulesDCloudUniRecorderRecorderManagerFailImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRecorderRecorderManagerFailImpl) public class RecorderManagerFailImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IRecorderManagerFail {
  @objc public init(_ errCode: DCloudUTSExtAPI.RecorderManagerErrorCode, _ errMsg: Swift.String = "")
  @objc deinit
}
public var getRecorderManager: () -> any DCloudUTSExtAPI.RecorderManager
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRecorderRecorderManagerStartOptionsJSONObject) @objcMembers public class RecorderManagerStartOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var duration: Foundation.NSNumber?
  @objc public var sampleRate: Foundation.NSNumber?
  @objc public var numberOfChannels: Foundation.NSNumber?
  @objc public var encodeBitRate: Foundation.NSNumber?
  @objc public var format: Swift.String?
  @objc public var frameSize: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRecorderRecorderManagerFailImplByJs) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniRecorderRecorderManagerFailImplByJs) public class RecorderManagerFailImplByJs : DCloudUTSExtAPI.RecorderManagerFailImpl {
  @objc override public init(_ errCode: DCloudUTSExtAPI.RecorderManagerErrorCode, _ errMsg: Swift.String = super)
  @objc deinit
}
public func getRecorderManagerByJs() -> Swift.Int
@objc(UTSSDKModulesDCloudUniRecorderRecorderManagerByJsProxy) @objcMembers public class RecorderManagerByJsProxy : ObjectiveC.NSObject {
  public var __instance: any DCloudUTSExtAPI.RecorderManager
  public init(_ ins: any DCloudUTSExtAPI.RecorderManager)
  @objc public func startByJs(_ options: DCloudUTSExtAPI.RecorderManagerStartOptionsJSONObject)
  @objc public func pauseByJs()
  @objc public func resumeByJs()
  @objc public func stopByJs()
  @objc public func onStartByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onPauseByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onStopByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onFrameRecordedByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onErrorByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onResumeByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onInterruptionBeginByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc public func onInterruptionEndByJs(_ options: DCloudUTSFoundation.UTSCallback)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniRecorderIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniRecorderIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getRecorderManagerByJs() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(StateChangeRes) @objcMembers public class StateChangeRes : ObjectiveC.NSObject, DCloudUTSExtAPI.RecorderManagerOnStopResult {
  @objc public var tempFilePath: Swift.String
  @objc public var errMsg: Swift.String?
  @objc public var frameBuffer: DCloudUTSFoundation.ArrayBuffer?
  @objc public var isLastFrame: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum UniAudioRecorderFormat : Swift.String, Swift.CaseIterable {
  case aac
  case mp3
  case pcm
  case wav
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DCloudUTSExtAPI.UniAudioRecorderFormat]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [DCloudUTSExtAPI.UniAudioRecorderFormat] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum UniAudioRecorderCategory : Swift.String {
  case recorder
  case playAndRecorder
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UniAudioRecorderEvent {
  case start
  case pause
  case stop
  case resume
  case frameRecorded
  case interruptionBegin
  case interruptionEnd
  case error(Swift.String?)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class UniAudioRecorderManager : ObjectiveC.NSObject, DCloudUTSExtAPI.RecorderManager {
  public static var shared: DCloudUTSExtAPI.UniAudioRecorderManager
  @objc override dynamic public init()
  public func start(_ options: DCloudUTSExtAPI.RecorderManagerStartOptions)
  public func stop()
  public func pause()
  public func resume()
  public func onStart(_ options: @escaping (Any) -> Swift.Void)
  public func onPause(_ options: @escaping (Any) -> Swift.Void)
  public func onStop(_ options: @escaping (any DCloudUTSExtAPI.RecorderManagerOnStopResult) -> Swift.Void)
  public func onResume(_ options: @escaping (Any) -> Swift.Void)
  public func onFrameRecorded(_ options: @escaping (Any) -> Swift.Void)
  public func onError(_ options: @escaping (_ result: any DCloudUTSExtAPI.IRecorderManagerFail) -> Swift.Void)
  public func onInterruptionBegin(_ options: @escaping (Any) -> Swift.Void)
  public func onInterruptionEnd(_ options: @escaping (Any) -> Swift.Void)
  @objc deinit
}
extension DCloudUTSExtAPI.UniAudioRecorderManager : AVFAudio.AVAudioRecorderDelegate {
  @objc dynamic public func audioRecorderDidFinishRecording(_ recorder: AVFAudio.AVAudioRecorder, successfully flag: Swift.Bool)
  @objc dynamic public func audioRecorderEncodeErrorDidOccur(_ recorder: AVFAudio.AVAudioRecorder, error: (any Swift.Error)?)
  @objc dynamic public func audioRecorderBeginInterruption(_ recorder: AVFAudio.AVAudioRecorder)
  @objc dynamic public func audioRecorderEndInterruption(_ recorder: AVFAudio.AVAudioRecorder, withOptions flags: Swift.Int)
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardHideKeyboardSuccess) @objcMembers public class HideKeyboardSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardHideKeyboardFail) @objcMembers public class HideKeyboardFail : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias HideKeyboardSuccessCallback = (_ res: DCloudUTSExtAPI.HideKeyboardSuccess) -> Swift.Void
public typealias HideKeyboardFailCallback = (_ res: DCloudUTSExtAPI.HideKeyboardFail) -> Swift.Void
public typealias HideKeyboardCompleteCallback = (_ res: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardHideKeyboardOptions) @objcMembers public class HideKeyboardOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.HideKeyboardSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.HideKeyboardFailCallback?
  @objc public var complete: DCloudUTSExtAPI.HideKeyboardCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OnKeyboardHeightChangeCallback = (_ res: DCloudUTSExtAPI.OnKeyboardHeightChangeCallbackResult) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardOnKeyboardHeightChangeCallbackResult) @objcMembers public class OnKeyboardHeightChangeCallbackResult : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var height: Foundation.NSNumber!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias HideKeyboard = (_ options: DCloudUTSExtAPI.HideKeyboardOptions?) -> Swift.Void
public typealias OnKeyboardHeightChange = (_ callback: @escaping DCloudUTSExtAPI.OnKeyboardHeightChangeCallback) -> Foundation.NSNumber
public typealias OffKeyboardHeightChange = (_ id: Foundation.NSNumber?) -> Swift.Void
public var hideKeyboard: (_ options: DCloudUTSExtAPI.HideKeyboardOptions?) -> Swift.Void
public var onKeyboardHeightChange: (_ callback: @escaping DCloudUTSExtAPI.OnKeyboardHeightChangeCallback) -> Foundation.NSNumber
public var offKeyboardHeightChange: (_ id: Foundation.NSNumber?) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardHideKeyboardOptionsJSONObject) @objcMembers public class HideKeyboardOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func hideKeyboardByJs(_ options: DCloudUTSExtAPI.HideKeyboardOptionsJSONObject?)
public func onKeyboardHeightChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
public func offKeyboardHeightChangeByJs(_ id: Foundation.NSNumber?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniKeyboardIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniKeyboardIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_hideKeyboardByJs(_ options: DCloudUTSExtAPI.HideKeyboardOptionsJSONObject?)
  @objc public static func s_onKeyboardHeightChangeByJs(_ callback: DCloudUTSFoundation.UTSCallback) -> Foundation.NSNumber
  @objc public static func s_offKeyboardHeightChangeByJs(_ id: Foundation.NSNumber?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias ClipBoardErrorCode = Foundation.NSNumber
public protocol IClipBoardError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.ClipBoardErrorCode { get set }
}
public typealias SetClipboardData = (_ options: DCloudUTSExtAPI.SetClipboardDataOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardSetClipboardDataSuccess) @objcMembers public class SetClipboardDataSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias SetClipboardDataSuccessCallback = (_ result: DCloudUTSExtAPI.SetClipboardDataSuccess) -> Swift.Void
public typealias SetClipboardDataFail = DCloudUTSExtAPI.IClipBoardError
public typealias SetClipboardDataFailCallback = (_ result: any DCloudUTSExtAPI.IClipBoardError) -> Swift.Void
public typealias SetClipboardDataComplete = Any
public typealias SetClipboardDataCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardSetClipboardDataOptions) @objcMembers public class SetClipboardDataOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public var showToast: Swift.Bool
  @objc public var success: DCloudUTSExtAPI.SetClipboardDataSuccessCallback?
  public var fail: DCloudUTSExtAPI.SetClipboardDataFailCallback?
  @objc public var complete: DCloudUTSExtAPI.SetClipboardDataCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetClipboardData = (_ options: DCloudUTSExtAPI.GetClipboardDataOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardGetClipboardDataSuccess) @objcMembers public class GetClipboardDataSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var data: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias GetClipboardDataSuccessCallback = (_ result: DCloudUTSExtAPI.GetClipboardDataSuccess) -> Swift.Void
public typealias GetClipboardDataFail = DCloudUTSExtAPI.IClipBoardError
public typealias GetClipboardDataFailCallback = (_ result: any DCloudUTSExtAPI.IClipBoardError) -> Swift.Void
public typealias GetClipboardDataComplete = Any
public typealias GetClipboardDataCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardGetClipboardDataOptions) @objcMembers public class GetClipboardDataOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var success: DCloudUTSExtAPI.GetClipboardDataSuccessCallback?
  public var fail: DCloudUTSExtAPI.GetClipboardDataFailCallback?
  @objc public var complete: DCloudUTSExtAPI.GetClipboardDataCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public var getClipboardData: (_ options: DCloudUTSExtAPI.GetClipboardDataOptions) -> Swift.Void
public var setClipboardData: (_ options: DCloudUTSExtAPI.SetClipboardDataOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardSetClipboardDataOptionsJSONObject) @objcMembers public class SetClipboardDataOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var data: Swift.String!
  @objc public var showToast: Swift.Bool
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardGetClipboardDataOptionsJSONObject) @objcMembers public class GetClipboardDataOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func getClipboardDataByJs(_ options: DCloudUTSExtAPI.GetClipboardDataOptionsJSONObject)
public func setClipboardDataByJs(_ options: DCloudUTSExtAPI.SetClipboardDataOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniClipboardIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniClipboardIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_getClipboardDataByJs(_ options: DCloudUTSExtAPI.GetClipboardDataOptionsJSONObject)
  @objc public static func s_setClipboardDataByJs(_ options: DCloudUTSExtAPI.SetClipboardDataOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
public typealias MakePhoneCall = (_ options: DCloudUTSExtAPI.MakePhoneCallOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMakePhoneCallMakePhoneCallSuccess) @objcMembers public class MakePhoneCallSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias MakePhoneCallSuccessCallback = (_ result: DCloudUTSExtAPI.MakePhoneCallSuccess) -> Swift.Void
public typealias MakePhoneCallErrorCode = Foundation.NSNumber
public protocol IMakePhoneCallError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.MakePhoneCallErrorCode { get set }
}
public typealias MakePhoneCallFail = DCloudUTSExtAPI.IMakePhoneCallError
public typealias MakePhoneCallFailCallback = (_ result: any DCloudUTSExtAPI.IMakePhoneCallError) -> Swift.Void
public typealias MakePhoneCallComplete = Any
public typealias MakePhoneCallCompleteCallback = (_ result: Any) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMakePhoneCallMakePhoneCallOptions) @objcMembers public class MakePhoneCallOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var phoneNumber: Swift.String!
  @objc public var success: DCloudUTSExtAPI.MakePhoneCallSuccessCallback?
  public var fail: DCloudUTSExtAPI.MakePhoneCallFailCallback?
  @objc public var complete: DCloudUTSExtAPI.MakePhoneCallCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public func isValidPhoneRules(_ input: Swift.String) -> Swift.Bool
public var MakePhoneCallUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniMakePhoneCallMakePhoneCallErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniMakePhoneCallMakePhoneCallErrorImpl) public class MakePhoneCallErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IMakePhoneCallError {
  @objc public init(_ code: DCloudUTSExtAPI.MakePhoneCallErrorCode)
  @objc deinit
}
public var makePhoneCall: (_ options: DCloudUTSExtAPI.MakePhoneCallOptions) -> Swift.Void
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMakePhoneCallMakePhoneCallOptionsJSONObject) @objcMembers public class MakePhoneCallOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var phoneNumber: Swift.String!
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func makePhoneCallByJs(_ options: DCloudUTSExtAPI.MakePhoneCallOptionsJSONObject)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniMakePhoneCallIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniMakePhoneCallIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_makePhoneCallByJs(_ options: DCloudUTSExtAPI.MakePhoneCallOptionsJSONObject)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniScanCodeScanCodeSuccess) @objcMembers public class ScanCodeSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var result: Swift.String!
  @objc public var scanType: Swift.String!
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniScanCodeScanCodeFail) @objcMembers public class ScanCodeFail : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias ScanCodeSuccessCallback = (_ res: DCloudUTSExtAPI.ScanCodeSuccess) -> Swift.Void
public typealias ScanCodeFailCallback = (_ res: DCloudUTSExtAPI.ScanCodeFail) -> Swift.Void
public typealias ScanCodeCompleteCallback = (_ res: Any) -> Swift.Void
public typealias ScanCodeSupportedTypes = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniScanCodeScanCodeOptions) @objcMembers public class ScanCodeOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var onlyFromCamera: Swift.Bool
  @objc public var scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes]?
  @objc public var success: DCloudUTSExtAPI.ScanCodeSuccessCallback?
  @objc public var fail: DCloudUTSExtAPI.ScanCodeFailCallback?
  @objc public var complete: DCloudUTSExtAPI.ScanCodeCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public func scanCode(_ options: DCloudUTSExtAPI.ScanCodeOptions?)
public func drawImage(_ element: any DCloudUniappRuntime.UniElement, _ image: UIKit.UIImage)
@objc(UTSSDKModulesDCloudUniScanCodeIosScannerFrameListenerImpl) @objcMembers public class IosScannerFrameListenerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.IosScannerListener {
  @objc public init(_ successCallback: @escaping (_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?) -> Swift.Void, _ zoomCallback: @escaping () -> Swift.Void, _ lightCallback: @escaping (_ light: Swift.Bool) -> Swift.Void)
  @objc public func onScanSuccess(_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?)
  @objc public func onScanFailure(_ error: Swift.String)
  @objc public func needZoom()
  @objc public func onLight(_ light: Swift.Bool)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniScanCodeIosScannerPhotoListenerImpl) @objcMembers public class IosScannerPhotoListenerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.IosScannerListener {
  @objc public init(_ successCallback: @escaping (_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?) -> Swift.Void, _ failCallback: @escaping (_ error: Swift.String) -> Swift.Void)
  @objc public func onScanSuccess(_ barcodeInformation: Swift.Array<DCloudUTSExtAPI.BarcodeInformation>, _ screenShot: DCloudUTSExtAPI.IosScreenShot?)
  @objc public func onScanFailure(_ error: Swift.String)
  @objc public func needZoom()
  @objc public func onLight(_ light: Swift.Bool)
  @objc deinit
}
public var scanCodeSelectionShowStatus: Swift.Bool
public func setScanCodeSelectionShowStatus(_ show: Swift.Bool)
public func utsNativeProcessScanBarCode(_ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ width: Foundation.NSNumber, _ height: Foundation.NSNumber, _ element: any DCloudUniappRuntime.UniElement, _ showSelectViewCallback: @escaping (_ show: Swift.Bool) -> Swift.Void, _ attachTipViewCallback: @escaping (_ barcodeInformation: Swift.Array<Swift.Dictionary<Swift.String, Any>>) -> Swift.Void, _ singleBarSuccessCallback: @escaping (_ barcodeInformation: Swift.Array<Swift.Dictionary<Swift.String, Any>>) -> Swift.Void, _ zoomCallback: @escaping () -> Swift.Void, _ lightCallback: @escaping (_ light: Swift.Bool) -> Swift.Void)
public func utsNativeProcessScanBarCodeWithPhoto(_ filePath: Swift.String, _ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ singleBarSuccessCallback: @escaping (_ barcodeInformation: Swift.Array<Swift.Dictionary<Swift.String, Any>>) -> Swift.Void, _ failCallback: @escaping (_ error: Swift.String) -> Swift.Void)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniScanCodeScanCodeOptionsJSONObject) @objcMembers public class ScanCodeOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var onlyFromCamera: Swift.Bool
  @objc public var scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes]?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func scanCodeByJs(_ options: DCloudUTSExtAPI.ScanCodeOptionsJSONObject?)
public func drawImageByJs(_ element: any DCloudUniappRuntime.UniElement, _ image: UIKit.UIImage)
public func setScanCodeSelectionShowStatusByJs(_ show: Swift.Bool)
public func utsNativeProcessScanBarCodeByJs(_ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ width: Foundation.NSNumber, _ height: Foundation.NSNumber, _ element: any DCloudUniappRuntime.UniElement, _ showSelectViewCallback: DCloudUTSFoundation.UTSCallback, _ attachTipViewCallback: DCloudUTSFoundation.UTSCallback, _ singleBarSuccessCallback: DCloudUTSFoundation.UTSCallback, _ zoomCallback: DCloudUTSFoundation.UTSCallback, _ lightCallback: DCloudUTSFoundation.UTSCallback)
public func utsNativeProcessScanBarCodeWithPhotoByJs(_ filePath: Swift.String, _ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ singleBarSuccessCallback: DCloudUTSFoundation.UTSCallback, _ failCallback: DCloudUTSFoundation.UTSCallback)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniScanCodeIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniScanCodeIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_scanCodeByJs(_ options: DCloudUTSExtAPI.ScanCodeOptionsJSONObject?)
  @objc public static func s_drawImageByJs(_ element: any DCloudUniappRuntime.UniElement, _ image: UIKit.UIImage)
  @objc public static func s_setScanCodeSelectionShowStatusByJs(_ show: Swift.Bool)
  @objc public static func s_utsNativeProcessScanBarCodeByJs(_ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ width: Foundation.NSNumber, _ height: Foundation.NSNumber, _ element: any DCloudUniappRuntime.UniElement, _ showSelectViewCallback: DCloudUTSFoundation.UTSCallback, _ attachTipViewCallback: DCloudUTSFoundation.UTSCallback, _ singleBarSuccessCallback: DCloudUTSFoundation.UTSCallback, _ zoomCallback: DCloudUTSFoundation.UTSCallback, _ lightCallback: DCloudUTSFoundation.UTSCallback)
  @objc public static func s_utsNativeProcessScanBarCodeWithPhotoByJs(_ filePath: Swift.String, _ scanType: [DCloudUTSExtAPI.ScanCodeSupportedTypes], _ singleBarSuccessCallback: DCloudUTSFoundation.UTSCallback, _ failCallback: DCloudUTSFoundation.UTSCallback)
  @objc override dynamic public init()
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniBarcodeScanningFrameScannerCallback) @objcMembers public class FrameScannerCallback : ObjectiveC.NSObject {
  @objc public init(_ options: DCloudUTSExtAPI.IosFrameScannerOptions)
  @objc deinit
}
@objc(UTSSDKModulesDCloudUniBarcodeScanningPhotoScannerCallback) @objcMembers public class PhotoScannerCallback : ObjectiveC.NSObject {
  @objc public init(_ options: DCloudUTSExtAPI.IosPhotoScannerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniBarcodeScanningIosScannerImpl) @objcMembers public class IosScannerImpl : ObjectiveC.NSObject, DCloudUTSExtAPI.IosScanner {
  @objc public func processScanBarCode(_ options: DCloudUTSExtAPI.IosFrameScannerOptions)
  @objc public func processScanBarCodeWithPhoto(_ options: DCloudUTSExtAPI.IosPhotoScannerOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniBarcodeScanningAppHookProxy) @objcMembers public class AppHookProxy : ObjectiveC.NSObject, DCloudUniappRuntime.UTSiOSHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniBarcodeScanningIosScannerImplByJs) @objcMembers public class IosScannerImplByJs : DCloudUTSExtAPI.IosScannerImpl {
  @objc public func processScanBarCodeByJs(_ options: DCloudUTSExtAPI.IosFrameScannerOptions)
  @objc public func processScanBarCodeWithPhotoByJs(_ options: DCloudUTSExtAPI.IosPhotoScannerOptions)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniBarcodeScanningAppHookProxyByJs) @objcMembers public class AppHookProxyByJs : DCloudUTSExtAPI.AppHookProxy {
  @objc public func applicationDidFinishLaunchingWithOptionsByJs(_ application: UIKit.UIApplication?, _ launchOptions: Swift.Dictionary<UIKit.UIApplication.LaunchOptionsKey, Any>?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenDocumentOpenDocumentSuccess) @objcMembers public class OpenDocumentSuccess : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenDocumentFail = DCloudUTSExtAPI.IOpenDocumentError
public typealias OpenDocumentErrorCode = Foundation.NSNumber
public protocol IOpenDocumentError : DCloudUTSFoundation.IUniError {
  var errCode: DCloudUTSExtAPI.OpenDocumentErrorCode { get set }
}
public typealias OpenDocumentSuccessCallback = (_ res: DCloudUTSExtAPI.OpenDocumentSuccess) -> Swift.Void
public typealias OpenDocumentFailCallback = (_ res: any DCloudUTSExtAPI.IOpenDocumentError) -> Swift.Void
public typealias OpenDocumentCompleteCallback = (_ res: Any) -> Swift.Void
public typealias OpenDocumentSupportedTypes = Swift.String
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenDocumentOpenDocumentOptions) @objcMembers public class OpenDocumentOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var filePath: Swift.String!
  @objc public var fileType: DCloudUTSExtAPI.OpenDocumentSupportedTypes?
  @objc public var success: DCloudUTSExtAPI.OpenDocumentSuccessCallback?
  public var fail: DCloudUTSExtAPI.OpenDocumentFailCallback?
  @objc public var complete: DCloudUTSExtAPI.OpenDocumentCompleteCallback?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public typealias OpenDocument = (_ options: DCloudUTSExtAPI.OpenDocumentOptions?) -> Swift.Void
public var OpenDocumentUniErrorSubject: Swift.String
public var OpenDocumentUniErrors: [Foundation.NSNumber : Swift.String]
@objc(UTSSDKModulesDCloudUniOpenDocumentOpenDocumentErrorImpl) @objcMembers @_objcRuntimeName(UTSSDKModulesDCloudUniOpenDocumentOpenDocumentErrorImpl) public class OpenDocumentErrorImpl : DCloudUTSFoundation.UniError, DCloudUTSExtAPI.IOpenDocumentError {
  @objc public init(_ code: DCloudUTSExtAPI.OpenDocumentErrorCode)
  @objc deinit
}
public var openDocument: (_ options: DCloudUTSExtAPI.OpenDocumentOptions?) -> Swift.Void
@objc(UTSSDKModulesDCloudUniOpenDocumentUniPreviewItem) @objcMembers public class UniPreviewItem : ObjectiveC.NSObject, QuickLook.QLPreviewItem {
  @objc public var previewItemURL: Foundation.URL?
  @objc public init(_ url: Foundation.URL)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenDocumentDocumentPreviewer) @objcMembers @_Concurrency.MainActor @preconcurrency public class DocumentPreviewer : ObjectiveC.NSObject, QuickLook.QLPreviewControllerDataSource, QuickLook.QLPreviewControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public static var shared: DCloudUTSExtAPI.DocumentPreviewer
  @objc @_Concurrency.MainActor @preconcurrency public func presentDocument(_ options: DCloudUTSExtAPI.OpenDocumentOptions)
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt: Swift.Int) -> any QuickLook.QLPreviewItem
  @_Concurrency.MainActor @preconcurrency @objc public func previewControllerDidDismiss(_ controller: QuickLook.QLPreviewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenDocumentOpenDocumentOptionsJSONObject) @objcMembers public class OpenDocumentOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var filePath: Swift.String!
  @objc public var fileType: DCloudUTSExtAPI.OpenDocumentSupportedTypes?
  @objc public var success: DCloudUTSFoundation.UTSCallback?
  @objc public var fail: DCloudUTSFoundation.UTSCallback?
  @objc public var complete: DCloudUTSFoundation.UTSCallback?
  @objc override dynamic public init()
  @objc deinit
}
public func openDocumentByJs(_ options: DCloudUTSExtAPI.OpenDocumentOptionsJSONObject?)
@_inheritsConvenienceInitializers @objc(UTSSDKModulesDCloudUniOpenDocumentIndexSwift) @objcMembers public class UTSSDKModulesDCloudUniOpenDocumentIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_openDocumentByJs(_ options: DCloudUTSExtAPI.OpenDocumentOptionsJSONObject?)
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSExtAPI.DCAlertViewControllerStyle : Swift.Equatable {}
extension DCloudUTSExtAPI.DCAlertViewControllerStyle : Swift.Hashable {}
extension DCloudUTSExtAPI.DCAlertViewControllerStyle : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.DCAlertActionStyle : Swift.Equatable {}
extension DCloudUTSExtAPI.DCAlertActionStyle : Swift.Hashable {}
extension DCloudUTSExtAPI.DCAlertActionStyle : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.DCAlertImagePosition : Swift.Equatable {}
extension DCloudUTSExtAPI.DCAlertImagePosition : Swift.Hashable {}
extension DCloudUTSExtAPI.DCAlertImagePosition : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.MCToast.MCToastType : Swift.Equatable {}
extension DCloudUTSExtAPI.MCToast.MCToastType : Swift.Hashable {}
extension DCloudUTSExtAPI.MCToast.MCToastRespond : Swift.Equatable {}
extension DCloudUTSExtAPI.MCToast.MCToastRespond : Swift.Hashable {}
extension DCloudUTSExtAPI.UniChooseFileManager : Swift.Sendable {}
extension DCloudUTSExtAPI.UniFileSystemManagerFlag : Swift.Equatable {}
extension DCloudUTSExtAPI.UniFileSystemManagerFlag : Swift.Hashable {}
extension DCloudUTSExtAPI.UniFileSystemManagerFlag : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.UniFilePermission : Swift.Equatable {}
extension DCloudUTSExtAPI.UniFilePermission : Swift.Hashable {}
extension DCloudUTSExtAPI.UniFilePermission : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.UniFileEncoding : Swift.Equatable {}
extension DCloudUTSExtAPI.UniFileEncoding : Swift.Hashable {}
extension DCloudUTSExtAPI.UniFileEncoding : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.UniFileDigest.DigestType : Swift.Equatable {}
extension DCloudUTSExtAPI.UniFileDigest.DigestType : Swift.Hashable {}
extension DCloudUTSExtAPI.UniFileDigest.DigestType : Swift.RawRepresentable {}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniProductType : Swift.Equatable {}
@available(iOS 15.0, *)
extension DCloudUTSExtAPI.UniProductType : Swift.Hashable {}
extension DCloudUTSExtAPI.ChooseMediaImagePickerManager : Swift.Sendable {}
@available(iOS 14.0, *)
extension DCloudUTSExtAPI.ChooseMediaPHPickerManager : Swift.Sendable {}
extension DCloudUTSExtAPI.EventSourceState : Swift.Equatable {}
extension DCloudUTSExtAPI.EventSourceState : Swift.Hashable {}
extension DCloudUTSExtAPI.CameraState : Swift.Equatable {}
extension DCloudUTSExtAPI.CameraState : Swift.Hashable {}
extension DCloudUTSExtAPI.CameraDevice : Swift.Equatable {}
extension DCloudUTSExtAPI.CameraDevice : Swift.Hashable {}
extension DCloudUTSExtAPI.CameraFlashMode : Swift.Equatable {}
extension DCloudUTSExtAPI.CameraFlashMode : Swift.Hashable {}
extension DCloudUTSExtAPI.CameraFlashMode : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.CameraOutputMode : Swift.Equatable {}
extension DCloudUTSExtAPI.CameraOutputMode : Swift.Hashable {}
extension DCloudUTSExtAPI.CaptureError : Swift.Equatable {}
extension DCloudUTSExtAPI.CaptureError : Swift.Hashable {}
extension DCloudUTSExtAPI.CaptureVideoDataQuality : Swift.Equatable {}
extension DCloudUTSExtAPI.CaptureVideoDataQuality : Swift.Hashable {}
extension DCloudUTSExtAPI.CaptureVideoDataQuality : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.CameraManager : Swift.Sendable {}
extension DCloudUTSExtAPI.UniAudioRecorderFormat : Swift.Equatable {}
extension DCloudUTSExtAPI.UniAudioRecorderFormat : Swift.Hashable {}
extension DCloudUTSExtAPI.UniAudioRecorderFormat : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.UniAudioRecorderCategory : Swift.Equatable {}
extension DCloudUTSExtAPI.UniAudioRecorderCategory : Swift.Hashable {}
extension DCloudUTSExtAPI.UniAudioRecorderCategory : Swift.RawRepresentable {}
extension DCloudUTSExtAPI.DocumentPreviewer : Swift.Sendable {}
