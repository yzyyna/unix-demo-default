// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DCloudUTSFoundation
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreFoundation
@_exported import DCloudUTSFoundation
import Dispatch
import Foundation
import JavaScriptCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc(Uint16Array) public class Uint16Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  public func toArray() -> [any Swift.FixedWidthInteger]
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Uint16Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint16Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Bool) -> DCloudUTSFoundation.Uint16Array
}
extension DCloudUTSFoundation.Uint16Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Uint16Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint16Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Uint16Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Uint16Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Uint16Array
}
extension DCloudUTSFoundation.Uint16Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint16Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint16Array {
  public func reverse() -> DCloudUTSFoundation.Uint16Array
}
extension DCloudUTSFoundation.Uint16Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint16Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint16Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Uint16Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Uint16Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint16Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint16Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Uint16Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Uint16Array
}
@objc @_hasMissingDesignatedInitializers public class UTSRegExp : Foundation.NSRegularExpression {
  public var lastIndex: Foundation.NSNumber
  public var matchFlag: Swift.String
  public var dotAll: Swift.Bool {
    get
  }
  public var flags: Swift.String {
    get
  }
  public var global: Swift.Bool {
    get
  }
  public var hasIndices: Swift.Bool {
    get
  }
  public var ignoreCase: Swift.Bool {
    get
  }
  public var sticky: Swift.Bool {
    get
  }
  public var unicode: Swift.Bool {
    get
  }
  public var multiline: Swift.Bool {
    get
  }
  public var source: Swift.String {
    get
  }
  public init(_ patternStr: Swift.String? = "", _ flag: Swift.String = "")
  convenience public init(_ reg: DCloudUTSFoundation.UTSRegExp, _ flag: Swift.String = "")
  @discardableResult
  public func exec(_ string: Swift.String) -> DCloudUTSFoundation.RegExpExecArray?
  public func test(_ string: Swift.String) -> Swift.Bool
  public func replace(_ str: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replaceAll(_ str: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String]) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String, _ groups: DCloudUTSFoundation.UTSJSONObject) -> Swift.String)?) -> Swift.String
  public func replaceAll(_ str: Swift.String, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func split(_ str: Swift.String) -> [Swift.String]
  public func split(_ str: Swift.String, _ limit: Swift.Int?) -> [Swift.String]
  public func split(_ str: Swift.String, _ limit: Foundation.NSNumber?) -> [Swift.String]
  public func search(_ str: Swift.String) -> Foundation.NSNumber
  public func firstMatch(_ str: Swift.String) -> Swift.String?
  public func indexOf(_ string: Swift.String) -> Swift.Int
  @objc deinit
}
public typealias RegExpExecArray = Foundation.NSMutableArray
public typealias RegExpMatchArray = DCloudUTSFoundation.RegExpExecArray
extension Foundation.NSMutableArray {
  public var index: Foundation.NSNumber {
    get
    set
  }
  public var input: Swift.String {
    get
    set
  }
  public var groups: DCloudUTSFoundation.UTSJSONObject {
    get
    set
  }
}
extension DCloudUTSFoundation.UTSRegExp : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension DCloudUTSFoundation.UTSRegExp : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
@objc(TypedArray) public class TypedArray : ObjectiveC.NSObject {
  public var buffer: DCloudUTSFoundation.ArrayBuffer
  public var view: DCloudUTSFoundation.DataView
  public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  public var length: Swift.Int {
    get
  }
  public var byteOffset: Swift.Int {
    get
  }
  public var byteLength: Swift.Int {
    get
  }
  required public init(_ length: Swift.Int)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  public func toJSValue(in context: JavaScriptCore.JSContext?) -> JavaScriptCore.JSValue
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.TypedArray {
  public func at(_ index: Swift.Int) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.TypedArray {
  public func copyWithin(_ target: Foundation.NSNumber, _ start: Foundation.NSNumber, _ end: Foundation.NSNumber? = nil) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func every(_ callback: (_ value: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.TypedArray {
  public func fill(_ value: Foundation.NSNumber) -> Self
  public func fill(_ value: Foundation.NSNumber, _ start: Foundation.NSNumber) -> Self
  public func fill(_ value: Foundation.NSNumber, _ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func filter(_ callback: (_ value: Foundation.NSNumber) -> Swift.Bool) -> Self
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Bool) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func find(_ callback: (_ value: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber?
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.TypedArray {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.TypedArray {
  public func forEach(_ callback: (_ value: Foundation.NSNumber) -> Swift.Void)
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Void)
}
extension DCloudUTSFoundation.TypedArray {
  public func indexOf(_ searchElement: Foundation.NSNumber) -> Foundation.NSNumber
  public func indexOf(_ searchElement: Foundation.NSNumber, _ fromIndex: Swift.Int) -> Swift.Int
  public func indexOf(_ searchElement: Foundation.NSNumber, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.TypedArray {
  public func map(_ callback: (_ value: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.TypedArray {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.TypedArray {
  public func slice() -> Self
  public func slice(_ start: Swift.Int) -> Self
  public func slice(_ start: Foundation.NSNumber) -> Self
  public func slice(_ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> Self
  public func slice(_ start: Swift.Int, _ end: Swift.Int) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func some(_ callback: (_ value: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.TypedArray {
  public func subarray() -> Self
  public func subarray(_ start: Swift.Int) -> Self
  public func subarray(_ start: Foundation.NSNumber) -> Self
  public func subarray(_ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> Self
  public func subarray(_ start: Swift.Int, _ end: Swift.Int) -> Self
}
extension DCloudUTSFoundation.TypedArray {
  public func includes(_ searchElement: Foundation.NSNumber) -> Swift.Bool
  public func includes(_ searchElement: Foundation.NSNumber, _ fromIndex: Swift.Int) -> Swift.Bool
  public func includes(_ searchElement: Foundation.NSNumber, _ fromIndex: Foundation.NSNumber) -> Swift.Bool
}
extension DCloudUTSFoundation.TypedArray {
  public class TypedArrayValuesIterator : DCloudUTSFoundation.UTSValueIterable {
    public typealias T = Foundation.NSNumber
    public init(_ array: [Foundation.NSNumber])
    public func valueIterator() -> DCloudUTSFoundation.UTSIterator<Foundation.NSNumber>
    public func next() -> DCloudUTSFoundation.UTSIteratorResult<Foundation.NSNumber>
    @objc deinit
  }
  public func values() -> DCloudUTSFoundation.TypedArray.TypedArrayValuesIterator
}
extension DCloudUTSFoundation.TypedArray {
  public class TypedArrayEntriesIterator : DCloudUTSFoundation.UTSValueIterable {
    public typealias T = [Foundation.NSNumber]
    public init(_ array: [Foundation.NSNumber])
    public func valueIterator() -> DCloudUTSFoundation.UTSIterator<[Foundation.NSNumber]>
    public func next() -> DCloudUTSFoundation.UTSIteratorResult<[Foundation.NSNumber]>
    @objc deinit
  }
  public func entries() -> DCloudUTSFoundation.TypedArray.TypedArrayEntriesIterator
}
extension DCloudUTSFoundation.TypedArray {
  public class UTSTypedArrayKeysIterator : DCloudUTSFoundation.UTSValueIterable {
    public typealias T = Foundation.NSNumber
    public init(_ length: Swift.Int)
    public func valueIterator() -> DCloudUTSFoundation.UTSIterator<Foundation.NSNumber>
    public func next() -> DCloudUTSFoundation.UTSIteratorResult<Foundation.NSNumber>
    @objc deinit
  }
  public func keys() -> DCloudUTSFoundation.TypedArray.UTSTypedArrayKeysIterator
}
extension DCloudUTSFoundation.TypedArray {
  public func toString() -> Swift.String
}
extension DCloudUTSFoundation.TypedArray : DCloudUTSFoundation.UTSValueIterable {
  public typealias T = Foundation.NSNumber
  public func valueIterator() -> DCloudUTSFoundation.UTSIterator<Foundation.NSNumber>
}
extension DCloudUTSFoundation.TypedArray : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
@_inheritsConvenienceInitializers @objc(TypedBigIntArray) public class TypedBigIntArray : DCloudUTSFoundation.TypedArray {
  required public init(_ length: Swift.Int)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = super, _ length: Foundation.NSNumber? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(TypedIntArray) public class TypedIntArray : DCloudUTSFoundation.TypedArray {
  required public init(_ length: Swift.Int)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = super, _ length: Foundation.NSNumber? = nil)
  @objc deinit
}
public protocol UTSValueIterable {
  associatedtype T
  func valueIterator() -> DCloudUTSFoundation.UTSIterator<Self.T>
  var valueSequence: DCloudUTSFoundation.UTSSequence<Self.T> { get }
}
extension DCloudUTSFoundation.UTSValueIterable {
  public var valueSequence: DCloudUTSFoundation.UTSSequence<Self.T> {
    get
  }
}
public struct UTSSequence<T> : Swift.Sequence {
  public func makeIterator() -> DCloudUTSFoundation.UTSIterator<T>
  public typealias Element = T
  public typealias Iterator = DCloudUTSFoundation.UTSIterator<T>
}
public class UTSIteratorResult<T> {
  public var done: Swift.Bool
  public var value: T?
  public init(_ done: Swift.Bool, _ value: T? = nil)
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  @objc deinit
}
public class UTSIterator<T> : Swift.IteratorProtocol {
  public func next() -> T?
  public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public init()
  public typealias Element = T
  @objc deinit
}
public protocol UTSKeyIterable {
  func ignoredKeys() -> [Swift.String]
  func keyIterator() -> DCloudUTSFoundation.UTSIterator<Swift.String>
  var keySequence: DCloudUTSFoundation.UTSSequence<Swift.String> { get }
}
extension DCloudUTSFoundation.UTSKeyIterable {
  public func ignoredKeys() -> [Swift.String]
  public func keyIterator() -> DCloudUTSFoundation.UTSIterator<Swift.String>
  public var keySequence: DCloudUTSFoundation.UTSSequence<Swift.String> {
    get
  }
}
extension DCloudUTSFoundation.UTSKeyIterable {
  public func utsSubscriptGetValue(_ key: Swift.String) -> Any?
  public func utsSubscriptCheckValue<T>(_ value: Any?) throws -> T
  public func utsSubscriptCheckValueIfPresent<T>(_ value: Any?) throws -> T?
}
public class UTSKeyIterator : DCloudUTSFoundation.UTSIterator<Swift.String> {
  public init(_ obj: Any, _ ingoredKeys: Swift.Array<Swift.String>)
  override public func next() -> Swift.String?
  @objc deinit
}
public func resolveUTSKeyIterator<T>(_ iterator: T) -> DCloudUTSFoundation.UTSSequence<Swift.String> where T : DCloudUTSFoundation.UTSKeyIterable
public func resolveUTSKeyIterator<T>(_ iterator: T) -> T
public func resolveUTSValueIterator<T>(_ iterator: T) -> DCloudUTSFoundation.UTSSequence<T.T> where T : DCloudUTSFoundation.UTSValueIterable
public func resolveUTSValueIterator<T>(_ iterator: T) -> any DCloudUTSFoundation.UTSObject where T : DCloudUTSFoundation.UTSObject
public func resolveUTSValueIterator<T>(_ iterator: T) -> T
@_inheritsConvenienceInitializers @objcMembers @objc(UTSPromiseAggregateError) public class UTSPromiseAggregateError : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var message: Swift.String
  public var errors: [Any?]
  @objc public func addError(_ error: Any?)
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSFoundation.UTSPromise {
  @discardableResult
  final public func finally(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping () -> Swift.Void) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func finally<R>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromiseAlways<R>) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func finally<R>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromiseAlways<DCloudUTSFoundation.UTSPromise<R>>) -> DCloudUTSFoundation.UTSPromise<Value>
}
extension DCloudUTSFoundation.UTSPromise {
  public static func all<T>(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<T>]) -> DCloudUTSFoundation.UTSPromise<[T]>
  public static func all(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<Any>]) -> DCloudUTSFoundation.UTSPromise<[Any]>
}
@_hasMissingDesignatedInitializers public class UTSPromiseSettledResult<T> {
  public var status: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UTSPromiseFulfilledResult<T> : DCloudUTSFoundation.UTSPromiseSettledResult<T>, Swift.CustomReflectable {
  override public var status: Swift.String {
    get
    set
  }
  public var value: T
  public var customMirror: Swift.Mirror {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UTSPromiseRejectedResult<T> : DCloudUTSFoundation.UTSPromiseSettledResult<T>, Swift.CustomReflectable {
  override public var status: Swift.String {
    get
    set
  }
  public var reason: Any?
  public var customMirror: Swift.Mirror {
    get
  }
  @objc deinit
}
extension DCloudUTSFoundation.UTSPromise {
  public static func allSettled<T>(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<T>]) -> DCloudUTSFoundation.UTSPromise<[DCloudUTSFoundation.UTSPromiseSettledResult<T>]>
  public static func allSettled(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<Any>]) -> DCloudUTSFoundation.UTSPromise<[DCloudUTSFoundation.UTSPromiseSettledResult<Any>]>
}
extension DCloudUTSFoundation.UTSPromise {
  public static func any<T>(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<T>]) -> DCloudUTSFoundation.UTSPromise<T>
  public static func any(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<Any>]) -> DCloudUTSFoundation.UTSPromise<Any>
}
extension DCloudUTSFoundation.UTSPromise {
  public static func race<T>(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<T>]) -> DCloudUTSFoundation.UTSPromise<T>
  public static func race(on queue: Dispatch.DispatchQueue = .promises, _ promises: [DCloudUTSFoundation.UTSPromise<Any>]) -> DCloudUTSFoundation.UTSPromise<Any>
}
extension DCloudUTSFoundation.UTSPromise {
  public static func resolve() -> DCloudUTSFoundation.UTSPromise<Any?>
  public static func resolve<T>(_ value: T) -> DCloudUTSFoundation.UTSPromise<T>
  public static func resolve<T>(_ value: DCloudUTSFoundation.UTSPromise<T>) -> DCloudUTSFoundation.UTSPromise<T>
  public static func reject() -> DCloudUTSFoundation.UTSPromise<Value>
  public static func reject(_ value: Any?) -> DCloudUTSFoundation.UTSPromise<Value>
}
@objc public protocol UniTextEncoder : JavaScriptCore.JSExport {
  @objc static var encoding: Swift.String { get }
  @objc static func encode(_ input: Swift.String?) -> JavaScriptCore.JSValue
}
@_inheritsConvenienceInitializers @objc(UniTextEncoder) public class UniTextEncoderImpl : ObjectiveC.NSObject, DCloudUTSFoundation.UniTextEncoder {
  @objc public static var encoding: Swift.String
  @objc public static func encode(_ input: Swift.String? = nil) -> JavaScriptCore.JSValue
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TextEncoder : DCloudUTSFoundation.UniTextEncoderImpl {
  public func encode(_ input: Swift.String? = nil) -> DCloudUTSFoundation.Uint8Array
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Float32Array) public class Float32Array : DCloudUTSFoundation.TypedArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: [Swift.Double])
  public init(_ array: [Swift.Float])
  public init(_ array: DCloudUTSFoundation.TypedArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Float32Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Float32Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Bool) -> DCloudUTSFoundation.Float32Array
}
extension DCloudUTSFoundation.Float32Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Float32Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float32Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Float32Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Float32Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Float32Array
}
extension DCloudUTSFoundation.Float32Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float32Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float32Array {
  public func reverse() -> DCloudUTSFoundation.Float32Array
}
extension DCloudUTSFoundation.Float32Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Float32Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Float32Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Float32Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Float32Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Float32Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Float32Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Float32Array
}
@_hasMissingDesignatedInitializers public class Math {
  public static var E: Foundation.NSNumber {
    get
  }
  public static var LN10: Foundation.NSNumber {
    get
  }
  public static var LN2: Foundation.NSNumber {
    get
  }
  public static var LOG10E: Foundation.NSNumber {
    get
  }
  public static var LOG2E: Foundation.NSNumber {
    get
  }
  public static var PI: Foundation.NSNumber {
    get
  }
  public static var SQRT1_2: Foundation.NSNumber {
    get
  }
  public static var SQRT2: Foundation.NSNumber {
    get
  }
  public static func abs(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func acos(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func acosh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func asin(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func asinh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atan(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atan2(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atanh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cbrt(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ceil(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cos(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cosh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sin(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sinh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func tan(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func tanh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func exp(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func expm1(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func floor(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func hypot(_ numbers: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func max(_ x: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func min(_ x: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func log(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log10(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log1p(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log2(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func pow(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sqrt(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func random() -> Foundation.NSNumber
  public static func round(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sign(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func trunc(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func imul(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func clz32(_ x: Any? = nil) -> Foundation.NSNumber
  public static func fround(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func fround(_ number: Swift.Double) -> Swift.Double
  @objc deinit
}
@objc(DataView) public class DataView : ObjectiveC.NSObject {
  public var buffer: DCloudUTSFoundation.ArrayBuffer
  public var _buffer_internal: Swift.UnsafeMutableRawPointer
  public var byteOffset: Foundation.NSNumber
  public var byteLength: Foundation.NSNumber
  public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ byteOffset: Foundation.NSNumber = 0, _ byteLength: Foundation.NSNumber? = nil)
  public func getUint8(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getUint8(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getUint16(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getUint16(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getUint32(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getUint32(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getBigUint64(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getBigUint64(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt8(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt8(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt16(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt16(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt32(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getInt32(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getBigInt64(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getBigInt64(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  @available(iOS 14.0, *)
  public func getFloat16(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  @available(iOS 14.0, *)
  public func getFloat16(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getFloat32(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getFloat32(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getFloat64(_ offset: Foundation.NSNumber, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func getFloat64(_ offset: Swift.Int, _ littleEndian: Swift.Bool = false) -> Foundation.NSNumber
  public func setUint8(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setUint8(_ offset: Swift.Int, _ value: Swift.UInt8, _ littleEndian: Swift.Bool = false)
  public func setUint16(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setUint16(_ offset: Swift.Int, _ value: Swift.UInt16, _ littleEndian: Swift.Bool = false)
  public func setUint32(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setUint32(_ offset: Swift.Int, _ value: Swift.UInt32, _ littleEndian: Swift.Bool = false)
  public func setBigUint64(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setBigUint64(_ offset: Swift.Int, _ value: Swift.UInt64, _ littleEndian: Swift.Bool = false)
  public func setInt8(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setInt8(_ offset: Swift.Int, _ value: Swift.Int8, _ littleEndian: Swift.Bool = false)
  public func setInt16(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setInt16(_ offset: Swift.Int, _ value: Swift.Int16, _ littleEndian: Swift.Bool = false)
  public func setInt32(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setInt32(_ offset: Swift.Int, _ value: Swift.Int32, _ littleEndian: Swift.Bool = false)
  public func setBigInt64(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setBigInt64(_ offset: Swift.Int, _ value: Swift.Int64, _ littleEndian: Swift.Bool = false)
  @available(iOS 14.0, *)
  public func setFloat16(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  @available(iOS 14.0, *)
  public func setFloat16(_ offset: Swift.Int, _ value: Swift.Float16, _ littleEndian: Swift.Bool = false)
  public func setFloat32(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setFloat32(_ offset: Swift.Int, _ value: Swift.Float32, _ littleEndian: Swift.Bool = false)
  public func setFloat64(_ offset: Foundation.NSNumber, _ value: Foundation.NSNumber, _ littleEndian: Swift.Bool = false)
  public func setFloat64(_ offset: Swift.Int, _ value: Swift.Float64, _ littleEndian: Swift.Bool = false)
  @objc deinit
}
open class UniCallbackWrapper<R, P> : ObjectiveC.NSObject {
  public init(_ callback: (() -> R)?)
  public init(_ callback1: ((P) -> R)?)
  public func callAsFunction() -> R?
  public func callAsFunction(_ p: P) -> R?
  @objc deinit
}
public typealias UTSPromiseAlways<Result> = () throws -> Result
extension DCloudUTSFoundation.UTSPromise {
  @discardableResult
  final public func always(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping () -> Swift.Void) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func always<R>(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromiseAlways<R>) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func always<R>(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromiseAlways<DCloudUTSFoundation.UTSPromise<R>>) -> DCloudUTSFoundation.UTSPromise<Value>
}
extension DCloudUTSFoundation.UTSPromise {
  public typealias Async = (@escaping (Value) -> Swift.Void, @escaping (Any?) -> Swift.Void) throws -> Swift.Void
  public typealias Async1 = (@escaping (Value) -> Swift.Void) throws -> Swift.Void
  convenience public init(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Async)
  convenience public init(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Async1)
}
@objc public protocol UniTextDecoder : JavaScriptCore.JSExport {
  @objc static func decode(_ input: DCloudUTSFoundation.ArrayBufferWrapper, _ encoding: Swift.String?) -> Swift.String
  @objc static func decodeTypedArray(_ input: DCloudUTSFoundation.TypedArrayWrapper, _ encoding: Swift.String?) -> Swift.String
}
public enum TextDecoderSupportEncoding : Swift.String {
  case utf8
  case utf_8
  case gbk
  case gb2312
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(UniTextDecoder) public class UniTextDecoderImpl : ObjectiveC.NSObject, DCloudUTSFoundation.UniTextDecoder {
  @objc public static func decode(_ input: DCloudUTSFoundation.ArrayBufferWrapper, _ encoding: Swift.String? = nil) -> Swift.String
  @objc public static func decodeTypedArray(_ input: DCloudUTSFoundation.TypedArrayWrapper, _ encoding: Swift.String? = nil) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TextDecoder : DCloudUTSFoundation.UniTextDecoderImpl {
  public var encoding: Swift.String
  public init(_ encoding: Swift.String? = nil)
  public func decode(_ input: DCloudUTSFoundation.ArrayBuffer) -> Swift.String
  public func decode(_ input: DCloudUTSFoundation.TypedArray) -> Swift.String
  @objc deinit
}
extension Foundation.Data {
  public func decode(using encoding: DCloudUTSFoundation.TextDecoderSupportEncoding) -> Swift.String
  public func decode(using cfEncoding: CoreFoundation.CFStringEncodings) -> Swift.String?
}
@_inheritsConvenienceInitializers @objc(UTSCallback) @objcMembers open class UTSCallback : ObjectiveC.NSObject {
  @objc public var wxCallabck: DCloudUTSFoundation.DCUTSBlock?
  @objc public var callbackId: Swift.Int
  @objc public var callbackName: Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func callAsFunction(_ args: Any...)
}
public typealias Map = Swift.Dictionary
extension Swift.Dictionary {
  public var size: Swift.Int {
    get
  }
  public init(_ array: [[Any]])
  @discardableResult
  public mutating func set(_ key: Key, _ value: Value) -> Swift.Dictionary<Key, Value>
  public func get(_ key: Key) -> Value?
  public mutating func clear()
  public mutating func delete(_ key: Key) -> Swift.Bool
  public func has(_ key: Key) -> Swift.Bool
  public func forEach(_ action: (_ value: Value) -> Swift.Void)
  public func forEach(_ action: (_ value: Value, _ key: Key) -> Swift.Void)
  public func forEach(_ action: (_ value: Value, _ key: Key, _ map: Swift.Dictionary<Key, Value>) -> Swift.Void)
}
extension Swift.Dictionary : DCloudUTSFoundation.UTSValueIterable {
  public typealias T = [Any?]
  public func valueIterator() -> DCloudUTSFoundation.UTSIterator<[Any?]>
}
@_inheritsConvenienceInitializers @objc(Int8Array) public class Int8Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Int8Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int8Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Bool) -> DCloudUTSFoundation.Int8Array
}
extension DCloudUTSFoundation.Int8Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Int8Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int8Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Int8Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Int8Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Int8Array
}
extension DCloudUTSFoundation.Int8Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int8Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int8Array {
  public func reverse() -> DCloudUTSFoundation.Int8Array
}
extension DCloudUTSFoundation.Int8Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int8Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int8Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Int8Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Int8Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int8Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int8Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Int8Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Int8Array
}
public typealias UTSNumber = Foundation.NSNumber
extension Foundation.NSNumber {
  @discardableResult
  prefix public static func - (item: Foundation.NSNumber) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  convenience public init(_ item: Swift.CChar)
  convenience public init(_ item: Swift.Int16)
  convenience public init(_ item: Swift.Int32)
  convenience public init(_ item: Swift.Int64)
  convenience public init(_ item: Swift.UInt8)
  convenience public init(_ item: Swift.UInt16)
  convenience public init(_ item: Swift.UInt32)
  convenience public init(_ item: Swift.UInt64)
  convenience public init(_ item: Swift.Float)
  convenience public init(_ item: Swift.Double)
  convenience public init(_ item: Swift.Bool)
  convenience public init(_ item: Swift.Int)
}
extension Foundation.NSNumber {
  public static func from(_ value: Swift.Int) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int64) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int32) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int16) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt64) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt32) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt16) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt8) -> Foundation.NSNumber
  public static func from(_ value: Swift.Float) -> Foundation.NSNumber
  public static func from(_ value: Swift.Double) -> Foundation.NSNumber
  public static func from(_ value: Swift.Bool) -> Foundation.NSNumber
  public static func from(_ value: Swift.CChar) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  public static func + (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Swift.String) -> Swift.String
  public static func += (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  @discardableResult
  postfix public static func ++ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  @discardableResult
  postfix public static func -- (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  @discardableResult
  prefix public static func ++ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  @discardableResult
  prefix public static func -- (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>> (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>> (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func >>>= (l: inout Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>>= (l: inout Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func << (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func << (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func >> (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >> (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: any Swift.BinaryFloatingPoint) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: any Swift.BinaryFloatingPoint) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func & (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func & (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func & (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func &= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func | (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func | (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func | (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func |= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func ^ (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ^ (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func ^ (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ^= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  prefix public static func ~ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  public static func > (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func > (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func < (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func == (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func == (r: Any, l: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func === (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func != (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func != (r: Any, l: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func !== (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func >= (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func >= (r: Swift.Int, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.Float, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.Double, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.UInt, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func <= (r: Swift.Int, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.Float, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.Double, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.UInt, l: Foundation.NSNumber) -> Swift.Bool
}
extension Foundation.NSNumber {
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.String
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func parseInt(_ value: Swift.String) -> Foundation.NSNumber
  public static func parseInt(_ value: Swift.String, _ radix: Foundation.NSNumber) -> Foundation.NSNumber
  public static func parseInt(_ value: Swift.String, _ radix: Swift.Int) -> Foundation.NSNumber
  public static func parseFloat(_ str: Swift.String) -> Foundation.NSNumber
  public func toInt() -> Swift.Int
  public func toFloat() -> Swift.Float
  public func toDouble() -> Swift.Double
  public func toInt64() -> Swift.Int64
  public func toInt32() -> Swift.Int32
  public func toInt16() -> Swift.Int16
  public func toInt8() -> Swift.Int8
  public func toUInt() -> Swift.UInt
  public func toUInt64() -> Swift.UInt64
  public func toUInt32() -> Swift.UInt32
  public func toUInt16() -> Swift.UInt16
  public func toUInt8() -> Swift.UInt8
  public static func isNaN(_ value: Foundation.NSNumber) -> Swift.Bool
  public static func isFinite(_ value: Any) -> Swift.Bool
  public static func isInteger(_ value: Any) -> Swift.Bool
}
extension Foundation.NSNumber : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Foundation.NSNumber : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
@_inheritsConvenienceInitializers @objc(BigInt64Array) public class BigInt64Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedBigIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  public func toArray() -> [any Swift.FixedWidthInteger]
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.BigInt64Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.BigInt64Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Bool) -> DCloudUTSFoundation.BigInt64Array
}
extension DCloudUTSFoundation.BigInt64Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.BigInt64Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigInt64Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Void)
}
extension DCloudUTSFoundation.BigInt64Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.BigInt64Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.BigInt64Array
}
extension DCloudUTSFoundation.BigInt64Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigInt64Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigInt64Array {
  public func reverse() -> DCloudUTSFoundation.BigInt64Array
}
extension DCloudUTSFoundation.BigInt64Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigInt64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.BigInt64Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.BigInt64Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.BigInt64Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.BigInt64Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.BigInt64Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.BigInt64Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.BigInt64Array
}
@discardableResult
public func setTimeout(_ task: @escaping () -> Swift.Void) -> Foundation.NSNumber
@discardableResult
public func setTimeout(_ task: @escaping () -> Swift.Void, _ delay: Swift.Int) -> Foundation.NSNumber
@discardableResult
public func setTimeout(_ task: @escaping () -> Swift.Void, _ delay: Foundation.NSNumber) -> Foundation.NSNumber
public func clearTimeout(_ timeoutID: Foundation.NSNumber)
public func setInterval(_ task: @escaping () -> Swift.Void) -> Foundation.NSNumber
public func setInterval(_ task: @escaping () -> Swift.Void, _ delay: Swift.Int) -> Foundation.NSNumber
public func setInterval(_ task: @escaping () -> Swift.Void, _ delay: Foundation.NSNumber) -> Foundation.NSNumber
public func clearInterval(_ timeoutID: Foundation.NSNumber)
extension Foundation.Date {
  public var calendar: Foundation.Calendar {
    get
  }
  public init(_ params: Any...)
  public mutating func mutiParmas(year: Swift.Int, month: Swift.Int, day: Swift.Int? = 1, hour: Swift.Int? = 0, minute: Swift.Int? = 0, second: Swift.Int? = 0, milliseconds: Swift.Int? = 0)
  public static func stringParse(_ string: Swift.String) -> Foundation.DateFormatter?
  public mutating func dateStringParse(string: Swift.String)
  public mutating func unixTimestamp(unixTimestamp: Swift.Int)
  public static func now() -> Foundation.NSNumber
  public func getDate() -> Foundation.NSNumber
  public mutating func setDate(_ newDay: Swift.Int)
  public mutating func setDate(_ newDay: Foundation.NSNumber)
  public func getDay() -> Foundation.NSNumber
  public mutating func setDay(_ weekday: Swift.Int)
  public mutating func setDay(_ weekday: Foundation.NSNumber)
  public func getFullYear() -> Foundation.NSNumber
  public mutating func setFullYear(_ year: Swift.Int)
  public mutating func setFullYear(_ year: Foundation.NSNumber)
  public func getHours() -> Foundation.NSNumber
  public mutating func setHours(_ hour: Swift.Int)
  public mutating func setHours(_ hour: Foundation.NSNumber)
  public func getMilliseconds() -> Foundation.NSNumber
  public mutating func setMilliseconds(_ milliseconds: Swift.Int)
  public mutating func setMilliseconds(_ milliseconds: Foundation.NSNumber)
  public func getMinutes() -> Foundation.NSNumber
  public mutating func setMinutes(_ minutes: Swift.Int)
  public mutating func setMinutes(_ minutes: Foundation.NSNumber)
  public func getMonth() -> Foundation.NSNumber
  public mutating func setMonth(_ month: Swift.Int)
  public mutating func setMonth(_ month: Foundation.NSNumber)
  public func getSeconds() -> Foundation.NSNumber
  public mutating func setSeconds(_ seconds: Swift.Int)
  public mutating func setSeconds(_ seconds: Foundation.NSNumber)
  public func getTime() -> Foundation.NSNumber
  public mutating func setTime(_ timeInterval: Swift.Int)
  public mutating func setTime(_ timeInterval: Foundation.NSNumber)
  public func valueOf() -> Foundation.NSNumber
  public func toUTCString() -> Swift.String
  public func dateTimeString() -> Swift.String
  public var utsDateDescription: Swift.String {
    get
  }
  public func toString() -> Swift.String
  public func toTimeString() -> Swift.String
  public func toDateString() -> Swift.String
  public static func parse(_ dateString: Swift.String) -> Foundation.NSNumber
}
extension Foundation.Date : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Foundation.Date : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
public func _object_without_properties_loose<T>(_ source: T?, _ excluded: [Swift.String]) -> DCloudUTSFoundation.UTSJSONObject where T : DCloudUTSFoundation.IUTSObject
extension Swift.Array {
  public init(elements: Element...)
}
extension Swift.Array where Element == Any {
  public subscript(key: Foundation.NSNumber) -> Any {
    get
    set
  }
}
extension Swift.Array where Element == Any? {
  public subscript(key: Foundation.NSNumber) -> Any {
    get
    set
  }
  public static func isArray(_ value: Any?) -> Swift.Bool
  public static func of(_ elements: Any?...) -> [Any?]
}
extension Swift.Array where Element == Swift.String {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension Swift.Array where Element : Swift.Equatable {
  public func includes(_ searchElement: Element) -> Swift.Bool
  public func includes(_ searchElement: Element, _ fromIndex: Swift.Int = 0) -> Swift.Bool
  public func includes(_ searchElement: Element, _ fromIndex: Foundation.NSNumber = 0) -> Swift.Bool
  public func indexOf(_ searchElement: Element) -> Foundation.NSNumber
  public func indexOf(_ searchElement: Element, _ fromIndex: Swift.Int) -> Swift.Int
  public func indexOf(_ searchElement: Element, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
  public func lastIndexOf(_ searchElement: Element) -> Foundation.NSNumber
  public func lastIndexOf(_ searchElement: Element, _ fromIndex: Swift.Int) -> Swift.Int
  public func lastIndexOf(_ searchElement: Element, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
}
extension Swift.Array {
  public var length: Swift.Int {
    get
    set
  }
  public mutating func add(_ value: Element)
  public subscript(index: Foundation.NSNumber) -> Element {
    get
    set
  }
  public func concat(_ elements: [Element]...) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int, _ start: Swift.Int) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber, _ start: Foundation.NSNumber) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int, _ start: Swift.Int, _ end: Swift.Int? = nil) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber, _ start: Foundation.NSNumber = 0, _ end: Foundation.NSNumber) -> [Element]
  public func every(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func fill(_ value: Element) -> [Element]
  public mutating func fill(_ value: Element, _ start: Swift.Int?) -> [Element]
  public mutating func fill(_ value: Element, _ start: Foundation.NSNumber) -> [Element]
  public mutating func fill(_ value: Element, _ start: Swift.Int, _ end: Swift.Int) -> [Element]
  public mutating func fill(_ value: Element, _ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> [Element]
  public func filter(_ callback: (_ value: Element) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> [Element]
  public func find(_ callback: (_ value: Element) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Element?
  public func findIndex(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element) -> Swift.Bool) -> Foundation.NSNumber
  public func findIndex(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber
  public func findIndex(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Foundation.NSNumber
  public func flat() -> [Any]
  public func flat(_ depth: Swift.Int) -> [Any]
  public func flat(_ depth: Foundation.NSNumber) -> [Any]
  public func flatMap(_ callback: (_ value: Element) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> [Any]) -> [Any]
  public func forEach(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Void)
  public func forEach(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Void)
  public func forEach(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Void)
  public func map<R>(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> R) -> [R]
  public func map<R>(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> R) -> [R]
  public func map<R>(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> R) -> [R]
  public func keys() -> Swift.IndexingIterator<[Swift.Int]>
  public mutating func pop() -> Element
  @discardableResult
  public mutating func push(_ items: Element...) -> Swift.Int
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reverse() -> [Element]
  public mutating func shift() -> Element
  public func slice() -> [Element]
  public func slice(_ start: Swift.Int) -> Swift.Array<Element>
  public func slice(_ start: Foundation.NSNumber) -> Swift.Array<Element>
  public func slice(_ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> Swift.Array<Element>
  public func slice(_ start: Swift.Int, _ end: Swift.Int) -> [Element]
  public func some(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func some(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func sort()
  public mutating func sort(_ callback: (_ lhs: Element, _ rhs: Element) -> Foundation.NSNumber)
  public mutating func sort(_ callback: (_ lhs: Element, _ rhs: Element) -> Swift.Int)
  @discardableResult
  public mutating func splice(_ start: Swift.Int) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber) -> [Element]
  public mutating func splice(_ start: Swift.Int, _ deleteCount: Swift.Int) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber, _ deleteCount: Foundation.NSNumber) -> [Element]
  public mutating func splice(_ start: Swift.Int, _ deleteCount: Swift.Int, items: Element...) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber, _ deleteCount: Foundation.NSNumber, _ items: Element...) -> [Element]
  public mutating func unshift(_ items: Element...) -> Swift.Int
  public func toString() -> Swift.String
}
extension Swift.Array where Element == Any? {
  public static func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> [Any?]
  public static func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> [Any?]
  public static func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> [R?]
}
extension Swift.Array where Element == Any? {
  public static func fromAsync(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.UTSPromise<Swift.Array<Any?>>
  public static func fromAsync(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.UTSPromise<Swift.Array<Any?>>
  public static func fromAsync<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: @escaping (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.UTSPromise<Swift.Array<R?>>
}
extension DCloudUTSFoundation.UTSPromise {
  public typealias Do<T> = () throws -> T
  public typealias DoAny = () throws -> Any?
  convenience public init<T>(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Do<T>)
  convenience public init<T>(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Do<DCloudUTSFoundation.UTSPromise<T>>)
  convenience public init<T>(on queue: Dispatch.DispatchQueue = .promises, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.DoAny, _ resultType: T.Type)
  convenience public init<T>(_ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Do<T>, _ resultType: T.Type)
}
extension Swift.Bool {
  public func toString() -> Swift.String
  public func valueOf() -> Swift.Bool
}
extension Swift.Bool : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Bool : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
public protocol IJSONStringify {
  func toJSON() -> Any?
}
@_hasMissingDesignatedInitializers public class JSON {
  public static func parse(_ text: Swift.String) -> Any?
  public static func parse(_ text: Swift.String, _ def: Any) -> Any
  public static func parse<T>(_ text: Swift.String, _ type: T.Type) -> T?
  public static func parse<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T
  public static func parse<T>(_ text: Swift.String, _ type: T.Type) -> T? where T : Swift.Decodable
  public static func parse<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T where T : Swift.Decodable
  public static func parseObject(_ text: Swift.String) -> DCloudUTSFoundation.UTSJSONObject?
  public static func parseObject(_ text: Swift.String, _ def: DCloudUTSFoundation.UTSJSONObject) -> DCloudUTSFoundation.UTSJSONObject
  public static func parseObject<T>(_ text: Swift.String, _ type: T.Type) -> T?
  public static func parseObject<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T
  public static func parseObject<T>(_ text: Swift.String, _ type: T.Type) -> T? where T : Swift.Decodable
  public static func parseObject<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T where T : Swift.Decodable
  public static func parseArray(_ text: Swift.String) -> Swift.Array<Any>?
  public static func parseArray(_ text: Swift.String, _ def: [Any]) -> Swift.Array<Any>
  public static func parseArray<T>(_ text: Swift.String, _ type: T.Type) -> [T]?
  public static func parseArray<T>(_ text: Swift.String, _ def: [T], _ type: T.Type) -> [T]
  public static func parseArray<T>(_ text: Swift.String, _ type: T.Type) -> [T]? where T : Swift.Decodable
  public static func parseArray<T>(_ text: Swift.String, _ def: [T], _ type: T.Type) -> [T] where T : Swift.Decodable
  public static func stringify(_ value: Any?) -> Swift.String?
  public static func stringify<T>(_ value: T?) -> Swift.String? where T : Swift.Encodable
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Uint8ClampedArray) public class Uint8ClampedArray : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Bool) -> DCloudUTSFoundation.Uint8ClampedArray
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Void)
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber) -> DCloudUTSFoundation.Uint8ClampedArray
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Swift.Int, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func reverse() -> DCloudUTSFoundation.Uint8ClampedArray
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8ClampedArray) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Uint8ClampedArray {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Uint8ClampedArray
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint8ClampedArray
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint8ClampedArray
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Uint8ClampedArray
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Uint8ClampedArray
}
@_inheritsConvenienceInitializers @objc(Uint32Array) public class Uint32Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Uint32Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint32Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> DCloudUTSFoundation.Uint32Array
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> [Foundation.NSNumber]
}
extension DCloudUTSFoundation.Uint32Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Foundation.NSNumber?
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Uint32Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint32Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Void)
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Uint32Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Uint32Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Uint32Array
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Uint32Array
}
extension DCloudUTSFoundation.Uint32Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint32Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Swift.Int, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint32Array {
  public func reverse() -> DCloudUTSFoundation.Uint32Array
}
extension DCloudUTSFoundation.Uint32Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint32Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Uint32Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Uint32Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint32Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint32Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Uint32Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Uint32Array
}
public let dc_storage_aes_key: Swift.String
public let dc_storage_path_component: Swift.String
public let dc_storage_old_path_component: Swift.String
@_hasMissingDesignatedInitializers @objc(ArrayBuffer) public class ArrayBuffer : ObjectiveC.NSObject {
  public var buffer: Swift.UnsafeMutableRawPointer!
  public var byteLength: Foundation.NSNumber {
    get
  }
  public init(_ byteLength: Swift.Int)
  convenience public init(_ byteLength: Foundation.NSNumber)
  @objc public init(buffer: Swift.UnsafeRawPointer, byteLength: Swift.Int)
  @objc public func toJSValue(in context: JavaScriptCore.JSContext) -> JavaScriptCore.JSValue
  @objc deinit
  public static func isView(_ object: Any) -> Swift.Bool
  public func slice(_ begin: Foundation.NSNumber? = nil, _ end: Foundation.NSNumber? = nil) -> DCloudUTSFoundation.ArrayBuffer
  @objc public class func fromData(_ data: Foundation.Data) -> DCloudUTSFoundation.ArrayBuffer
  public func toData() -> Foundation.Data
  public func toString() -> Swift.String
}
extension DCloudUTSFoundation.ArrayBuffer : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UnsafeMutableRawPointer {
  public func printMemoryContent(length: Swift.Int)
}
@discardableResult
public func awaitPromise<Value>(_ promise: DCloudUTSFoundation.UTSPromise<Value>) throws -> Value
@discardableResult
public func awaitPromise<T>(_ value: T) throws -> T
extension CoreFoundation.CGSize {
  public init(_ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  public init(_ width: Swift.Int, _ height: Swift.Int)
  public init(_ width: Swift.Double, _ height: Swift.Double)
}
@_hasMissingDesignatedInitializers final public class UTSPromise<Value> {
  public static func pending() -> DCloudUTSFoundation.UTSPromise<Value>
  convenience public init()
  convenience public init(_ work: @autoclosure () throws -> Value)
  @objc deinit
}
extension DCloudUTSFoundation.UTSPromise : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension Dispatch.DispatchQueue {
  public static var promises: Dispatch.DispatchQueue {
    get
    set
  }
}
extension DCloudUTSFoundation.UTSPromise : Swift.CustomReflectable {
  final public var customMirror: Swift.Mirror {
    get
  }
}
extension Swift.Float {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  postfix public static func -- (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  prefix public static func ++ (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  prefix public static func -- (item: inout Swift.Float) -> Swift.Float
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Float
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func + (left: Swift.Float, right: Swift.String) -> Swift.String
}
extension Swift.Float : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension CoreFoundation.CGFloat : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Float : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension CoreFoundation.CGFloat : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension DCloudUTSFoundation.UTSPromise {
  public typealias Then<Result> = (Value) throws -> Result
  public typealias Then1<Result> = () throws -> Result
  public typealias OnRejected = (Any?) throws -> Swift.Void
  @discardableResult
  final public func then<Result>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then<DCloudUTSFoundation.UTSPromise<Result>>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func then<Result>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then<Result>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func then(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then<Swift.Void>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func then<Result>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then1<DCloudUTSFoundation.UTSPromise<Result>>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func then<Result>(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then1<Result>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func then(on queue: Dispatch.DispatchQueue = .main, _ work: @escaping DCloudUTSFoundation.UTSPromise<Value>.Then1<Swift.Void>, _ reject: DCloudUTSFoundation.UTSPromise<Value>.OnRejected? = nil) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func then() -> DCloudUTSFoundation.UTSPromise<Value>
}
@_inheritsConvenienceInitializers @objc(BigUint64Array) public class BigUint64Array : DCloudUTSFoundation.TypedBigIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedBigIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.BigUint64Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.BigUint64Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Bool) -> DCloudUTSFoundation.BigUint64Array
}
extension DCloudUTSFoundation.BigUint64Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.BigUint64Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigUint64Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Void)
}
extension DCloudUTSFoundation.BigUint64Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.BigUint64Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.BigUint64Array
}
extension DCloudUTSFoundation.BigUint64Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigUint64Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.BigUint64Array {
  public func reverse() -> DCloudUTSFoundation.BigUint64Array
}
extension DCloudUTSFoundation.BigUint64Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.BigUint64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.BigUint64Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.BigUint64Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.BigUint64Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.BigUint64Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.BigUint64Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.BigUint64Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.BigUint64Array
}
@_inheritsConvenienceInitializers @objc(Int16Array) public class Int16Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Int16Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int16Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Bool) -> DCloudUTSFoundation.Int16Array
}
extension DCloudUTSFoundation.Int16Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Int16Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int16Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Int16Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Int16Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Int16Array
}
extension DCloudUTSFoundation.Int16Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int16Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int16Array {
  public func reverse() -> DCloudUTSFoundation.Int16Array
}
extension DCloudUTSFoundation.Int16Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int16Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int16Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Int16Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Int16Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int16Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int16Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Int16Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Int16Array
}
@_inheritsConvenienceInitializers @objc(Int32Array) public class Int32Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Int32Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int32Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Bool) -> DCloudUTSFoundation.Int32Array
}
extension DCloudUTSFoundation.Int32Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Int32Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int32Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Int32Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Int32Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Int32Array
}
extension DCloudUTSFoundation.Int32Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int32Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Int32Array {
  public func reverse() -> DCloudUTSFoundation.Int32Array
}
extension DCloudUTSFoundation.Int32Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Int32Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Int32Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Int32Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Int32Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int32Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Int32Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Int32Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Int32Array
}
extension Swift.String {
  public var length: Swift.Int {
    get
  }
  public func at(_ pos: Swift.Int) -> Swift.String?
  public func at(_ pos: Foundation.NSNumber) -> Swift.String?
  public func charAt(_ pos: Swift.Int) -> Swift.String
  public func charAt(_ pos: Foundation.NSNumber) -> Swift.String
  public func charCodeAt(_ index: Swift.Int) -> Foundation.NSNumber
  public func charCodeAt(_ index: Foundation.NSNumber) -> Foundation.NSNumber
  public func codePointAt(_ pos: Swift.Int) -> Foundation.NSNumber?
  public func codePointAt(_ pos: Foundation.NSNumber) -> Foundation.NSNumber?
  public func concat(_ strings: Swift.String...) -> Swift.String
  public func endsWith(_ searchString: Swift.String) -> Swift.Bool
  public func endsWith(_ searchString: Swift.String, _ endPosition: Swift.Int?) -> Swift.Bool
  public func endsWith(_ searchString: Swift.String, _ endPosition: Foundation.NSNumber?) -> Swift.Bool
  public func includes(_ searchString: Swift.String) -> Swift.Bool
  public func includes(_ searchString: Swift.String, _ position: Swift.Int?) -> Swift.Bool
  public func includes(_ searchString: Swift.String, _ position: Foundation.NSNumber?) -> Swift.Bool
  public func indexOf(_ searchString: Swift.String) -> Swift.Int
  public func indexOf(_ searchString: Swift.String, _ position: Swift.Int?) -> Swift.Int
  public func indexOf(_ searchString: Swift.String, _ position: Foundation.NSNumber?) -> Foundation.NSNumber
  public func padStart(_ length: Swift.Int, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padStart(_ length: Foundation.NSNumber, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padEnd(_ length: Swift.Int, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padEnd(_ length: Foundation.NSNumber, _ fillStr: Swift.String? = nil) -> Swift.String
  public func `repeat`(_ count: Swift.Int) -> Swift.String
  public func `repeat`(_ count: Foundation.NSNumber) -> Swift.String
  public func slice() -> Swift.String
  public func slice(_ start: Swift.Int?, _ end: Swift.Int? = nil) -> Swift.String
  public func slice(_ start: Foundation.NSNumber?, _ end: Foundation.NSNumber? = nil) -> Swift.String
  public func toLowerCase() -> Swift.String
  public func toUpperCase() -> Swift.String
  public func replaceAll(_ pattern: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replace(_ pattern: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func split(_ separator: Swift.String) -> [Swift.String]
  public func split(_ separator: Swift.String, _ limit: Swift.Int) -> [Swift.String]
  public func split(_ separator: Swift.String, _ limit: Foundation.NSNumber) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp, _ limit: Swift.Int?) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp, _ limit: Foundation.NSNumber?) -> [Swift.String]
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replaceValue: Swift.String) -> Swift.String
  public func replaceAll(_ regex: DCloudUTSFoundation.UTSRegExp, _ replaceValue: Swift.String) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String]) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String, _ groups: DCloudUTSFoundation.UTSJSONObject) -> Swift.String)?) -> Swift.String
  public func replaceAll(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func search(_ regex: DCloudUTSFoundation.UTSRegExp) -> Swift.Int
  public func search(_ regex: DCloudUTSFoundation.UTSRegExp) -> Foundation.NSNumber
  public func match(_ regex: DCloudUTSFoundation.UTSRegExp? = nil) -> DCloudUTSFoundation.RegExpMatchArray?
  public func matchAll(_ regex: DCloudUTSFoundation.UTSRegExp? = nil) -> DCloudUTSFoundation.RegExpMatchArray?
  public func startsWith(_ searchString: Swift.String) -> Swift.Bool
  public func startsWith(_ searchString: Swift.String, _ position: Swift.Int) -> Swift.Bool
  public func startsWith(_ searchString: Swift.String, _ position: Foundation.NSNumber) -> Swift.Bool
  public func substring(_ indexStart: Swift.Int) -> Swift.String
  public func substring(_ indexStart: Swift.Int, _ indexEnd: Swift.Int) -> Swift.String
  public func substring(_ indexStart: Foundation.NSNumber, _ indexEnd: Foundation.NSNumber) -> Swift.String
  public func trim() -> Swift.String
  public func trimStart() -> Swift.String
  public func trimEnd() -> Swift.String
  public func toString() -> Swift.String
  public func valueOf() -> Swift.String
  public func lastIndexOf(_ searchValue: Swift.String) -> Foundation.NSNumber
  public func lastIndexOf(_ searchValue: Swift.String, _ fromIndex: Swift.Int) -> Swift.Int
  public func lastIndexOf(_ searchValue: Swift.String, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
  public static func fromCharCode(_ code: Foundation.NSNumber...) -> Swift.String
  public static func fromCodePoint(_ code: Foundation.NSNumber...) -> Swift.String
}
extension Swift.String : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Foundation.NSString : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension ObjectiveC.Selector : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.String : DCloudUTSFoundation.UTSValueIterable {
  public typealias T = Swift.String
  public func valueIterator() -> DCloudUTSFoundation.UTSIterator<Swift.String>
}
extension Swift.String : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Foundation.NSString : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension ObjectiveC.Selector : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
public protocol IUTSObject : DCloudUTSFoundation.DCUTSSequence where Self.Element == Swift.String {
}
public protocol UTSObject : DCloudUTSFoundation.IUTSObject {
}
public struct DCUniIterator : Swift.IteratorProtocol {
  public mutating func next() -> Swift.String?
  public typealias Element = Swift.String
}
public protocol DCUTSSequence : Swift.Sequence {
  subscript(key: Swift.String) -> Any? { get set }
}
extension DCloudUTSFoundation.DCUTSSequence {
  public func makeIterator() -> DCloudUTSFoundation.DCUniIterator
}
extension DCloudUTSFoundation.DCUTSSequence {
  public func utsSubscriptGetValue(_ key: Swift.String) -> Any?
  public func utsSubscriptCheckValue<T>(_ value: Any?) throws -> T
  public func utsSubscriptCheckValueIfPresent<T>(_ value: Any?) throws -> T?
}
@_hasMissingDesignatedInitializers public class UTSObjectTransformer {
  public static func transformObj2Map(_ obj: Any) -> [Swift.String : Any]
  @objc deinit
}
public typealias UTSUnionTypeObject = any DCloudUTSFoundation.UTSObject
public func resolveUTSObjectProperty<T>(_ obj: any DCloudUTSFoundation.UTSObject, _ key: Swift.String, _ desiredType: T.Type) -> T
public func resolveUTSObjectProperty<T>(_ obj: (any DCloudUTSFoundation.UTSObject)?, _ key: Swift.String, _ desiredType: T.Type) -> T?
public func defineSyncApi<T>(_ name: Swift.String, _ fn: T) -> T
public let NaN: Foundation.NSNumber
public let Infinity: Foundation.NSNumber
public var DCUTSApiErrorInfo: [Swift.String : Swift.String]
public func clearDebugErrorInfo()
public func isNaN(_ value: Foundation.NSNumber) -> Swift.Bool
public func isFinite(_ value: Any) -> Swift.Bool
public func parseInt(_ value: Swift.String) -> Foundation.NSNumber
public func parseInt(_ value: Swift.String, _ radix: Foundation.NSNumber) -> Foundation.NSNumber
public func parseInt(_ value: Swift.String, _ radix: Swift.Int) -> Foundation.NSNumber
public func parseFloat(_ str: Swift.String) -> Foundation.NSNumber
public func decodeURI(_ encodedURI: Swift.String) -> Swift.String?
public func decodeURIComponent(_ encodedURI: Swift.String) -> Swift.String?
public func encodeURI(_ string: Swift.String) -> Swift.String?
public func encodeURIComponent(_ string: Swift.String) -> Swift.String?
@_hasMissingDesignatedInitializers public class UniResource {
  public static var APP_RESOURCE_PATH: Swift.String
  public static var USER_DATA_PATH: Swift.String
  public static var CACHE_PATH: Swift.String
  public static var SANDBOX_PATH: Swift.String
  @objc deinit
}
public typealias env = DCloudUTSFoundation.UniResource
public func typeofjs(_ value: Any?) -> Swift.String
public func resolveInOperator(_ obj: any DCloudUTSFoundation.UTSObject, _ key: Swift.String) -> Swift.Bool
public func resolveInOperator(_ obj: any DCloudUTSFoundation.UTSKeyIterable, _ key: Swift.String) -> Swift.Bool
public func resolveInOperator(_ obj: DCloudUTSFoundation.UTSJSONObject, _ key: Swift.String) -> Swift.Bool
public func atob(_ str: Swift.String) -> Swift.String
public func btoa(_ str: Swift.String) -> Swift.String
@_inheritsConvenienceInitializers @objc(Uint8Array) public class Uint8Array : DCloudUTSFoundation.TypedIntArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: DCloudUTSFoundation.TypedIntArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Uint8Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint8Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Bool) -> DCloudUTSFoundation.Uint8Array
}
extension DCloudUTSFoundation.Uint8Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Uint8Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Uint8Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Uint8Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Uint8Array
}
extension DCloudUTSFoundation.Uint8Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Uint8Array {
  public func reverse() -> DCloudUTSFoundation.Uint8Array
}
extension DCloudUTSFoundation.Uint8Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Uint8Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Uint8Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Uint8Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Uint8Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint8Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Uint8Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Uint8Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Uint8Array
}
public protocol UTSCustomEncodeProtocol {
  func utsGetValue() -> Any
}
public protocol UTSCustomEncodeParticularProtocol {
  func getCustomEncodeMap() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class UTSCustomEncoder {
  public static func encodeObject(_ value: Any) -> [Swift.String : Any]
  @objc deinit
}
public func UTSTrycatch(_ task: () throws -> Swift.Void, _ cb: (DCloudUTSFoundation.UTSError) -> Swift.Void)
@_inheritsConvenienceInitializers @objc(UTSError) @objcMembers open class UTSError : ObjectiveC.NSObject, Swift.Error {
  @objc public var domain: Swift.String
  @objc public var userInfo: [Swift.String : Any]
  @objc public var code: Foundation.NSNumber
  @objc public var message: Swift.String
  @objc public var name: Swift.String
  @objc public var cause: DCloudUTSFoundation.UTSError?
  @objc public var stack: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc(initWithMessage:) convenience public init(_ message: Swift.String)
  @objc(initWithError:) convenience public init(_ error: any Swift.Error)
  @objc public func toString() -> Swift.String
  @objc deinit
}
extension DCloudUTSFoundation.UTSError : Foundation.CustomNSError {
  @objc public static var errorDomain: Swift.String {
    @objc get
  }
  @objc dynamic public var errorCode: Swift.Int {
    @objc get
  }
  @objc dynamic public var errorUserInfo: [Swift.String : Any] {
    @objc get
  }
}
public protocol AsyncApiResult {
  var errMsg: Swift.String { get set }
}
public protocol AsyncApiSuccessResult : DCloudUTSFoundation.AsyncApiResult {
}
@_hasMissingDesignatedInitializers public class AsyncApiSuccessResultImpl : DCloudUTSFoundation.AsyncApiSuccessResult {
  public var errMsg: Swift.String
  @objc deinit
}
public protocol IUniError : DCloudUTSFoundation.AsyncApiResult {
  var errCode: Foundation.NSNumber { get set }
  var errSubject: Swift.String { get set }
  var data: Any? { get set }
  var cause: DCloudUTSFoundation.UTSError? { get set }
}
@_inheritsConvenienceInitializers @objc(UniError) @objcMembers open class UniError : DCloudUTSFoundation.UTSError, DCloudUTSFoundation.IUniError {
  @objc open var errSubject: Swift.String
  @objc open var errCode: Foundation.NSNumber
  @objc open var errMsg: Swift.String
  @objc open var data: Any?
  @objc public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil)
  @objc override dynamic public init()
  @objc public func toJsObject() -> [Swift.String : Any]
  @objc deinit
}
extension DCloudUTSFoundation.UniError {
  @objc override dynamic public var errorUserInfo: [Swift.String : Any] {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SourceError) @objcMembers open class SourceError : DCloudUTSFoundation.UTSError {
  @objc open var subject: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSFoundation.SourceError {
  @objc override dynamic public var errorUserInfo: [Swift.String : Any] {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(AggregateError) @objcMembers public class AggregateError : DCloudUTSFoundation.UTSError {
  @objc public var errors: Swift.Array<DCloudUTSFoundation.UTSError>?
  @objc(initWithErrors:) public init(_ errors: [DCloudUTSFoundation.UTSError])
  @objc(initWithErrors:message:) public init(_ errors: [DCloudUTSFoundation.UTSError], _ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(UniAggregateError) @objcMembers public class UniAggregateError : DCloudUTSFoundation.SourceError {
  @objc public var errors: Swift.Array<DCloudUTSFoundation.UTSError>?
  @objc public init(_ errors: [DCloudUTSFoundation.UTSError])
  @objc(initWithErrors:message:) public init(_ errors: [DCloudUTSFoundation.UTSError], _ message: Swift.String)
  @objc deinit
}
extension DCloudUTSFoundation.UniAggregateError {
  @objc override dynamic public var errorUserInfo: [Swift.String : Any] {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SyntaxError) @objcMembers public class SyntaxError : DCloudUTSFoundation.UTSError {
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSFoundation.UTSError {
  @objc(initWithMessage:options:) convenience dynamic public init(_ message: Swift.String, _ options: DCloudUTSFoundation.UTSJSONObject)
}
extension DCloudUTSFoundation.UniError {
  @objc convenience dynamic public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil, _ options: DCloudUTSFoundation.UTSJSONObject? = nil)
}
extension DCloudUTSFoundation.UniAggregateError {
  @objc convenience dynamic public init(_ errors: [DCloudUTSFoundation.UTSError], _ message: Swift.String, _ options: DCloudUTSFoundation.UTSJSONObject)
}
extension Swift.Double {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  postfix public static func -- (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  prefix public static func ++ (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  prefix public static func -- (item: inout Swift.Double) -> Swift.Double
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Double
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func + (left: Swift.Double, right: Swift.String) -> Swift.String
}
extension Swift.Double {
  public func bankersRound() -> Swift.Double
  public func round(_ places: Swift.Int) -> Swift.Double
}
extension Swift.Double : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Double : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension DCloudUTSFoundation.UTSPromise {
  public typealias Catch = (Any?) throws -> Swift.Void
  public typealias Catch1<Result> = () throws -> Result
  public typealias Catch2<Result> = (Any?) throws -> Result
  @discardableResult
  final public func `catch`() -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func `catch`(on queue: Dispatch.DispatchQueue = .main, _ reject: @escaping DCloudUTSFoundation.UTSPromise<Value>.Catch) -> DCloudUTSFoundation.UTSPromise<Value>
  @discardableResult
  final public func `catch`<Result>(on queue: Dispatch.DispatchQueue = .main, _ reject: @escaping DCloudUTSFoundation.UTSPromise<Value>.Catch1<Result>) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func `catch`<Result>(on queue: Dispatch.DispatchQueue = .main, _ reject: @escaping DCloudUTSFoundation.UTSPromise<Value>.Catch1<DCloudUTSFoundation.UTSPromise<Result>>) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func `catch`<Result>(on queue: Dispatch.DispatchQueue = .main, _ reject: @escaping DCloudUTSFoundation.UTSPromise<Value>.Catch2<Result>) -> DCloudUTSFoundation.UTSPromise<Result>
  @discardableResult
  final public func `catch`<Result>(on queue: Dispatch.DispatchQueue = .main, _ reject: @escaping DCloudUTSFoundation.UTSPromise<Value>.Catch2<DCloudUTSFoundation.UTSPromise<Result>>) -> DCloudUTSFoundation.UTSPromise<Result>
}
@_inheritsConvenienceInitializers @objc(Float64Array) public class Float64Array : DCloudUTSFoundation.TypedArray {
  override public class var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  override public var BYTES_PER_ELEMENT: Foundation.NSNumber {
    get
  }
  required public init(_ length: Swift.Int)
  convenience public init(_ length: Foundation.NSNumber)
  required public init(_ array: [Foundation.NSNumber])
  required public init(_ array: [any Swift.FixedWidthInteger])
  required public init(_ array: [any Swift.BinaryFloatingPoint])
  public init(_ array: [Swift.Double])
  public init(_ array: [Swift.Float])
  public init(_ array: DCloudUTSFoundation.TypedArray)
  required public init(_ buffer: DCloudUTSFoundation.ArrayBuffer, _ offset: Foundation.NSNumber = 0, _ length: Foundation.NSNumber? = nil)
  override public subscript(index: Swift.Int) -> Foundation.NSNumber {
    get
    set
  }
  override public subscript(index: Foundation.NSNumber) -> Foundation.NSNumber {
    get
    set
  }
  override public func set(_ array: [Foundation.NSNumber], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [any Swift.FixedWidthInteger], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Double], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: [Swift.Float], _ offset: Foundation.NSNumber = 0)
  override public func set(_ array: DCloudUTSFoundation.TypedArray, _ offset: Foundation.NSNumber = 0)
  @objc deinit
}
extension DCloudUTSFoundation.Float64Array {
  public func every(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Float64Array {
  public func filter(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Bool) -> DCloudUTSFoundation.Float64Array
}
extension DCloudUTSFoundation.Float64Array {
  public func find(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Bool) -> Foundation.NSNumber?
}
extension DCloudUTSFoundation.Float64Array {
  public func findIndex(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Bool) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float64Array {
  public func forEach(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Void)
}
extension DCloudUTSFoundation.Float64Array {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension DCloudUTSFoundation.Float64Array {
  public func map(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Foundation.NSNumber) -> DCloudUTSFoundation.Float64Array
}
extension DCloudUTSFoundation.Float64Array {
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Foundation.NSNumber) -> Foundation.NSNumber
  public func reduce(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float64Array {
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Foundation.NSNumber) -> Foundation.NSNumber?
  public func reduceRight(_ callback: (_ previousValue: Foundation.NSNumber, _ currentValue: Foundation.NSNumber, _ currentIndex: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Foundation.NSNumber, _ initialValue: Foundation.NSNumber) -> Foundation.NSNumber
}
extension DCloudUTSFoundation.Float64Array {
  public func reverse() -> DCloudUTSFoundation.Float64Array
}
extension DCloudUTSFoundation.Float64Array {
  public func some(_ callback: (_ value: Foundation.NSNumber, _ index: Foundation.NSNumber, _ array: DCloudUTSFoundation.Float64Array) -> Swift.Bool) -> Swift.Bool
}
extension DCloudUTSFoundation.Float64Array {
  public func sort() -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Foundation.NSNumber) -> Self
  public func sort(_ callback: (_ lhs: Foundation.NSNumber, _ rhs: Foundation.NSNumber) -> Swift.Int) -> Self
}
extension DCloudUTSFoundation.Float64Array {
  public class func of(_ items: Any?...) -> DCloudUTSFoundation.Float64Array
  public class func from(_ list: some UTSValueIterable, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Float64Array
  public class func from(_ list: any Swift.Sequence, _ mapFn: ((_ element: Any?, _ index: Foundation.NSNumber) -> Any?)? = nil) -> DCloudUTSFoundation.Float64Array
  public class func from<T>(_ list: any Swift.Sequence<T>) -> DCloudUTSFoundation.Float64Array
  public class func from<T, R>(_ list: any Swift.Sequence<T>, _ mapFn: (_ element: T, _ index: Foundation.NSNumber) -> R?) -> DCloudUTSFoundation.Float64Array
}
public typealias UTSSet = Foundation.NSMutableOrderedSet
extension Foundation.NSMutableOrderedSet {
  public var size: Foundation.NSNumber {
    get
  }
  convenience public init(_ item: [Any])
  public func delete(_ value: Any)
  public func clear()
  public func has(_ value: Any) -> Swift.Bool
  public func forEach(_ callback: (_ value: Any, _ key: Any, _ set: Foundation.NSMutableOrderedSet) -> Swift.Void)
  public func forEach(_ callback: (_ value: Any, _ key: Any) -> Swift.Void)
  public func forEach(_ callback: (_ value: Any) -> Swift.Void)
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ value: T, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws
  public mutating func encode<T>(_ value: T, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws where T : Swift.Encodable
  public mutating func encodeIfPresent<T>(_ value: T?, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws
  public mutating func encodeIfPresent<T>(_ value: T?, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws where T : Swift.Encodable
}
infix operator >>> : BitwiseShiftPrecedence
infix operator >>>= : AssignmentPrecedence
postfix operator ++
prefix operator --
public func toSliceIndex(_ value: Swift.Int, _ length: Swift.Int) -> Swift.Int
public func toSliceIndex(_ value: Foundation.NSNumber, _ length: Foundation.NSNumber) -> Foundation.NSNumber
extension Swift.Int {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  postfix public static func -- (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  prefix public static func ++ (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  prefix public static func -- (item: inout Swift.Int) -> Swift.Int
  public static func >>> (l: Swift.Int, r: Swift.Int) -> Swift.Int
  public static func >>>= (l: inout Swift.Int, r: Swift.Int) -> Swift.Int
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Int
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func + (left: Swift.Int, right: Swift.String) -> Swift.String
}
extension Swift.UInt {
  public init(item: Foundation.NSNumber)
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.UInt
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func + (left: Swift.UInt, right: Swift.String) -> Swift.String
}
extension Swift.UInt8 {
  public static func + (left: Swift.UInt8, right: Swift.String) -> Swift.String
}
extension Swift.UInt16 {
  public static func + (left: Swift.UInt16, right: Swift.String) -> Swift.String
}
extension Swift.UInt32 {
  public static func + (left: Swift.UInt32, right: Swift.String) -> Swift.String
}
extension Swift.Int8 {
  public static func + (left: Swift.Int8, right: Swift.String) -> Swift.String
}
extension Swift.Int16 {
  public static func + (left: Swift.Int16, right: Swift.String) -> Swift.String
}
extension Swift.Int64 {
  public static func + (left: Swift.Int64, right: Swift.String) -> Swift.String
}
extension Swift.UInt64 {
  public static func + (left: Swift.UInt64, right: Swift.String) -> Swift.String
}
extension Swift.Int32 {
  public static func >>> (l: Swift.Int32, r: Swift.Int32) -> Swift.Int32
  public static func >>>= (l: inout Swift.Int32, r: Swift.Int32) -> Swift.Int32
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Int32
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func + (left: Swift.Int32, right: Swift.String) -> Swift.String
}
extension Swift.Int : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Int64 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Int32 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Int16 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Int8 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.UInt : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.UInt64 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.UInt32 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.UInt16 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.UInt8 : DCloudUTSFoundation.UniLogProtocol {
  public func tologJSON() -> [Swift.String : Any]
}
extension Swift.Int : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.Int64 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.Int32 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.Int16 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.Int8 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UInt : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UInt64 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UInt32 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UInt16 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
extension Swift.UInt8 : DCloudUTSFoundation.UTSCustomEncodeProtocol {
  public func utsGetValue() -> Any
}
@_hasMissingDesignatedInitializers public class IPATypeBridge {
  public static var baseIpa: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class DCUTSCommitLogBridge {
  @objc public static var handler: ((Swift.String, Swift.String) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DCUTSArrayBufferBridge) @objcMembers public class DCUTSArrayBufferBridge : ObjectiveC.NSObject {
  @objc public static var handler: ((DCloudUTSFoundation.ArrayBuffer) -> JavaScriptCore.JSValue)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DCUTSTypedArrayBridge) @objcMembers public class DCUTSTypedArrayBridge : ObjectiveC.NSObject {
  @objc public static var handler: ((DCloudUTSFoundation.TypedArray) -> JavaScriptCore.JSValue)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UTSBridge : ObjectiveC.NSObject {
  @objc public class func registerJavaScriptClassInstance(_ obj: Swift.AnyObject) -> Swift.Int
  @objc public static func getInstanceId() -> Swift.Int
  @objc public static func storeInstance(obj: Swift.AnyObject) -> Swift.Int
  @objc public static func getInstanceById(_ instanceId: Swift.String) -> Any?
  @objc public static func destroyInstance(_ obj: Swift.AnyObject)
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T
  public func decode<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T where T : Swift.Decodable
  public func decodeIfPresent<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T?
  public func getDecoderError<T>(_ type: T.Type, _ key: Swift.KeyedDecodingContainer<K>.Key) -> Swift.DecodingError
  public func decodeIfPresent<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T? where T : Swift.Decodable
}
public protocol IUTSSourceMap {
  func __$getOriginalPosition() -> DCloudUTSFoundation.UTSSourceMapPosition?
}
@_inheritsConvenienceInitializers @objcMembers @objc(UTSSourceMapPosition) public class UTSSourceMapPosition : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  @objc public init(_ name: Swift.String, _ file: Swift.String, _ line: Swift.Int, _ column: Swift.Int)
  @objc deinit
}
public protocol LogSelf {
  func toLog() -> Any?
}
public protocol UniLogProtocol {
  func tologJSON() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class console {
  public static func log(_ items: Any?...)
  public static func debug(_ items: Any?...)
  public static func info(_ items: Any?...)
  public static func error(_ items: Any?...)
  public static func warn(_ items: Any?...)
  public static func getLogV2(_ item: Any?...) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSJSONObject) @objcMembers public class UTSJSONObject : ObjectiveC.NSObject, DCloudUTSFoundation.IUTSObject, DCloudUTSFoundation.IUTSSourceMap {
  @objc public func __$getOriginalPosition() -> DCloudUTSFoundation.UTSSourceMapPosition?
  @objc public var __utsJsonObjectMap: [Swift.String : Any]
  @objc override dynamic public init()
  @objc public init(dictionary: [Swift.String : Any])
  @objc public init(dictionary: [Swift.String : Any], position: DCloudUTSFoundation.UTSSourceMapPosition?, shouldConvert: Swift.Bool)
  public init(_ item: [Swift.String : Any?], _ position: DCloudUTSFoundation.UTSSourceMapPosition?, _ shouldConvert: Swift.Bool)
  public init(_ item: [Swift.String : Any?], _ position: DCloudUTSFoundation.UTSSourceMapPosition? = nil)
  @objc convenience public init(_ item: Any, _ position: DCloudUTSFoundation.UTSSourceMapPosition? = nil)
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc public func set(_ key: Swift.String, _ value: Any?)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func toMap() -> [Swift.String : Any]
  @objc public func __toJsMap() -> [Swift.String : Any]
  @objc public func toString() -> Swift.String
  public func makeIterator() -> DCloudUTSFoundation.DCUTSJSONObjectIterator
  @objc public static func keys(_ object: DCloudUTSFoundation.UTSJSONObject) -> [Swift.String]
  public static func assign(_ target: Any, _ source: any DCloudUTSFoundation.IUTSObject...) -> DCloudUTSFoundation.UTSJSONObject
  public static func assign<T>(_ target: Any, _ source: any DCloudUTSFoundation.IUTSObject..., type: T.Type) -> T?
  public static func assign<T>(_ target: Any, _ source: any DCloudUTSFoundation.IUTSObject..., type: T.Type) -> T? where T : Swift.Decodable
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUTSJSONObjectIterator
  @objc deinit
}
extension DCloudUTSFoundation.UTSJSONObject {
  @objc dynamic public func getString(_ keyPath: Swift.String) -> Swift.String?
  @objc dynamic public func getString(_ keyPath: Swift.String, _ def: Swift.String) -> Swift.String
  @objc dynamic public func getNumber(_ keyPath: Swift.String) -> Foundation.NSNumber?
  @objc dynamic public func getNumber(_ keyPath: Swift.String, _ def: Foundation.NSNumber) -> Foundation.NSNumber
  public func getBoolean(_ keyPath: Swift.String) -> Swift.Bool?
  @objc dynamic public func getBoolean(_ keyPath: Swift.String, _ def: Swift.Bool) -> Swift.Bool
  @objc dynamic public func getJSON(_ keyPath: Swift.String) -> DCloudUTSFoundation.UTSJSONObject?
  @objc dynamic public func getJSON(_ keyPath: Swift.String, _ def: DCloudUTSFoundation.UTSJSONObject) -> DCloudUTSFoundation.UTSJSONObject
  @objc dynamic public func getAny(_ keyPath: Swift.String) -> Any?
  @objc dynamic public func getAny(_ keyPath: Swift.String, _ def: Any) -> Any
  @objc dynamic public func getArray(_ keyPath: Swift.String) -> [Any]?
  @objc dynamic public func getArrayDef(_ keyPath: Swift.String, _ def: [Any]) -> [Any]
  public func getArray<E>(_ key: Swift.String) -> [E]?
  public func getArray<E>(_ keyPath: Swift.String, _ def: [E]) -> [E]
  public func getArray<E>(_ key: Swift.String) -> [E]? where E : Swift.Decodable
  public func getArray<E>(_ keyPath: Swift.String, _ def: [E]) -> [E] where E : Swift.Decodable
  @objc dynamic public func hasOwnProperty(_ key: Swift.String) -> Swift.Bool
}
public struct DCUTSJSONObjectIterator : Swift.IteratorProtocol {
  public mutating func next() -> Swift.String?
  public typealias Element = Swift.String
}
extension DCloudUTSFoundation.TextDecoderSupportEncoding : Swift.Equatable {}
extension DCloudUTSFoundation.TextDecoderSupportEncoding : Swift.Hashable {}
extension DCloudUTSFoundation.TextDecoderSupportEncoding : Swift.RawRepresentable {}
