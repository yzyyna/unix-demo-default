// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DCloudUniCanvas
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import DCloudUTSFoundation
@_exported import DCloudUniCanvas
import DCloudUniappRuntime
import Foundation
import GLKit
import JavaScriptCore
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objcMembers @objc(RadialGradientImpl) public class RadialGradientImpl : ObjectiveC.NSObject, DCloudUniCanvas.CanvasGradient {
  @objc public var x0: Swift.Float
  @objc public var y0: Swift.Float
  @objc public var r0: Swift.Float
  @objc public var x1: Swift.Float
  @objc public var y1: Swift.Float
  @objc public var r1: Swift.Float
  @objc public var stopCount: Swift.Int
  @objc public var stopPoss: [Swift.Float]
  @objc public var stopColors: [Swift.String]
  public var stops: [(Swift.Float, Swift.String)]
  @objc public func addColorStop(_ stop: Foundation.NSNumber, _ color: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(LinearGradientImpl) public class LinearGradientImpl : ObjectiveC.NSObject, DCloudUniCanvas.CanvasGradient {
  @objc public var startPosX: Swift.Float
  @objc public var startPosY: Swift.Float
  @objc public var endPosX: Swift.Float
  @objc public var endPosY: Swift.Float
  @objc public var stopCount: Swift.Int
  @objc public var stopPoss: [Swift.Float]
  @objc public var stopColors: [Swift.String]
  @objc public func addColorStop(_ stop: Foundation.NSNumber, _ color: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(CanvasPatternImpl) public class CanvasPatternImpl : ObjectiveC.NSObject, DCloudUniCanvas.CanvasPattern {
  @objc final public let ref: Swift.String
  @objc final public let repetition: Swift.String
  @objc public var textureId: Swift.Int32
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniCanvasRegisterImpl) @objcMembers public class UniCanvasRegisterImpl : ObjectiveC.NSObject {
  @objc public static func registerModule()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TextMetrics : JavaScriptCore.JSExport {
  @objc var width: Foundation.NSNumber { get }
}
@objc public protocol CanvasPattern : JavaScriptCore.JSExport {
}
@objc public protocol CanvasGradient : JavaScriptCore.JSExport {
  @objc func addColorStop(_ stop: Foundation.NSNumber, _ color: Swift.String)
}
@objc(CanvasRenderingContext2D) public protocol CanvasRenderingContext2D : JavaScriptCore.JSExport {
  @objc var font: Swift.String { get set }
  @objc var fillStyle: Any { get set }
  @objc var globalAlpha: Foundation.NSNumber { get set }
  @objc var globalCompositeOperation: Swift.String { get set }
  @objc var lineCap: Swift.String { get set }
  @objc var lineDashOffset: Foundation.NSNumber { get set }
  @objc var lineJoin: Swift.String { get set }
  @objc var lineWidth: Foundation.NSNumber { get set }
  @objc var strokeStyle: Any { get set }
  @objc var textAlign: Swift.String { get set }
  @objc var miterLimit: Foundation.NSNumber { get set }
  @objc var textBaseline: Swift.String { get set }
  @objc func arc(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ radius: Foundation.NSNumber, _ startAngle: Foundation.NSNumber, _ endAngle: Foundation.NSNumber, _ anticlockwise: Swift.Bool)
  @objc func arcTo(_ x1: Foundation.NSNumber, _ y1: Foundation.NSNumber, _ x2: Foundation.NSNumber, _ y2: Foundation.NSNumber, _ radius: Foundation.NSNumber)
  @objc func beginPath()
  @objc func bezierCurveTo(_ cp1x: Foundation.NSNumber, _ cp1y: Foundation.NSNumber, _ cp2x: Foundation.NSNumber, _ cp2y: Foundation.NSNumber, _ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc func clearRect(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ width: Foundation.NSNumber, _ height: Foundation.NSNumber)
  @objc func clip()
  @objc func closePath()
  @objc func createPattern(_ image: JavaScriptCore.JSValue, _ repetition: Swift.String) -> any DCloudUniCanvas.CanvasPattern
  @objc func createLinearGradient(_ x0: Foundation.NSNumber, _ y0: Foundation.NSNumber, _ x1: Foundation.NSNumber, _ y1: Foundation.NSNumber) -> any DCloudUniCanvas.CanvasGradient
  @objc func createRadialGradient(_ x0: Foundation.NSNumber, _ y0: Foundation.NSNumber, _ r0: Foundation.NSNumber, _ x1: Foundation.NSNumber, _ y1: Foundation.NSNumber, _ r01: Foundation.NSNumber) -> any DCloudUniCanvas.CanvasGradient
  @objc func draw()
  @objc func drawImage(_ imageResource: JavaScriptCore.JSValue, _ sx: Foundation.NSNumber, _ sy: Foundation.NSNumber, _ sWidth: Foundation.NSNumber, _ sHeight: Foundation.NSNumber, _ dx: Foundation.NSNumber, _ dy: Foundation.NSNumber, _ dWidth: Foundation.NSNumber, _ dHeight: Foundation.NSNumber)
  @objc func ellipse(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ radiusX: Foundation.NSNumber, _ radiusY: Foundation.NSNumber, _ rotation: Foundation.NSNumber, _ startAngle: Foundation.NSNumber, _ endAngle: Foundation.NSNumber)
  @objc func ellipse(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ radiusX: Foundation.NSNumber, _ radiusY: Foundation.NSNumber, _ rotation: Foundation.NSNumber, _ startAngle: Foundation.NSNumber, _ endAngle: Foundation.NSNumber, _ counterclockwise: Foundation.NSNumber)
  @objc func fill(_ path: JavaScriptCore.JSValue, _ fullRule: JavaScriptCore.JSValue)
  @objc func fillRect(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ width: Foundation.NSNumber, _ height: Foundation.NSNumber)
  @objc func getLineDash() -> Swift.Array<Foundation.NSNumber>
  @objc func getImageData(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ width: Foundation.NSNumber, _ height: Foundation.NSNumber) -> JavaScriptCore.JSValue
  @objc func putImageData(_ data: JavaScriptCore.JSValue, _ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ dx: Foundation.NSNumber, _ dy: Foundation.NSNumber, _ dWidth: Foundation.NSNumber, _ dHeight: Foundation.NSNumber)
  @objc func fillText(_ text: Swift.String, _ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ maxWidth: Foundation.NSNumber)
  @objc func lineTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc func measureText(_ text: Swift.String) -> any DCloudUniCanvas.TextMetrics
  @objc func moveTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc func quadraticCurveTo(_ cpx: Foundation.NSNumber, _ cpy: Foundation.NSNumber, _ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc func rect(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ width: Foundation.NSNumber, _ height: Foundation.NSNumber)
  @objc func restore()
  @objc func rotate(_ rotate: Foundation.NSNumber)
  @objc func save()
  @objc func scale(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc func setLineDash(_ segments: Swift.Array<Foundation.NSNumber>)
  @objc func stroke(_ path: JavaScriptCore.JSValue)
  @objc func strokeRect(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ width: Foundation.NSNumber, _ height: Foundation.NSNumber)
  @objc func strokeText(_ text: Swift.String, _ x: Foundation.NSNumber, _ y: Foundation.NSNumber, _ maxWidth: Foundation.NSNumber)
  @objc func transform(_ scaleX: Foundation.NSNumber, _ skewY: Foundation.NSNumber, _ skewX: Foundation.NSNumber, _ scaleY: Foundation.NSNumber, _ translateX: Foundation.NSNumber, _ translateY: Foundation.NSNumber)
  @objc func setTransform(_ scaleX: Foundation.NSNumber, _ skewY: Foundation.NSNumber, _ skewX: Foundation.NSNumber, _ scaleY: Foundation.NSNumber, _ translateX: Foundation.NSNumber, _ translateY: Foundation.NSNumber)
  @objc func resetTransform()
  @objc func reset()
  @objc func translate(_ translateX: Foundation.NSNumber, _ translateY: Foundation.NSNumber)
}
@objc(UniCanvasElement) public protocol UniCanvasElement : JavaScriptCore.JSExport {
  @objc var width: Foundation.NSNumber { get set }
  @objc var height: Foundation.NSNumber { get set }
  @objc func getContext(_ contentType: Swift.String) -> (any DCloudUniCanvas.CanvasRenderingContext2D)?
  @objc func toDataURL(_ type: JavaScriptCore.JSValue, _ encoderOptions: JavaScriptCore.JSValue) -> Swift.String
}
