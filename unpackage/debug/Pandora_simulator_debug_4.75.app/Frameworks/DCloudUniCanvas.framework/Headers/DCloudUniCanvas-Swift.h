#if 0
#elif (defined(__arm64__) && __arm64__) || (defined(__x86_64__) && __x86_64__)
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef DCLOUDUNICANVAS_SWIFT_H
#define DCLOUDUNICANVAS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DCloudUniCanvas",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSNumber;
@class NSString;

SWIFT_PROTOCOL("_TtP15DCloudUniCanvas14CanvasGradient_")
@protocol CanvasGradient <JSExport>
/// <ul>
///   <li>
///     添加颜色的渐变点。小于最小 stop 的部分会按最小 stop 的 color 来渲染，大于最大 stop 的部分会按最大 stop 的 color 来渲染
///   </li>
///   <li>
///     @param {number} stop 表示渐变中开始与结束之间的位置，范围 0-1
///   </li>
///   <li>
///     @param {string} color 渐变点的颜色
///   </li>
/// </ul>
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
@end


SWIFT_PROTOCOL("_TtP15DCloudUniCanvas13CanvasPattern_")
@protocol CanvasPattern <JSExport>
@end


SWIFT_CLASS_NAMED("CanvasPatternImpl")
@interface CanvasPatternImpl : NSObject <CanvasPattern>
@property (nonatomic, readonly, copy) NSString * _Nonnull ref;
@property (nonatomic, readonly, copy) NSString * _Nonnull repetition;
@property (nonatomic) int32_t textureId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JSValue;
@protocol TextMetrics;

SWIFT_PROTOCOL_NAMED("CanvasRenderingContext2D")
@protocol CanvasRenderingContext2D <JSExport>
/// <ul>
///   <li>
///     是对与给定上下文关联的HTMLCanvasElement对象的只读引用
///   </li>
///   <li>
///     设置字体大小
///   </li>
///   <li>
///     @defaultValue 10px
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull font;
/// <ul>
///   <li>
///     设置填充颜色
///   </li>
///   <li>
///     @defaultValue #000 (黑色)
///   </li>
/// </ul>
@property (nonatomic) id _Nonnull fillStyle;
/// <ul>
///   <li>
///     用来描述在 canvas 上绘图之前，设置图形和图片透明度的属性。数值的范围从 0.0（完全透明）到 1.0（完全不透明）
///   </li>
///   <li>
///     @defaultValue 1.0
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull globalAlpha;
/// <ul>
///   <li>
///     在绘制新形状时应用的合成操作的类型，其中 type 是用于标识要使用的合成或混合模式操作的字符串
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull globalCompositeOperation;
/// <ul>
///   <li>
///     指定如何绘制每一条线条末端的属性，可选值：<code>butt</code>线段末端以方形结束；<code>round</code>线段末端以圆形结束；<code>square</code>线段末端以方形结束，但是会增加一个一半宽度的矩形区域。
///   </li>
///   <li>
///     @defaultValue butt
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull lineCap;
/// <ul>
///   <li>
///     设置虚线偏移量
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull lineDashOffset;
/// <ul>
///   <li>
///     设置 2 个长度不为 0 的线条相连部分如何连接在一起的属性，可选值：<code>bevel</code>斜角；<code>round</code>圆角；<code>miter</code>尖角。
///   </li>
///   <li>
///     @defaultValue miter
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull lineJoin;
/// <ul>
///   <li>
///     设置线条的宽度
///   </li>
///   <li>
///     @defaultValue 1px
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull lineWidth;
/// <ul>
///   <li>
///     设置边框的颜色
///   </li>
///   <li>
///     @defaultValue #000 (黑色)
///   </li>
/// </ul>
@property (nonatomic) id _Nonnull strokeStyle;
/// <ul>
///   <li>
///     设置文本的对齐方式，可取值：<code>left</code>左对齐；<code>center</code>居中对齐；<code>right</code>右对齐。
///   </li>
///   <li>
///     @defaultValue left
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull textAlign;
/// <ul>
///   <li>
///     设置斜接面限制比例的属性。当获取属性值时，会返回当前的值（默认值是10.0 ）。当给属性赋值时，0、负数、 Infinity 和 NaN 都会被忽略；除此之外都会被赋予一个新值。
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull miterLimit;
/// <ul>
///   <li>
///     描述绘制文本时，当前文本基线的属性
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull textBaseline;
/// <ul>
///   <li>
///     绘制一段弧线
///   </li>
///   <li>
///     @param {number} x 圆弧中心（圆心）的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 圆弧中心（圆心）的 y 轴坐标
///   </li>
///   <li>
///     @param {number} radius 圆弧的半径
///   </li>
///   <li>
///     @param {number} startAngle 圆弧的起始点，x 轴方向开始计算，单位为弧度
///   </li>
///   <li>
///     @param {number} endAngle 圆弧的终点，单位为弧度
///   </li>
///   <li>
///     @param {number} [anticlockwise=true] 圆弧绘制方向，true：逆时针绘制，false：顺时针绘制。
///   </li>
/// </ul>
- (void)arc:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radius :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle :(BOOL)anticlockwise;
/// <ul>
///   <li>
///     根据控制点和半径绘制圆弧路径，使用当前的描点 (前一个 moveTo 或 lineTo 等函数的止点)。根据当前描点与给定的控制点 1 连接的直线，和控制点 1 与控制点 2 连接的直线，作为使用指定半径的圆的切线，画出两条切线之间的弧线路径
///   </li>
///   <li>
///     @param {number} x1 第一个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y1 第一个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} x2 第二个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y2 第二个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} radius 圆弧的半径
///   </li>
/// </ul>
- (void)arcTo:(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 :(NSNumber * _Nonnull)x2 :(NSNumber * _Nonnull)y2 :(NSNumber * _Nonnull)radius;
/// <ul>
///   <li>
///     开始创建一个路径。需要调用 fill 或者 stroke 才会使用路径进行填充或描边
///   </li>
/// </ul>
- (void)beginPath;
/// <ul>
///   <li>
///     绘制三次贝赛尔曲线路径
///   </li>
///   <li>
///     @param {number} cp1x 第一个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} cp1y 第一个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} cp2x 第二个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} cp2y 第二个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} x 结束点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 结束点的 y 轴坐标
///   </li>
/// </ul>
- (void)bezierCurveTo:(NSNumber * _Nonnull)cp1x :(NSNumber * _Nonnull)cp1y :(NSNumber * _Nonnull)cp2x :(NSNumber * _Nonnull)cp2y :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     清除画布上在该矩形区域内的内容
///   </li>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)clearRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     将当前创建的路径设置为当前剪切路径
///   </li>
/// </ul>
- (void)clip;
/// <ul>
///   <li>
///     关闭一个路径
///   </li>
/// </ul>
- (void)closePath;
/// <ul>
///   <li>
///     对指定的图像创建模式的方法，可在指定的方向上重复元图像
///   </li>
///   <li>
///     @param {string} image 重复的图像源，支持代码包路径和本地临时路径 (本地路径)
///   </li>
///   <li>
///     @param {string} repetition 如何重复图像
///   </li>
/// </ul>
- (id <CanvasPattern> _Nonnull)createPattern:(JSValue * _Nonnull)image :(NSString * _Nonnull)repetition SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     创建一个线性的渐变颜色。返回的CanvasGradient对象需要使用 CanvasGradient.addColorStop() 来指定渐变点，至少要两个
///   </li>
///   <li>
///     @param {number} x0 起点的 x 坐标
///   </li>
///   <li>
///     @param {number} y0 起点的 y 坐标
///   </li>
///   <li>
///     @param {number} x1 终点的 x 坐标
///   </li>
///   <li>
///     @param {number} y1 终点的 y 坐标
///   </li>
/// </ul>
- (id <CanvasGradient> _Nonnull)createLinearGradient:(NSNumber * _Nonnull)x0 :(NSNumber * _Nonnull)y0 :(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     根据参数确定两个圆的坐标，绘制放射性渐变
///   </li>
///   <li>
///     @param {number} x0 开始圆形的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y0 开始圆形的 y 轴坐标
///   </li>
///   <li>
///     @param {number} r0 开始圆形的半径
///   </li>
///   <li>
///     @param {number} x1 结束圆形的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y1 结束圆形的 y 轴坐标
///   </li>
///   <li>
///     @param {number} r1 结束圆形的半径
///   </li>
/// </ul>
- (id <CanvasGradient> _Nonnull)createRadialGradient:(NSNumber * _Nonnull)x0 :(NSNumber * _Nonnull)y0 :(NSNumber * _Nonnull)r0 :(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 :(NSNumber * _Nonnull)r01 SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中
///   </li>
/// </ul>
- (void)draw;
/// <ul>
///   <li>
///     绘制图像到画布
///   </li>
///   <li>
///     @param {string} imageResource 所要绘制的图片资源
///   </li>
///   <li>
///     @param {number} sx 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的左上角 x 坐标
///   </li>
///   <li>
///     @param {number} sy 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的左上角 y 坐标
///   </li>
///   <li>
///     @param {number} sWidth 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的宽度
///   </li>
///   <li>
///     @param {number} sHeight 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的高度
///   </li>
///   <li>
///     @param {number} dx imageResource的左上角在目标 canvas 上 x 轴的位置
///   </li>
///   <li>
///     @param {number} dy imageResource的左上角在目标 canvas 上 y 轴的位置
///   </li>
///   <li>
///     @param {number} dWidth 在目标画布上绘制imageResource的宽度，允许对绘制的imageResource进行缩放
///   </li>
///   <li>
///     @param {number} dHeight 在目标画布上绘制imageResource的高度，允许对绘制的imageResource进行缩放
///   </li>
/// </ul>
- (void)drawImage:(JSValue * _Nonnull)imageResource :(NSNumber * _Nonnull)sx :(NSNumber * _Nonnull)sy :(NSNumber * _Nonnull)sWidth :(NSNumber * _Nonnull)sHeight :(NSNumber * _Nonnull)dx :(NSNumber * _Nonnull)dy :(NSNumber * _Nonnull)dWidth :(NSNumber * _Nonnull)dHeight;
- (void)ellipse:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radiusX :(NSNumber * _Nonnull)radiusY :(NSNumber * _Nonnull)rotation :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle;
- (void)ellipse:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radiusX :(NSNumber * _Nonnull)radiusY :(NSNumber * _Nonnull)rotation :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle :(NSNumber * _Nonnull)counterclockwise;
/// <ul>
///   <li>
///     对当前路径中的内容进行填充
///   </li>
/// </ul>
- (void)fill:(JSValue * _Nonnull)path :(JSValue * _Nonnull)fullRule;
/// *填充一个矩形。用 setFillStyle 设置矩形的填充色，如果没设置默认是黑色
/// <ul>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)fillRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     在填充线时使用虚线模式, 它使用一组值来指定描述模式的线和间隙的交替长度。
///   </li>
///   <li>
///     @ret {segments} Array<number>一组描述交替绘制线段和间距（坐标空间单位）长度的数字
///   </li>
/// </ul>
- (NSArray<NSNumber *> * _Nonnull)getLineDash SWIFT_WARN_UNUSED_RESULT;
- (JSValue * _Nonnull)getImageData:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
- (void)putImageData:(JSValue * _Nonnull)data :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)dx :(NSNumber * _Nonnull)dy :(NSNumber * _Nonnull)dWidth :(NSNumber * _Nonnull)dHeight;
/// <ul>
///   <li>
///     在画布上绘制文本
///   </li>
///   <li>
///     @param {string} text 要渲染的文本字符串
///   </li>
///   <li>
///     @param {number} x 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} y 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} maxWidth 需要绘制的最大宽度
///   </li>
/// </ul>
- (void)fillText:(NSString * _Nonnull)text :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)maxWidth;
/// <ul>
///   <li>
///     增加一个新点，然后创建一条从上次指定点到目标点的线。用 stroke 方法来画线条
///   </li>
///   <li>
///     @param {number} x 目标位置的 x 坐标
///   </li>
///   <li>
///     @param {number} y 目标位置的 y 坐标
///   </li>
/// </ul>
- (void)lineTo:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     测量文本尺寸信息。目前仅返回文本宽度
///   </li>
///   <li>
///     @param {number} text 要渲测量的文本字符串
///   </li>
/// </ul>
- (id <TextMetrics> _Nonnull)measureText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     把路径移动到画布中的指定点
///   </li>
///   <li>
///     @param {number} x 目标位置的 x 坐标
///   </li>
///   <li>
///     @param {number} y 目标位置的 y 坐标
///   </li>
/// </ul>
- (void)moveTo:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     创建二次贝塞尔曲线路径
///   </li>
///   <li>
///     @param {number} cpx 贝塞尔控制点的 x 坐标
///   </li>
///   <li>
///     @param {number} cpy 贝塞尔控制点的 y 坐标
///   </li>
///   <li>
///     @param {number} x 结束点的 x 坐标
///   </li>
///   <li>
///     @param {number} y 结束点的 y 坐标
///   </li>
/// </ul>
- (void)quadraticCurveTo:(NSNumber * _Nonnull)cpx :(NSNumber * _Nonnull)cpy :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     创建一个矩形路径
///   </li>
///   <li>
///     @param {number} x 矩形路径起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形路径起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形路径的宽度
///   </li>
///   <li>
///     @param {number} height 矩形路径的高度
///   </li>
/// </ul>
- (void)rect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     恢复之前保存的绘图上下文
///   </li>
/// </ul>
- (void)restore;
/// <ul>
///   <li>
///     以原点为中心顺时针旋转当前坐标轴
///   </li>
///   <li>
///     @param {rotate} 旋转角度，以弧度计 degrees * Math.PI/180；degrees 范围为 0-360
///   </li>
/// </ul>
- (void)rotate:(NSNumber * _Nonnull)rotate;
/// <ul>
///   <li>
///     保存绘图上下文
///   </li>
/// </ul>
- (void)save;
/// <ul>
///   <li>
///     缩放变换
///   </li>
///   <li>
///     @param {x} 水平方向的缩放因子
///   </li>
///   <li>
///     @param {y} 垂直方向的缩放因子
///   </li>
/// </ul>
- (void)scale:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     在填充线时使用虚线模式, 它使用一组值来指定描述模式的线和间隙的交替长度。
///   </li>
///   <li>
///     @param {segments} Array<number>一组描述交替绘制线段和间距（坐标空间单位）长度的数字
///   </li>
/// </ul>
- (void)setLineDash:(NSArray<NSNumber *> * _Nonnull)segments;
/// <ul>
///   <li>
///     画出当前路径的边框。默认颜色色为黑色
///   </li>
/// </ul>
- (void)stroke:(JSValue * _Nonnull)path;
/// <ul>
///   <li>
///     画一个矩形(非填充)
///   </li>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)strokeRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     文本描边
///   </li>
///   <li>
///     @param {string} text 要渲染的文本字符串
///   </li>
///   <li>
///     @param {number} x 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} y 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} maxWidth 需要绘制的最大宽度
///   </li>
/// </ul>
- (void)strokeText:(NSString * _Nonnull)text :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)maxWidth;
/// <ul>
///   <li>
///     使用矩阵多次叠加当前变换，矩阵由方法的参数进行描述。可以缩放、旋转、移动和倾斜上下文
///   </li>
///   <li>
///     @param {number} scaleX 水平缩放
///   </li>
///   <li>
///     @param {number} skewY 垂直倾斜
///   </li>
///   <li>
///     @param {number} skewX 水平倾斜
///   </li>
///   <li>
///     @param {number} scaleY 垂直缩放
///   </li>
///   <li>
///     @param {number} translateX 水平移动
///   </li>
///   <li>
///     @param {number} translateY 垂直移动
///   </li>
/// </ul>
- (void)transform:(NSNumber * _Nonnull)scaleX :(NSNumber * _Nonnull)skewY :(NSNumber * _Nonnull)skewX :(NSNumber * _Nonnull)scaleY :(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
/// <ul>
///   <li>
///     使用单位矩阵重新设置（覆盖）当前的变换并调用变换
///   </li>
///   <li>
///     @param {number} scaleX 水平缩放
///   </li>
///   <li>
///     @param {number} skewY 垂直倾斜
///   </li>
///   <li>
///     @param {number} skewX 水平倾斜
///   </li>
///   <li>
///     @param {number} scaleY 垂直缩放
///   </li>
///   <li>
///     @param {number} translateX 水平移动
///   </li>
///   <li>
///     @param {number} translateY 垂直移动
///   </li>
/// </ul>
- (void)setTransform:(NSNumber * _Nonnull)scaleX :(NSNumber * _Nonnull)skewY :(NSNumber * _Nonnull)skewX :(NSNumber * _Nonnull)scaleY :(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
/// <ul>
///   <li>
///     使用单位矩阵重新设置当前变换
///   </li>
/// </ul>
- (void)resetTransform;
- (void)reset;
/// <ul>
///   <li>
///     当前网格添加平移变换
///   </li>
///   <li>
///     @param {number} translateX 水平方向的移动距离
///   </li>
///   <li>
///     @param {number} translateY 垂直方向的移动距离
///   </li>
/// </ul>
- (void)translate:(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
@end



SWIFT_CLASS_NAMED("LinearGradientImpl")
@interface LinearGradientImpl : NSObject <CanvasGradient>
@property (nonatomic) float startPosX;
@property (nonatomic) float startPosY;
@property (nonatomic) float endPosX;
@property (nonatomic) float endPosY;
@property (nonatomic) NSInteger stopCount;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stopPoss;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stopColors;
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("RadialGradientImpl")
@interface RadialGradientImpl : NSObject <CanvasGradient>
@property (nonatomic) float x0;
@property (nonatomic) float y0;
@property (nonatomic) float r0;
@property (nonatomic) float x1;
@property (nonatomic) float y1;
@property (nonatomic) float r1;
@property (nonatomic) NSInteger stopCount;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stopPoss;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stopColors;
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP15DCloudUniCanvas11TextMetrics_")
@protocol TextMetrics <JSExport>
@property (nonatomic, readonly, strong) NSNumber * _Nonnull width;
@end


/// canvas元素对象
/// @package io.dcloud.uniapp.runtime
/// @autodoc false
SWIFT_PROTOCOL_NAMED("UniCanvasElement")
@protocol UniCanvasElement <JSExport>
/// 只读属性 Canvas宽度
@property (nonatomic, strong) NSNumber * _Nonnull width;
/// 只读属性 Canvas高度
@property (nonatomic, strong) NSNumber * _Nonnull height;
/// 返回 Canvas 的绘图上下文
- (id <CanvasRenderingContext2D> _Nullable)getContext:(NSString * _Nonnull)contentType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(JSValue * _Nonnull)type :(JSValue * _Nonnull)encoderOptions SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("UniCanvasRegisterImpl")
@interface UniCanvasRegisterImpl : NSObject
+ (void)registerModule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef DCLOUDUNICANVAS_SWIFT_H
#define DCLOUDUNICANVAS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DCloudUniCanvas",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSNumber;
@class NSString;

SWIFT_PROTOCOL("_TtP15DCloudUniCanvas14CanvasGradient_")
@protocol CanvasGradient <JSExport>
/// <ul>
///   <li>
///     添加颜色的渐变点。小于最小 stop 的部分会按最小 stop 的 color 来渲染，大于最大 stop 的部分会按最大 stop 的 color 来渲染
///   </li>
///   <li>
///     @param {number} stop 表示渐变中开始与结束之间的位置，范围 0-1
///   </li>
///   <li>
///     @param {string} color 渐变点的颜色
///   </li>
/// </ul>
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
@end


SWIFT_PROTOCOL("_TtP15DCloudUniCanvas13CanvasPattern_")
@protocol CanvasPattern <JSExport>
@end


SWIFT_CLASS_NAMED("CanvasPatternImpl")
@interface CanvasPatternImpl : NSObject <CanvasPattern>
@property (nonatomic, readonly, copy) NSString * _Nonnull ref;
@property (nonatomic, readonly, copy) NSString * _Nonnull repetition;
@property (nonatomic) int32_t textureId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JSValue;
@protocol TextMetrics;

SWIFT_PROTOCOL_NAMED("CanvasRenderingContext2D")
@protocol CanvasRenderingContext2D <JSExport>
/// <ul>
///   <li>
///     是对与给定上下文关联的HTMLCanvasElement对象的只读引用
///   </li>
///   <li>
///     设置字体大小
///   </li>
///   <li>
///     @defaultValue 10px
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull font;
/// <ul>
///   <li>
///     设置填充颜色
///   </li>
///   <li>
///     @defaultValue #000 (黑色)
///   </li>
/// </ul>
@property (nonatomic) id _Nonnull fillStyle;
/// <ul>
///   <li>
///     用来描述在 canvas 上绘图之前，设置图形和图片透明度的属性。数值的范围从 0.0（完全透明）到 1.0（完全不透明）
///   </li>
///   <li>
///     @defaultValue 1.0
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull globalAlpha;
/// <ul>
///   <li>
///     在绘制新形状时应用的合成操作的类型，其中 type 是用于标识要使用的合成或混合模式操作的字符串
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull globalCompositeOperation;
/// <ul>
///   <li>
///     指定如何绘制每一条线条末端的属性，可选值：<code>butt</code>线段末端以方形结束；<code>round</code>线段末端以圆形结束；<code>square</code>线段末端以方形结束，但是会增加一个一半宽度的矩形区域。
///   </li>
///   <li>
///     @defaultValue butt
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull lineCap;
/// <ul>
///   <li>
///     设置虚线偏移量
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull lineDashOffset;
/// <ul>
///   <li>
///     设置 2 个长度不为 0 的线条相连部分如何连接在一起的属性，可选值：<code>bevel</code>斜角；<code>round</code>圆角；<code>miter</code>尖角。
///   </li>
///   <li>
///     @defaultValue miter
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull lineJoin;
/// <ul>
///   <li>
///     设置线条的宽度
///   </li>
///   <li>
///     @defaultValue 1px
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull lineWidth;
/// <ul>
///   <li>
///     设置边框的颜色
///   </li>
///   <li>
///     @defaultValue #000 (黑色)
///   </li>
/// </ul>
@property (nonatomic) id _Nonnull strokeStyle;
/// <ul>
///   <li>
///     设置文本的对齐方式，可取值：<code>left</code>左对齐；<code>center</code>居中对齐；<code>right</code>右对齐。
///   </li>
///   <li>
///     @defaultValue left
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull textAlign;
/// <ul>
///   <li>
///     设置斜接面限制比例的属性。当获取属性值时，会返回当前的值（默认值是10.0 ）。当给属性赋值时，0、负数、 Infinity 和 NaN 都会被忽略；除此之外都会被赋予一个新值。
///   </li>
/// </ul>
@property (nonatomic, strong) NSNumber * _Nonnull miterLimit;
/// <ul>
///   <li>
///     描述绘制文本时，当前文本基线的属性
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull textBaseline;
/// <ul>
///   <li>
///     绘制一段弧线
///   </li>
///   <li>
///     @param {number} x 圆弧中心（圆心）的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 圆弧中心（圆心）的 y 轴坐标
///   </li>
///   <li>
///     @param {number} radius 圆弧的半径
///   </li>
///   <li>
///     @param {number} startAngle 圆弧的起始点，x 轴方向开始计算，单位为弧度
///   </li>
///   <li>
///     @param {number} endAngle 圆弧的终点，单位为弧度
///   </li>
///   <li>
///     @param {number} [anticlockwise=true] 圆弧绘制方向，true：逆时针绘制，false：顺时针绘制。
///   </li>
/// </ul>
- (void)arc:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radius :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle :(BOOL)anticlockwise;
/// <ul>
///   <li>
///     根据控制点和半径绘制圆弧路径，使用当前的描点 (前一个 moveTo 或 lineTo 等函数的止点)。根据当前描点与给定的控制点 1 连接的直线，和控制点 1 与控制点 2 连接的直线，作为使用指定半径的圆的切线，画出两条切线之间的弧线路径
///   </li>
///   <li>
///     @param {number} x1 第一个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y1 第一个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} x2 第二个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y2 第二个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} radius 圆弧的半径
///   </li>
/// </ul>
- (void)arcTo:(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 :(NSNumber * _Nonnull)x2 :(NSNumber * _Nonnull)y2 :(NSNumber * _Nonnull)radius;
/// <ul>
///   <li>
///     开始创建一个路径。需要调用 fill 或者 stroke 才会使用路径进行填充或描边
///   </li>
/// </ul>
- (void)beginPath;
/// <ul>
///   <li>
///     绘制三次贝赛尔曲线路径
///   </li>
///   <li>
///     @param {number} cp1x 第一个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} cp1y 第一个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} cp2x 第二个控制点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} cp2y 第二个控制点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} x 结束点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 结束点的 y 轴坐标
///   </li>
/// </ul>
- (void)bezierCurveTo:(NSNumber * _Nonnull)cp1x :(NSNumber * _Nonnull)cp1y :(NSNumber * _Nonnull)cp2x :(NSNumber * _Nonnull)cp2y :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     清除画布上在该矩形区域内的内容
///   </li>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)clearRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     将当前创建的路径设置为当前剪切路径
///   </li>
/// </ul>
- (void)clip;
/// <ul>
///   <li>
///     关闭一个路径
///   </li>
/// </ul>
- (void)closePath;
/// <ul>
///   <li>
///     对指定的图像创建模式的方法，可在指定的方向上重复元图像
///   </li>
///   <li>
///     @param {string} image 重复的图像源，支持代码包路径和本地临时路径 (本地路径)
///   </li>
///   <li>
///     @param {string} repetition 如何重复图像
///   </li>
/// </ul>
- (id <CanvasPattern> _Nonnull)createPattern:(JSValue * _Nonnull)image :(NSString * _Nonnull)repetition SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     创建一个线性的渐变颜色。返回的CanvasGradient对象需要使用 CanvasGradient.addColorStop() 来指定渐变点，至少要两个
///   </li>
///   <li>
///     @param {number} x0 起点的 x 坐标
///   </li>
///   <li>
///     @param {number} y0 起点的 y 坐标
///   </li>
///   <li>
///     @param {number} x1 终点的 x 坐标
///   </li>
///   <li>
///     @param {number} y1 终点的 y 坐标
///   </li>
/// </ul>
- (id <CanvasGradient> _Nonnull)createLinearGradient:(NSNumber * _Nonnull)x0 :(NSNumber * _Nonnull)y0 :(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     根据参数确定两个圆的坐标，绘制放射性渐变
///   </li>
///   <li>
///     @param {number} x0 开始圆形的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y0 开始圆形的 y 轴坐标
///   </li>
///   <li>
///     @param {number} r0 开始圆形的半径
///   </li>
///   <li>
///     @param {number} x1 结束圆形的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y1 结束圆形的 y 轴坐标
///   </li>
///   <li>
///     @param {number} r1 结束圆形的半径
///   </li>
/// </ul>
- (id <CanvasGradient> _Nonnull)createRadialGradient:(NSNumber * _Nonnull)x0 :(NSNumber * _Nonnull)y0 :(NSNumber * _Nonnull)r0 :(NSNumber * _Nonnull)x1 :(NSNumber * _Nonnull)y1 :(NSNumber * _Nonnull)r01 SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中
///   </li>
/// </ul>
- (void)draw;
/// <ul>
///   <li>
///     绘制图像到画布
///   </li>
///   <li>
///     @param {string} imageResource 所要绘制的图片资源
///   </li>
///   <li>
///     @param {number} sx 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的左上角 x 坐标
///   </li>
///   <li>
///     @param {number} sy 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的左上角 y 坐标
///   </li>
///   <li>
///     @param {number} sWidth 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的宽度
///   </li>
///   <li>
///     @param {number} sHeight 需要绘制到画布中的，imageResource的矩形（裁剪）选择框的高度
///   </li>
///   <li>
///     @param {number} dx imageResource的左上角在目标 canvas 上 x 轴的位置
///   </li>
///   <li>
///     @param {number} dy imageResource的左上角在目标 canvas 上 y 轴的位置
///   </li>
///   <li>
///     @param {number} dWidth 在目标画布上绘制imageResource的宽度，允许对绘制的imageResource进行缩放
///   </li>
///   <li>
///     @param {number} dHeight 在目标画布上绘制imageResource的高度，允许对绘制的imageResource进行缩放
///   </li>
/// </ul>
- (void)drawImage:(JSValue * _Nonnull)imageResource :(NSNumber * _Nonnull)sx :(NSNumber * _Nonnull)sy :(NSNumber * _Nonnull)sWidth :(NSNumber * _Nonnull)sHeight :(NSNumber * _Nonnull)dx :(NSNumber * _Nonnull)dy :(NSNumber * _Nonnull)dWidth :(NSNumber * _Nonnull)dHeight;
- (void)ellipse:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radiusX :(NSNumber * _Nonnull)radiusY :(NSNumber * _Nonnull)rotation :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle;
- (void)ellipse:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)radiusX :(NSNumber * _Nonnull)radiusY :(NSNumber * _Nonnull)rotation :(NSNumber * _Nonnull)startAngle :(NSNumber * _Nonnull)endAngle :(NSNumber * _Nonnull)counterclockwise;
/// <ul>
///   <li>
///     对当前路径中的内容进行填充
///   </li>
/// </ul>
- (void)fill:(JSValue * _Nonnull)path :(JSValue * _Nonnull)fullRule;
/// *填充一个矩形。用 setFillStyle 设置矩形的填充色，如果没设置默认是黑色
/// <ul>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)fillRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     在填充线时使用虚线模式, 它使用一组值来指定描述模式的线和间隙的交替长度。
///   </li>
///   <li>
///     @ret {segments} Array<number>一组描述交替绘制线段和间距（坐标空间单位）长度的数字
///   </li>
/// </ul>
- (NSArray<NSNumber *> * _Nonnull)getLineDash SWIFT_WARN_UNUSED_RESULT;
- (JSValue * _Nonnull)getImageData:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
- (void)putImageData:(JSValue * _Nonnull)data :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)dx :(NSNumber * _Nonnull)dy :(NSNumber * _Nonnull)dWidth :(NSNumber * _Nonnull)dHeight;
/// <ul>
///   <li>
///     在画布上绘制文本
///   </li>
///   <li>
///     @param {string} text 要渲染的文本字符串
///   </li>
///   <li>
///     @param {number} x 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} y 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} maxWidth 需要绘制的最大宽度
///   </li>
/// </ul>
- (void)fillText:(NSString * _Nonnull)text :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)maxWidth;
/// <ul>
///   <li>
///     增加一个新点，然后创建一条从上次指定点到目标点的线。用 stroke 方法来画线条
///   </li>
///   <li>
///     @param {number} x 目标位置的 x 坐标
///   </li>
///   <li>
///     @param {number} y 目标位置的 y 坐标
///   </li>
/// </ul>
- (void)lineTo:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     测量文本尺寸信息。目前仅返回文本宽度
///   </li>
///   <li>
///     @param {number} text 要渲测量的文本字符串
///   </li>
/// </ul>
- (id <TextMetrics> _Nonnull)measureText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     把路径移动到画布中的指定点
///   </li>
///   <li>
///     @param {number} x 目标位置的 x 坐标
///   </li>
///   <li>
///     @param {number} y 目标位置的 y 坐标
///   </li>
/// </ul>
- (void)moveTo:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     创建二次贝塞尔曲线路径
///   </li>
///   <li>
///     @param {number} cpx 贝塞尔控制点的 x 坐标
///   </li>
///   <li>
///     @param {number} cpy 贝塞尔控制点的 y 坐标
///   </li>
///   <li>
///     @param {number} x 结束点的 x 坐标
///   </li>
///   <li>
///     @param {number} y 结束点的 y 坐标
///   </li>
/// </ul>
- (void)quadraticCurveTo:(NSNumber * _Nonnull)cpx :(NSNumber * _Nonnull)cpy :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     创建一个矩形路径
///   </li>
///   <li>
///     @param {number} x 矩形路径起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形路径起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形路径的宽度
///   </li>
///   <li>
///     @param {number} height 矩形路径的高度
///   </li>
/// </ul>
- (void)rect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     恢复之前保存的绘图上下文
///   </li>
/// </ul>
- (void)restore;
/// <ul>
///   <li>
///     以原点为中心顺时针旋转当前坐标轴
///   </li>
///   <li>
///     @param {rotate} 旋转角度，以弧度计 degrees * Math.PI/180；degrees 范围为 0-360
///   </li>
/// </ul>
- (void)rotate:(NSNumber * _Nonnull)rotate;
/// <ul>
///   <li>
///     保存绘图上下文
///   </li>
/// </ul>
- (void)save;
/// <ul>
///   <li>
///     缩放变换
///   </li>
///   <li>
///     @param {x} 水平方向的缩放因子
///   </li>
///   <li>
///     @param {y} 垂直方向的缩放因子
///   </li>
/// </ul>
- (void)scale:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y;
/// <ul>
///   <li>
///     在填充线时使用虚线模式, 它使用一组值来指定描述模式的线和间隙的交替长度。
///   </li>
///   <li>
///     @param {segments} Array<number>一组描述交替绘制线段和间距（坐标空间单位）长度的数字
///   </li>
/// </ul>
- (void)setLineDash:(NSArray<NSNumber *> * _Nonnull)segments;
/// <ul>
///   <li>
///     画出当前路径的边框。默认颜色色为黑色
///   </li>
/// </ul>
- (void)stroke:(JSValue * _Nonnull)path;
/// <ul>
///   <li>
///     画一个矩形(非填充)
///   </li>
///   <li>
///     @param {number} x 矩形起点的 x 轴坐标
///   </li>
///   <li>
///     @param {number} y 矩形起点的 y 轴坐标
///   </li>
///   <li>
///     @param {number} width 矩形的宽度
///   </li>
///   <li>
///     @param {number} height 矩形的高度
///   </li>
/// </ul>
- (void)strokeRect:(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)width :(NSNumber * _Nonnull)height;
/// <ul>
///   <li>
///     文本描边
///   </li>
///   <li>
///     @param {string} text 要渲染的文本字符串
///   </li>
///   <li>
///     @param {number} x 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} y 开始绘制文本的点的 X 轴坐标
///   </li>
///   <li>
///     @param {number} maxWidth 需要绘制的最大宽度
///   </li>
/// </ul>
- (void)strokeText:(NSString * _Nonnull)text :(NSNumber * _Nonnull)x :(NSNumber * _Nonnull)y :(NSNumber * _Nonnull)maxWidth;
/// <ul>
///   <li>
///     使用矩阵多次叠加当前变换，矩阵由方法的参数进行描述。可以缩放、旋转、移动和倾斜上下文
///   </li>
///   <li>
///     @param {number} scaleX 水平缩放
///   </li>
///   <li>
///     @param {number} skewY 垂直倾斜
///   </li>
///   <li>
///     @param {number} skewX 水平倾斜
///   </li>
///   <li>
///     @param {number} scaleY 垂直缩放
///   </li>
///   <li>
///     @param {number} translateX 水平移动
///   </li>
///   <li>
///     @param {number} translateY 垂直移动
///   </li>
/// </ul>
- (void)transform:(NSNumber * _Nonnull)scaleX :(NSNumber * _Nonnull)skewY :(NSNumber * _Nonnull)skewX :(NSNumber * _Nonnull)scaleY :(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
/// <ul>
///   <li>
///     使用单位矩阵重新设置（覆盖）当前的变换并调用变换
///   </li>
///   <li>
///     @param {number} scaleX 水平缩放
///   </li>
///   <li>
///     @param {number} skewY 垂直倾斜
///   </li>
///   <li>
///     @param {number} skewX 水平倾斜
///   </li>
///   <li>
///     @param {number} scaleY 垂直缩放
///   </li>
///   <li>
///     @param {number} translateX 水平移动
///   </li>
///   <li>
///     @param {number} translateY 垂直移动
///   </li>
/// </ul>
- (void)setTransform:(NSNumber * _Nonnull)scaleX :(NSNumber * _Nonnull)skewY :(NSNumber * _Nonnull)skewX :(NSNumber * _Nonnull)scaleY :(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
/// <ul>
///   <li>
///     使用单位矩阵重新设置当前变换
///   </li>
/// </ul>
- (void)resetTransform;
- (void)reset;
/// <ul>
///   <li>
///     当前网格添加平移变换
///   </li>
///   <li>
///     @param {number} translateX 水平方向的移动距离
///   </li>
///   <li>
///     @param {number} translateY 垂直方向的移动距离
///   </li>
/// </ul>
- (void)translate:(NSNumber * _Nonnull)translateX :(NSNumber * _Nonnull)translateY;
@end



SWIFT_CLASS_NAMED("LinearGradientImpl")
@interface LinearGradientImpl : NSObject <CanvasGradient>
@property (nonatomic) float startPosX;
@property (nonatomic) float startPosY;
@property (nonatomic) float endPosX;
@property (nonatomic) float endPosY;
@property (nonatomic) NSInteger stopCount;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stopPoss;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stopColors;
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("RadialGradientImpl")
@interface RadialGradientImpl : NSObject <CanvasGradient>
@property (nonatomic) float x0;
@property (nonatomic) float y0;
@property (nonatomic) float r0;
@property (nonatomic) float x1;
@property (nonatomic) float y1;
@property (nonatomic) float r1;
@property (nonatomic) NSInteger stopCount;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stopPoss;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stopColors;
- (void)addColorStop:(NSNumber * _Nonnull)stop :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP15DCloudUniCanvas11TextMetrics_")
@protocol TextMetrics <JSExport>
@property (nonatomic, readonly, strong) NSNumber * _Nonnull width;
@end


/// canvas元素对象
/// @package io.dcloud.uniapp.runtime
/// @autodoc false
SWIFT_PROTOCOL_NAMED("UniCanvasElement")
@protocol UniCanvasElement <JSExport>
/// 只读属性 Canvas宽度
@property (nonatomic, strong) NSNumber * _Nonnull width;
/// 只读属性 Canvas高度
@property (nonatomic, strong) NSNumber * _Nonnull height;
/// 返回 Canvas 的绘图上下文
- (id <CanvasRenderingContext2D> _Nullable)getContext:(NSString * _Nonnull)contentType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(JSValue * _Nonnull)type :(JSValue * _Nonnull)encoderOptions SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("UniCanvasRegisterImpl")
@interface UniCanvasRegisterImpl : NSObject
+ (void)registerModule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
