{"version":3,"sources":["uni_modules/fpss-modbus-tcp/utssdk/app-ios/index.uts","uni_modules/fpss-modbus-tcp/utssdk/interface.uts"],"sourcesContent":["import { connectType, connectType2, WriteRegisterType, WriteRegisterCallback } from '../interface.uts'\r\nimport { UInt16 } from 'Swift';\r\n\r\n\r\n\r\n// FPSSModbusTcpNative.connectToModbusServer(host = '192.168.130.30', port = 502,\r\n// FPSSModbusTcpNative.connectToModbusServer(host = '192.168.150.224', port = 502,\r\nexport const connect : connectType = function () {\r\n\tFPSSModbusTcpNative.connectToModbusServer(host = '192.168.150.224', port = 502,\r\n\t\tcompletion = (Bool : Boolean, Error : any) => {\r\n\t\t\t__f__('log','at uni_modules/fpss-modbus-tcp/utssdk/app-ios/index.uts:11','uts:连接成功')\r\n\t\t\tif (Bool) {\r\n\t\t\t\tconst startA : UInt16 = 0x00\r\n\t\t\t\tconst countA : UInt16 = 20\r\n\r\n\t\t\t\tFPSSModbusTcpNative.readHoldingRegisters(startAddress = startA, count = countA, completion = (registers : any, Error : any) => {\r\n\t\t\t\t\t__f__('log','at uni_modules/fpss-modbus-tcp/utssdk/app-ios/index.uts:17','uts:读取成功', registers, Error);\r\n\r\n\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\r\n\t\t\t}\r\n\t\t})\r\n}\r\n// 直接导出disConnect函数，移除中间变量disConnect0\r\nexport const disConnect : connectType = function () {\r\n\r\n\tFPSSModbusTcpNative.disconnectModbusServer()\r\n}\r\nexport const myApi : connectType = function () {\r\n\r\n\tFPSSModbusTcpNative.myApiNa()\r\n}\r\n\r\n// 写入寄存器功能实现\r\nexport const writeHoldingRegisters : WriteRegisterType = function (\r\n\t_startAddress : number,\r\n\t_values : number[],\r\n\tcallback : WriteRegisterCallback\r\n) {\r\n\t// 将JavaScript的number类型转换为Swift的UInt16类型\r\n\tconst startAddr : UInt16 = 0x00\r\n\tconst regValues : UInt16[] = [0xFF, 0x10, 0x11]\r\n\r\n\t// 调用原生Swift方法执行写入操作\r\n\tFPSSModbusTcpNative.writeHoldingRegisters(\r\n\t\tstartAddress = startAddr,\r\n\t\tvalues = regValues,\r\n\t\tcompletion = (success : Boolean, error : string | null) => {\r\n\t\t\tcallback(success, error)\r\n\t\t}\r\n\t)\r\n}","// 声明 uts 插件的 API 类型  \r\n\r\n\r\n/**\r\n * 声明连接Modbus服务器API类型\r\n * connect\r\n */\r\nexport type connectType = () => void\r\n\r\n// 写入寄存器回调类型\r\nexport type WriteRegisterCallback = (success: boolean, error: string | null) => void\r\n\r\n// 写入寄存器函数类型\r\nexport type WriteRegisterType = (startAddress: number, values: number[], callback: WriteRegisterCallback) => void"],"names":[],"mappings":";;AACA,YAA+B;iBCMnB,oBAAoB,IAAI;iBAGxB,2BAAyB,SAAS,IAAO,IAAE,OAAO,MAAM,MAAY,IAAI;iBAGxE,uBAAqB,cAAc,QAAM,IAAE,SAAQ,QAAM,KAAI,oBAAU,0BAA0B,IAAI;ADN1G,WAAM,uBAAwB;;AACpC,oBAAoB,qBAAqB,CAAC,MAAO,mBAAmB,MAAO,GAAG,EAC7E,YAAa;GAAC,MAAO,QAAS,UAAQ,GAAG;AACxC,YAAyE;AACzE,IAAI,MAAM;IACT,IAAM,QAAS,SAAS,IAAI;IAC5B,IAAM,QAAS,SAAS,EAAE;IAE1B,oBAAoB,oBAAoB,CAAC,cAAe,QAAQ,OAAQ,QAAQ,YAAa;OAAC,WAAY,GAAG,IAAE,UAAQ,GAAG;IACzH,YAAyE,YAAY,WAAW;;;;;AAU9F,WAAM,0BAA2B;;AAEvC,oBAAoB,sBAAsB;;AAEpC,WAAM,qBAAsB;;AAElC,oBAAoB,OAAO;;AAIrB,WAAM,2CAA4C;CACxD,EAAA,eAAgB,QAAM,EACtB,EAAA,UAAU,QAAM,CAAE,EAClB,EAAA,wCAAgC;AAGhC,IAAM,WAAY,SAAS,IAAI;AAC/B,IAAM,YAAuB;AAAC,QAAI;AAAE,QAAI;AAAE,QAAI;CAAC,MAA7B;AAGlB,oBAAoB,qBAAqB,CACxC,cAAe,WACf,QAAS,WACT,YAAa;GAAC,SAAU,QAAS,OAAQ,MAAM;AAC9C,SAAS,SAAS;;;6BC3CW,IAAI;;;gCAAJ,IAAI;;;2BAAJ,IAAI;;;wCAMH,cAAc,QAAM,IAAE,SAAQ,QAAM,KAAI,0BAAoC,IAAI;iCAAhF,cAAsB;KAHlB,SAAS,IAAO,EAAE,OAAO,MAAM,MAAY,IAAI;IAGX,SAHpC,SAAkB;;;;;;0CAHvB,IAAI;;;6CAAJ,IAAI;;;wCAAJ,IAAI;;;qDAMH,cAAc,QAAM,IAAE,SAAQ,QAAM,KAAI,0BAAoC,IAAI;yCAAhF,cAAsB,QAAkB"}