{"version":3,"file":"index.uts","sourceRoot":"","sources":["uni_modules/my-test-plugin/utssdk/app-ios/index.uts"],"names":[],"mappings":"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","sourcesContent":["// import { UTSModule } from 'uts';\nimport { NWConnection, NWEndpoint, NWConnectionState, DispatchQueue } from \"Network\";\n\n// @UTSModule\nexport class ModbusTCPClient {\n    private connection: NWConnection;\n    private isConnected: boolean = false;\n\n    constructor(private host: string, private port: number) {\n        const endpoint = NWEndpoint.Host(this.host);\n        const portEndpoint = NWEndpoint.Port(this.port);\n        this.connection = NWConnection(endpoint, port: portEndpoint, using: .tcp);\n        \n        this.connection.stateUpdateHandler = (newState: NWConnectionState) => {\n            if (newState == 'ready') {\n                this.isConnected = true;\n                __f__('log','at uni_modules/my-test-plugin/utssdk/app-ios/index.uts:17',\"Connected to Modbus TCP server\");\n            } else if (newState == 'failed') {\n                this.isConnected = false;\n                __f__('log','at uni_modules/my-test-plugin/utssdk/app-ios/index.uts:20',\"Connection failed\");\n            }\n        };\n    }\n\n    connect() {\n        this.connection.start(DispatchQueue.global());\n    }\n\n    readHoldingRegisters(address: number, count: number, callback: (data: number[] | null, error: string | null) => void) {\n        if (!this.isConnected) {\n            callback(null, \"Not connected\");\n            return;\n        }\n        const transactionId = Math.floor(Math.random() * 65535);\n        const request = [\n            (transactionId >> 8) & 0xFF, transactionId & 0xFF,\n            0, 0, // Protocol ID\n            0, 6, // Length\n            1, // Unit ID\n            3, // Function Code\n            (address >> 8) & 0xFF, address & 0xFF,\n            (count >> 8) & 0xFF, count & 0xFF\n        ];\n        this.connection.send(request, completion: .contentProcessed((error) => {\n            if (error) callback(null, error.localizedDescription);\n            else this.connection.receive(1, maximumLength: 65536, completion: (data: Uint8Array, _, _, receiveError) => {\n                if (receiveError) callback(null, receiveError.localizedDescription);\n                else if (data && data.length > 9 && data[7] == 3) {\n                    const byteCount = data[8];\n                    const values: number[] = [];\n                    for (let i = 0; i < byteCount / 2; i++) {\n                        values.push((data[9 + i * 2] << 8) | data[9 + i * 2 + 1]);\n                    }\n                    callback(values, null);\n                } else callback(null, \"Invalid response\");\n            });\n        }));\n    }\n\n    writeRegister(address: number, value: number, callback: (success: boolean, error: string | null) => void) {\n        if (!this.isConnected) {\n            callback(false, \"Not connected\");\n            return;\n        }\n        const transactionId = Math.floor(Math.random() * 65535);\n        const request = [\n            (transactionId >> 8) & 0xFF, transactionId & 0xFF,\n            0, 0, // Protocol ID\n            0, 6, // Length\n            1, // Unit ID\n            6, // Function Code\n            (address >> 8) & 0xFF, address & 0xFF,\n            (value >> 8) & 0xFF, value & 0xFF\n        ];\n        this.connection.send(request, completion: .contentProcessed((error) => {\n            if (error) callback(false, error.localizedDescription);\n            else this.connection.receive(1, maximumLength: 12, completion: (data: Uint8Array, _, _, receiveError) => {\n                if (receiveError) callback(false, receiveError.localizedDescription);\n                else if (data && data.length == 12 && data[7] == 6) {\n                    callback(true, null);\n                } else callback(false, \"Invalid response\");\n            });\n        }));\n    }\n}"]}